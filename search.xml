<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git的使用</title>
      <link href="2021/10/29/Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/10/29/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>昨天晚上按照学长的指导改代码的时候不小心把仓库清空了。具体操作是加了.ignore文件可以将一些没必要上传的文件屏蔽，但是我为了效果更好(因为Gitee上已经有了)于是先登入Gitee把仓库里的东西一个一个删除。然后IDEA推送到仓库的时候检验冲突了，接着不知怎得先去拉取了一遍。问题是我已经将Gitee上的东西都删除了呀。所以对着一个空仓库拉取导致本地代码啥都没了。当时真的吓死我了，于是又是一次深夜找学长改代码的经历。所以非常不好意思的我今天花了一天时间学习Git的基本操作。</p><p>首先我们的Git功能非常强大。我个人理解，Git会记录你对项目下每一个操作，每次提交分为一个版本。同时git可以控制当前项目直接跳转到以前的任何一个版本称之为版本回退，当然也能跳回来。同时git还能从某一版本衍生出分支操作往不同的方向开发，之后就是远程推送。我个人学习的时候将其分为这三个部分分别学习。</p><h1 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h1><p>首先我们在本地最开始的操作肯定是建立仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这样会在当前目录建立一个”.git”的目录这个我们不用管，表示当前仓库已经建立好了。</p><p>Git目录下的文件有3个状态，工作区，暂存区，和仓库。</p><p><img src="/.com//../../../img/Git%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"></p><p>每当我们新建一个文件或者修改一个文件时，这个文件会处于工作区，我们需要将他add进暂存区然后提交进入仓库。</p><p>将文件加入暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>将暂存区的文件提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;注释内容&quot;</span><br></pre></td></tr></table></figure><p>这样我们就完成了一个代码版本，之后我们可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>查看我们的提交记录</p><p>当我们操作有误需要回退时可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitID</span><br></pre></td></tr></table></figure><p>来回退到相应的版本。我们这里的commitID可以从前面<code>git log</code>里面查看，如果看不到可以使用<code>git reflog</code>这个命令能查看所有的记录。</p><p>在任何时候我们都可以使用<code>git status</code>来查看当前仓库的状态，比如那些文件发生改动没提交等等。</p><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><p>当我们一个项目过大的时候我们可以两个或者多人同时开发不同的功能。多人之间坑定没办法实时操作，但是利用Git我们可以为每个人创建分支，当他们完成各自的任务再将分支合并。这样就能快速完成项目的开发。</p><p>我们可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>来查看所有分支。同时如果加上参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &quot;分支名&quot;</span><br></pre></td></tr></table></figure><p>就能创建一个分支。如果我们需要切换分支则可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &quot;分支名&quot;</span><br></pre></td></tr></table></figure><p>因为加了<code>-b</code>参数所以当分支不存在时会自动创建分支。</p><p>当一个分支的任务完成我们就要合并分支了。我们需要先切换到主分支一般是<code>master</code>分支，然后使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &quot;分支名&quot;</span><br></pre></td></tr></table></figure><p>这样就能将分支合并到主分支。</p><p>有时一个分支提交后可能就失去了意义，所以我们还要删除分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &quot;分支名&quot;</span><br></pre></td></tr></table></figure><p>当一个分支还没有推送合并时，Git会阻止删除，这是可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git branch -D &quot;分支名&quot;</span><br></pre></td></tr></table></figure><p>强制删除。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>我们每个开发人员的电脑里的项目文件都可以当成一个仓库，但是我们需要同步代码时是非常不方便的。所以我们需要一个远程仓库，所有人员统一去这个仓库上同步代码。</p><p>我们在Gitee上创建仓库的时候可以获取仓库地址。然后在本地GitBash使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &quot;git仓库地址&quot;</span><br></pre></td></tr></table></figure><p><code>origin</code>表示远程仓库的名字我们一般都叫这个，这样就能将我们本地仓库和远程仓库关联上。</p><p>之后我们就可以将本地提交推送到远端，使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程主机名] [本地分支名]:[远程分支名]</span><br></pre></td></tr></table></figure><p>如果本地分支名与远程分支名相同，则可以省略冒号<code>:</code>如果前面关联上了可以直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>就能推送上去</p><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>之后就是最重要的地方了，冲突是之前见到最多问题。当多个分支修改同一份代码的同一处位置时，只要他们都往远端推送就会产生冲突。</p><p>本博客部署于Gitee以前更新博客的时候，有时会有莫名其妙的冲突我都是直接初始化远端仓库然后再推送。因为只有我一个人所以没啥问题，以后如果多人一起开发的话还是要解决冲突的。</p><p>当我们使用Git推送遇到冲突的时候我们需要找到冲突的文件找到冲突的地方手动修改后即可正常推送。</p><p><img src="/.com//../../../img/Git%E7%9A%84%E4%BD%BF%E7%94%A8/wallpaper.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于第Spring Boot博客后端项目的改进</title>
      <link href="2021/10/28/%E5%85%B3%E4%BA%8E%E7%AC%ACSpring-Boot%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%94%B9%E8%BF%9B/"/>
      <url>2021/10/28/%E5%85%B3%E4%BA%8E%E7%AC%ACSpring-Boot%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%94%B9%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先感谢学长晚上下班后深夜还要帮我指出项目的不足，再此非常感谢。</p><h1 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h1><p>首先我在使用git上传的时候把.idea文件夹中的内容也提交上去了，这里面放的是一些项目的配置信息，包括历史记录，版本控制信息等。没必要上传git，并且会导致一个原本很小的项目内存一百多M。</p><p>这个在IDEA安装<code>.ignore</code>插件将不用上传的东西选上就好。</p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程数依据"><a href="#线程数依据" class="headerlink" title="线程数依据"></a>线程数依据</h2><p>我在写项目的过程中对于一些不怎么影响主线程的操作用的多线程去执行，所以要配置线程池。但是我写的时候对于线程池的一些配置则完全是乱配的。学长告诉我规范。</p><ul><li>当我们的项目IO操作比较频繁的时候(比如数据库读写)，我们一般设置为2 * n.</li><li>当我们的项目cpu操作频繁的时候一般设置为n + 1.</li></ul><p>(这里的n表示服务器cpu的核心数)</p><h2 id="任务队列大小"><a href="#任务队列大小" class="headerlink" title="任务队列大小"></a>任务队列大小</h2><p>这个和消息队列类似，当我们的线程池满了的时候可以将新的请求放入任务队列，等待线程池里面线程运行结束。但是我们的任务队列会放在内存中所以我们必须设置限制防止队列过大撑爆内存。其大小不能超过系统能容纳的上限。</p><h2 id="线程池要注意的点"><a href="#线程池要注意的点" class="headerlink" title="线程池要注意的点"></a>线程池要注意的点</h2><p>其实如果没什么要求的话可以用Spring自带的线程池，任务队列大小设置为系统容纳大小。</p><p>线程池的执行机制还要去看一下。</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>缓存用aop切面处理不会破坏原来的任务，但是缓存一般作用于service而不是controller。</p><p>缓存的使用场景：</p><ul><li>读比较多，写入比较少。</li><li>热点数据需要实时更新。</li><li>数据丢失故障率比较小。(数据丢失对系统没啥影响)</li></ul><p>所以例如最热数据，点击量，浏览量等数据一般加缓存，而文章列表这种用户实时操作的数据不可以加缓存。</p><p>同时缓存可以用@SpringCache实现。</p><p><strong>注意</strong></p><p>缓存与数据库一致性问题。</p><p>要定期将缓存中的数据回写到数据库。</p><h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><p>jwt和token+redis是两种鉴权方式。</p><h1 id="Service与Controller解耦"><a href="#Service与Controller解耦" class="headerlink" title="Service与Controller解耦"></a>Service与Controller解耦</h1><p>service只负责返回数据，不负责包装成Result对象。直接返回相应数据即可，在Controller中包装成前端需要的Result。</p><p>Controller返回Result的时候可以将不同的Result分类比如PageResult，ArticleResult等。</p><p>Controller的各类参数前端给，假如需求更改前端必然要改样式，后端更改数据耗时。</p><h2 id="Controller层执行模板"><a href="#Controller层执行模板" class="headerlink" title="Controller层执行模板"></a>Controller层执行模板</h2><p>可以写一个controller的执行模板，之后对controller的处理比较方便类似于aop但是切面不好调试。</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>可以使用重载返回Result的状态码。同时枚举的状态码要统一也可以设置为错误信息。</p><p><strong>注意</strong></p><p>不能向外界透露任何系统内部信息，状态码是给系统内部看的，前端返回提醒的数据可以在Result的data里面。</p><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p><code>@Autowired</code>注解会提示过时可以用<code>@Resource</code>注解，最好不要用构造器注入。</p><p><strong>区别</strong></p><ul><li>@Autowired是基于Spring规范开发，在实现注入功能的时候是基于By type的方式去注入</li><li>@Resource是基于Java的规范开发，在实现注入功能的时候是基于By name的方式来注入</li></ul><p>By name ：根据被注解的属性的name，在Spring容器中查找相同名字的bean</p><p>By type ：根据被注解的属性的class，在容器中查找相同class的bean</p><h1 id="魔法值"><a href="#魔法值" class="headerlink" title="魔法值"></a>魔法值</h1><p>魔法值有些时候不能很清楚的表达意思，最好建立一个常量包。尤其是一些字符用常量包加上注解能很好的表达意思。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释要写规范，写明这个类，方法是干什么用的。</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>可以看下log4j2比较规范。</p><h1 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h1><p>很多情况获得的对象要小心为空的情况。可以用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.notNull(object, <span class="string">&quot;msg&quot;</span>);</span><br></pre></td></tr></table></figure><p>来检查是否为空。</p><p>两个字符串对象也是可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.equals(s1, s2);</span><br></pre></td></tr></table></figure><p>防止为空有一个字符串为空。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前大概这么多，要改的东西还有很多得慢慢来。</p><p>2021 年 10 月 28 日</p><p><img src="/.com//../../../img/%E5%85%B3%E4%BA%8E%E7%AC%ACSpring-Boot%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%94%B9%E8%BF%9B/img.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从第一个Spring Boot项目学到的东西</title>
      <link href="2021/10/27/%E4%BB%8E%E7%AC%AC%E4%B8%80%E4%B8%AASpring-Boot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>2021/10/27/%E4%BB%8E%E7%AC%AC%E4%B8%80%E4%B8%AASpring-Boot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>暑假里偷着时间学了一点点SpringBoot,这几天正好没事，于是学着做了一个博客的后端项目.比起刚学的时候还是懂了很多东西所以打算写下来记录一下。（<a href="https://gitee.com/Hyperion-LR/hyperion-blog">链接</a>）</p><p>首先我们的请求的顺序应该是进入服务器，经过拦截器放行后进入controller层，controller接口调用相应的service实现类及其方法处理请求，如果要从数据库查询或者更改操作那还要进入Dao层，之后将处理后的结果包装返回出去。那么我按顺序来讲一下我在这个项目中学到的东西。</p><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>首先是注解</p><ul><li>@Controller：最普通的注解表明该类是一个controller，能够处理http请求。</li><li>@RestController：基本上等于@ResponseBody + @Controller 告诉Spring容器该controller只返回json数据不返回视图。</li><li>@RequestMapping：配置url映射，表示该controller处理哪个url的请求。同时类似的还有@GetMapping和@PostMapping表示只接受get或者post请求。</li><li>@PathVariable:获取RESTfull类型的url中的数据。</li><li>@RequestParam:获取请求中可以封装成一个对象的参数。</li></ul><p>其实controller要做的事情不多只要接受数据然后直接调用service最多返回的时候包转一下就可以了，本人之前学的时候总是在controller里面写入很多东西，其应该都交给service去完成，不同的模块完成不同的任务，这正是Spring Boot降低耦合性的要求。</p><p>如果http请求的数据比较复杂，我们可以设置param对象接收。</p><p>最后我们一定是返回一个和前端约定好的json封装成result对象返回。</p><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>借助Spring Boot框架开发web项目时，在业务层（Service）这一部分，标准做法是：定义一个接口，然后再一个或多个类去实现。</p><p>注解</p><ul><li>@Service：将该类标识为service由Spring管理，之后使用时可以直接注入。</li></ul><p>这个地方没什么好说的主要是处理请求返回数据。</p><h1 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h1><p>到了坑最多的地方了，这一层主要有pojo类，mapper映射，以及vo对象。</p><h2 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h2><p>首先是我们的pojo对象，我们一般将数据库中的表映射成实体类，并加上@Data注解方便我们MyBatis-plus操作，注意实体类的名称要与数据表的名称对应上，实体类的属性要与数据库表中的列属性对相应（比如数据表中的bigint在实体类用Long，varchar用String，同时实体类的属性要为基本数据的包装类）。这样才能使得MyBatis能够将实体类和数据表对应上。</p><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><p>mapper是我认为项目中最为麻烦的几个配置之一。</p><p>我们定义一个mapper接口后通常让该接口实现BaseMapper&lt; T &gt;这个泛型接口。T指的是pojo类，访问那个数据表就写其对应的pojo类。能实现单表操作，还是比较方便的。</p><p>我一般创建一个LambdaQueryWrapper&lt; T &gt;对象，这个泛型对象更像是一个条件，通过<code>eq()</code>方法指定查询条件，还能通过<code>last()</code>方法加上额外的条件,比如查找文章id为1的一篇文章。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper.select(Article::getId, <span class="number">1</span>);</span><br><span class="line">queryWrapper.last(<span class="string">&quot;limit &quot;</span> + limit);<span class="comment">// 找到一个就不找了，速度更快</span></span><br><span class="line">Article article = articleMapper.selectOne(queryWrapper);</span><br></pre></td></tr></table></figure><p>当涉及多表查询的时候我们就不得不用.xml文件手写sql语句了，当小白（比如我）大费周章写好sql运行项目的时候经常能看到以下报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid bound statement (not found): xxx.xxx...mapper.xxx.xml</span><br></pre></td></tr></table></figure><p>这个错误。这个错误我遇到很多次了。最开始很奇怪，总觉得自己是对的什么都对应的总觉得是项目的问题，后来改多了总结出了解决办法：</p><ul><li>遇到这个错误一定是自己没配好，Spring在运行的时候没找到该映射文件。</li><li>首先看下依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后是application配置文件。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mybatis-plus.mapper-locations=classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><ul><li>接着config下看看配置mybaits配置文件扫描包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyperion.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hyperion</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hyperion.blog.dao.mapper&quot;)</span> <span class="comment">// 这里写.xml文件地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlushInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        mybatisPlushInterceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlushInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果配置没问题就看mapper.xml文件内namespace是否和相应接口的包路径对应，还有id是否与接口方法名对应，还有参数类型(parameterType)和返回值类型(resultType)是否对应上。最好安装插件，如果方法旁边能够出现小鸟的标识符点击能直接跳转那么应该是没问题了。</li><li>如果还不行，看看文件目录，IDEA在创建包的时候如果包名为com.a.b会按目录创建好com目录下会有a，a目录下会有b。但是如果创建文件时如果输入这个名字，则会创建一个名为”com.a.b”的文件夹，虽然插件能识别但是springboot似乎不能正常识别。（本人基本上问题出现在这里）</li></ul><p>总之，Spring是不会有错的多看看总能找出错误。</p><h2 id="vo"><a href="#vo" class="headerlink" title="vo"></a>vo</h2><p>这个我之前一直不能理解，如果我要返回用户数据我都从数据库中查到了用户的所有信息，我直接全部返回不行吗？现在想清楚了。</p><ul><li>首先数据库中查询的时候没必要查全部的数据，数据库是很慢的东西这样查询很浪费时间。</li><li>就算查询后返回给前端肯定数据越小越好，所以要啥给啥就行。</li><li>最重要的一点，数据封装。有些时候前端要的数据并不一定正好就是我们数据库里的数据，可能需要我们做出一些改动。比如，我们新加入一个用户时，该用户的id我们采用雪花算法生成一个19位的id，我们的数据库里id的类型是bigint，pojo的id属性是Long都能装下，可是当我们返回给前端时，js的number类型最高只有17位这就造成了精度缺失。而我们建立一个vo对象这个vo对象的id属性类型我们设置为String再返回给前端就能正常识别，所以我们需要将数据库里查到的数据包装成vo对象在返回给前端，解决前端请求的数据与数据库查询的不兼容，这就是vo对象存在的意义。</li></ul><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>这个和拦截器很像，不过拦截器是作用在请求进入服务器还没进入容器的时候，而切面则是作用于某个方法即将调用，我们可以把它抽取出来，在他调用前和调用后做些什么东西，并处理一下返回值。一般使用过程为：</p><ul><li>定义一个注解，可以在里面设置一些属性</li><li>写一个类在其中定义切点，定义一个切面，并考虑怎么将其切入。</li><li>使用<code>Object result = joinPoint.proceed();</code>即可获得原方法的运行结果，我们可以在其调用前后加点料。</li></ul><p>我一般在日志和缓存的时候使用他。</p><h1 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h1><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>之前的学习中我一直用sessionID作为验证登录的工具，即用户登录后用获取sessionID返回给前端只要sessionID没变我们就认为用户在登录状态，而sessionID改变的话我们就认为用户需要重新登录。这样做还能做出挤下线的效果。之后觉得这么做不安全，得加密。</p><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p><p>流程上是这样的：</p><ul><li>用户使用用户名密码来请求服务器</li><li>服务器进行验证用户的信息</li><li>服务器通过验证发送给用户一个token</li><li>客户端存储token，并在每次请求时附送上这个token值</li><li>服务端验证token值，并返回数据</li></ul><p>这个token必须要在每次请求时传递给服务端，它应该保存在请求头里。之后每次请求我们就可以拿到token解析验证。</p><h3 id="jwt的组成"><a href="#jwt的组成" class="headerlink" title="jwt的组成"></a>jwt的组成</h3><p>jwt有三段信息组成，第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p><h4 id="头部"><a href="#头部" class="headerlink" title="头部"></a><strong>头部</strong></h4><p>一般头部有两部分信息组成:</p><ul><li>声明类型：告知这个token的加密鉴权类型，我们这里是jwt。</li><li>声明加密算法：告知我们加密用到的算法，比如<code>SHA256</code>.</li></ul><p>然后将头部进行base64加密（该加密可以被破解）</p><h4 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a><strong>载荷</strong></h4><p>载荷就是存放有效信息的地方，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul><p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p><ul><li><strong>iss</strong>: jwt签发者</li><li><strong>sub</strong>: jwt所面向的用户</li><li><strong>aud</strong>: 接收jwt的一方</li><li><strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li><strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li><li><strong>iat</strong>: jwt的签发时间</li><li><strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p><strong>公共的声明</strong> ：<br> 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p><strong>私有的声明</strong> ：<br> 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><h4 id="签证信息"><a href="#签证信息" class="headerlink" title="签证信息"></a>签证信息</h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret</li></ul><p>这个部分需要前面加密后的header和加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分，这部分是不可破解的。</p><p>我们每次登录将用户id通过jwt生成的token返回给前端并将用户信息存入redis，之后每次请求在请求头带着这个token，我们服务器解析完后判断是否为用户是否登录。用redis还能使其主动过期。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal是本地线程中的一个缓存空间，我们在同一个线程中可以用它来存一些东西。比如我们拦截器验证请求登陆后可以获取登录信息放进去，在之后的方法中再拿出来。这样就省去我们查询数据库了。这里需要注意的是，ThreadLocal并不是一个Thread，而是Thread的局部变量，相当于每个进程的静态变量区域。</p><p>比如我们这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyperion.blog.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hyperion.blog.dao.pojo.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hyperion</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserThreadLocal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SysUser&gt; THREAD_LOCAL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserThreadLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        THREAD_LOCAL.set(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SysUser <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> THREAD_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要的时候直接调用就可以了。</p><p><strong>注意</strong></p><p>我们必须最后将ThreadLocal中的数据全部不remove，否则会发生内存泄漏。因为每一个线程内部的ThreadLocal是一个类似于map的结构以key-value的形式存在。key是弱应用，当内存不够的时候会被垃圾回收器回收，而value是强引用，不会被回收。所以当key被回收的时候就发生了内存泄露。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>一些不影响主线程的事情我们可以使用多线程去处理。我们可以开一个线程池子然后需要用到多线程的地方直接从线程池拿线程运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyperion.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hyperion</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">asyncServiceExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 设置核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 设置最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//配置队列大小</span></span><br><span class="line">        executor.setQueueCapacity(Integer.MAX_VALUE);</span><br><span class="line">        <span class="comment">// 设置线程活跃时间（秒）</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// 设置默认线程名称</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;冰箱主人的博客项目&quot;</span>);</span><br><span class="line">        <span class="comment">// 等待所有任务结束后再关闭线程池</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//执行初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p>我们可以建立几个数据表用在存那些角色可以访问那些链接，之后用户请求的时候找到请求的url去数据表找，找到就是能访问，找不到就是不能访问拒绝请求。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前大概想到这么多，本人刚开始学springboot，肯定有很多错误，如有错误请批评指正。                                                                                                                                                                                                2021年 10月 27日</p><p><img src="/.com//../../../img/%E4%BB%8E%E7%AC%AC%E4%B8%80%E4%B8%AASpring-Boot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/img.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客nc140排序</title>
      <link href="2021/08/07/%E7%89%9B%E5%AE%A2NC140-%E6%8E%92%E5%BA%8F/"/>
      <url>2021/08/07/%E7%89%9B%E5%AE%A2NC140-%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="NC140：排序"><a href="#NC140：排序" class="headerlink" title="NC140：排序"></a>NC140：排序</h1><p><a href="https://www.nowcoder.com/practice/2baf799ea0594abd974d37139de27896?tpId=196&&tqId=37185&rp=1&ru=/activity/oj&qru=/ta/job-code-total/question-ranking">题目链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个数组，请你编写一个函数，返回该数组排序后的形式。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5,2,3,1,4]</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>就是一个普普通通的排序，把数组里面的所有元素按从小到大的顺序排后输出即可。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>直接调用库函数$sort$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] MySort (<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        Arrays.sort(arr); <span class="comment">// 调用Arrays包下的sort函数</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样是最简单的方法，</p><p>时间复杂度：$O_{n*log(n)}$($Arrays.sort()$是经过调优排序算法,当数据比较大时为快排)</p><p>空间复杂度：$O_{(1)}$（没有产生新的数组）</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>快速排序</p><p>这里我们实现方法一中$Arrays.sort()$函数的快排</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>快排是基于二分的思想实现的，在待排序的数列中，我们首先要找一个数字作为基准值，之后我们需要把这个待排序的数列中小于基准值的元素移动到待排序的数列的左边，把大于基准值的元素移动到待排序的数列的右边，这时我们就得到了两个相对有序的小数组。之后对两个小数组不断地划分，划分成更多的数组，直到每个数组的大小为1（只剩下一个元素）。这时我们的原数组排序完成。（$Arrays.sort()$中的快排好像每次划分为三份，不过我们这样已经足够快）相对与冒泡排序来讲快排每一次交换元素的跨度非常大，所以速度也会快很多。</p><p>算法步骤：</p><ol><li>确定基准值</li><li>将小于基准值的放入其左边，大于的放入右边</li><li>基准值将数组分为两个数组，并递归分别进入左右数组重复操作</li></ol><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="/.com//../../../img/NC140/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.jpg"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] MySort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>,arr.length-<span class="number">1</span>);     <span class="comment">// 开始进入递归</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high) &#123;</span><br><span class="line">            <span class="comment">//将L[low,high]一分为二,算出基准值pivot,该值得位置固定,不用再变化</span></span><br><span class="line">            pivot=partition(L,low,high);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对pivot两边的数组分别排序</span></span><br><span class="line">            quickSort(L,low,pivot-<span class="number">1</span>);</span><br><span class="line">            quickSort(L,pivot+<span class="number">1</span>,high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  选择一个基准值(关键字) 把它放到某个位置 使其左边的值都比它小 右边的值都比它大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivotkey;</span><br><span class="line">        pivotkey=L[low];</span><br><span class="line">        <span class="comment">//顺序很重要，要先从右边找</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high) &#123;</span><br><span class="line">            <span class="comment">//从后往前找到比key小的放到前面去</span></span><br><span class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; L[high]&gt;=pivotkey) &#123;  </span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(L,low,high);</span><br><span class="line">            <span class="comment">//从前往后找到比key大的 放到后面去</span></span><br><span class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; L[low]&lt;=pivotkey) &#123;  </span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(L,low,high);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//遍历所有记录  low的位置即为 key所在位置, 且固定,不用再改变</span></span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组的两个位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] L,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=L[i];</span><br><span class="line">        L[i]=L[j];</span><br><span class="line">        L[j]=temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O_{n*log(n)}$(平均每次确定数组一半相对于另一半的顺序)</p><p>空间复杂度：$O_{(n)}$（在原数组上进行操作）</p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>归并排序</p><p>我们这里介绍速度同样很快的排序算法<strong>归并排序</strong></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>归并排序是创建在归并操作上的一种有效的排序算法，算法是采用分治法的一个非常典型的应用，且各层分治递归可以同时进行。我们对待排序的数组不断的二分，直到每个数组只有一个元素，然后不断的两两将其按大小进行归并知道最后归并为一个数组，这时数组已经排好序。</p><p>算法步骤：</p><ol><li>将数组不断二分</li><li>将数组两两按大小归并</li></ol><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img src="/.com//../../../img/NC140/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png" alt="归并排序"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] MySort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="comment">//新建一个临时数组存放</span></span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始进入递归</span></span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, tmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high, <span class="keyword">int</span>[] tmp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// tmp临时数组的索引</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左边序列和右边序列起始索引</span></span><br><span class="line">        <span class="keyword">int</span> j = low, k = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按顺序将两个数组归并为一个</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= mid &amp;&amp; k &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[k]) &#123;</span><br><span class="line">                tmp[i++] = arr[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[i++] = arr[k++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若左边序列还有剩余，则将其全部拷贝进tmp[]中</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= mid) &#123;</span><br><span class="line">            tmp[i++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若右边序列还有剩余，则将其全部拷贝进tmp[]中</span></span><br><span class="line">        <span class="keyword">while</span> (k &lt;= high) &#123;</span><br><span class="line">            tmp[i++] = arr[k++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将tmp数组返回arr</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; i; t++) &#123;</span><br><span class="line">            arr[low + t] = tmp[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span>[] tmp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对左边序列进行归并排序</span></span><br><span class="line">            mergeSort(arr, low, mid, tmp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对右边序列进行归并排序</span></span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, high, tmp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//合并两个有序序列</span></span><br><span class="line">            merge(arr, low, mid, high, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O_{n*log(n)}$(由图解可以知道每次对数组二分，直到每个数组长度为1，然后两两组合装回去)</p><p>空间复杂度：$O_{(n)}$（只新建了一个临时的数组）</p><p><img src="/.com//../../../img/NC140/back.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 牛客 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客题解NC25</title>
      <link href="2021/07/22/%E7%89%9B%E5%AE%A2NC25-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0-II/"/>
      <url>2021/07/22/%E7%89%9B%E5%AE%A2NC25-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0-II/</url>
      
        <content type="html"><![CDATA[<h1 id="牛客NC25-删除有序链表中重复的元素-II"><a href="#牛客NC25-删除有序链表中重复的元素-II" class="headerlink" title="牛客NC25#删除有序链表中重复的元素-II#"></a>牛客NC25#删除有序链表中重复的元素-II#</h1><p><a href="https://www.nowcoder.com/practice/c087914fae584da886a0091e877f2c79?tpId=188&&tqId=38643&rp=1&ru=/activity/oj&qru=/ta/job-code-high-week/question-ranking">题目链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>删除给出链表中的重复元素（链表中元素从小到大有序），使链表中的所有元素都只出现一次<br>例如：<br>给出的链表为1→1→2,返回1→2.<br>给出的链表为1→1→2→3→3,返回1→2→3.</p><p>题目很简单，因为给的是升序链表相同的都挨在一起，我们确定链表中一个值$L_i$是否存在重复只需要判断用一个变量记录下当前值然后如果链表下一个值等于当前值（$temp$）时删除直到碰到一个不相等的值后更新$temp$即可。</p><h2 id="方法一：删除链表内重复的值"><a href="#方法一：删除链表内重复的值" class="headerlink" title="方法一：删除链表内重复的值"></a>方法一：删除链表内重复的值</h2><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>我们只要依次遍历链表，然后判断遍历的元素是否存在重复，重复删除，否则留下即可。</p><p>所以：</p><ol><li>链表第一项不管</li><li>第二项开始当$L_i = L_{i - 1}$时删除$L_i$</li></ol><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span> <span class="params">(ListNode head)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode poc = head;</span><br><span class="line">        ListNode ed = poc;</span><br><span class="line">        <span class="keyword">while</span>(poc != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ed.val != poc.val)&#123;</span><br><span class="line">                ed.next = poc;</span><br><span class="line">                ed = ed.next;</span><br><span class="line">            &#125;</span><br><span class="line">            poc = poc.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ed.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O_{(n)}$只需要遍历一遍链表就可以</p><p>空间复杂度$O_{(1)}$在原链表上修改</p><h2 id="方法二：新建链表"><a href="#方法二：新建链表" class="headerlink" title="方法二：新建链表"></a>方法二：新建链表</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实和上面差不多只是上面是在原来的链表上操作，但是我们新建一个链表返回。</p><p>我们将第一个新节点加入我们新建的链表，之后遍历原来的链表，遍历的过程每次与新的链表尾节点比较，不同时加入新链表，因为新链表的节点都在原链表出现过，相同时一定是重复元素所以跳过即可。</p><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span> <span class="params">(ListNode head)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">        ListNode poc = res;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val != poc.val)&#123;</span><br><span class="line">                poc.next = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">                poc = poc.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O_{(n)}$只需要遍历一次链表</p><p>空间复杂度：$O_{(n)}$需要新建一个链表返回</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客题解NC24</title>
      <link href="2021/07/06/%E7%89%9B%E5%AE%A2NC24-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0-I/"/>
      <url>2021/07/06/%E7%89%9B%E5%AE%A2NC24-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0-I/</url>
      
        <content type="html"><![CDATA[<h1 id="牛客NC24-删除有序链表中重复的元素-I"><a href="#牛客NC24-删除有序链表中重复的元素-I" class="headerlink" title="牛客NC24#删除有序链表中重复的元素-I#"></a>牛客NC24#删除有序链表中重复的元素-I#</h1><p><a href="https://www.nowcoder.com/practice/71cef9f8b5564579bf7ed93fbe0b2024?tpId=196&&tqId=37063&rp=1&ru=/activity/oj&qru=/ta/job-code-total/question-ranking">题目链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给出一个升序排序的链表，删除链表中的所有重复出现的元素，只保留原链表中只出现一次的元素。<br>例如：<br>给出的链表为1→2→3→3→4→4→5, 返回1→2→5.<br>给出的链表为1→1→1→2→3, 返回2→3.</p><h2 id="方法一：删除链表内重复的值"><a href="#方法一：删除链表内重复的值" class="headerlink" title="方法一：删除链表内重复的值"></a>方法一：删除链表内重复的值</h2><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>题目很简单，因为给的是升序链表相同的都挨在一起，我们确定链表中一个值$L_i$是否存在重复只需要判断他的前一项$L_{i - 1}$和后一项$L_{i +1}$是否相同即可。所以我们只要依次遍历链表，然后判断遍历的元素是否重复，重复删除，否则留下即可。但是在遍历的时候我们会碰到第一个元素没有前一项以及最后一个元素没有后一项的情况，所以要单独拿出来。</p><p>所以：</p><ol><li>$L_{0}$只需要和$L_{1}$比较是否相等。</li><li>$L_{i}$需要和$L_{i - 1}$和$L_{i +1}$比较是否相等。$(i &gt; 0 $ &amp;&amp; $ i &lt; n)$</li><li>$L_n$只需亚和$L_{n - 1}$比较即可。$($$n$为链表长度$)$</li><li>删除只需要将前面非重复元素的指针直接指向后一个非重复的指针或者null（当前为最后一个非重复元素时）</li></ol><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="/.com//../../../img/nc24/%E7%89%9B%E5%AE%A2%E9%A2%98%E8%A7%A3.png" alt="牛客题解"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span> <span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123; <span class="comment">// 当空链表或者只有一个节点时直接返回。</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode ed,poc;<span class="comment">// ed：指向上一个非重复元素， poc：遍历head</span></span><br><span class="line">        <span class="keyword">if</span>(head != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head.next != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val)&#123; <span class="comment">// 找到第一个非重复元素</span></span><br><span class="line">                head = head.next;</span><br><span class="line">                <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123; <span class="comment">//找不到第一个重复元素直接返回空值</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(head.val != head.next.val)&#123;<span class="comment">// 防止a→a→b→b时，a→b时判断失误的情况</span></span><br><span class="line">                    head = head.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = head;</span><br><span class="line">        ed = res;<span class="comment">//更新ed</span></span><br><span class="line">        poc = ed.next;</span><br><span class="line">        <span class="keyword">while</span>(poc != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(poc.next != <span class="keyword">null</span> &amp;&amp; poc.val == poc.next.val)&#123;</span><br><span class="line">                <span class="keyword">if</span>(poc.next.next == <span class="keyword">null</span>)&#123;<span class="comment">// 很重要，当末尾两个元素重复时直接返回</span></span><br><span class="line">                    ed.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">                poc = poc.next;</span><br><span class="line">                <span class="keyword">if</span>(poc.next != <span class="keyword">null</span> &amp;&amp; poc.val != poc.next.val)&#123; <span class="comment">//判断与下一个元素是否重复</span></span><br><span class="line">                    poc = poc.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ed.next = poc;</span><br><span class="line">            ed = ed.next;<span class="comment">//更新ed</span></span><br><span class="line">            poc = poc.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ed.next = <span class="keyword">null</span>; <span class="comment">//切断链表</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O_{(n)}$</p><p>空间复杂度$O_{(1)}$</p><h2 id="方法二：新建链表"><a href="#方法二：新建链表" class="headerlink" title="方法二：新建链表"></a>方法二：新建链表</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实和上面差不多只是上面是在原来的链表上操作，有些复杂的特判(也可能是我太菜了)，如果我们新建一个链表返回那么会简单很多。</p><p>首先我们要找到第一个没有重复的元素然后加入新的链表。之后还是遍历原链表，每当我们找到一个没有重复的元素的时候我们将其加入新的链表后面。最后返回新的链表。但是我们要在新链表前加一个头节点$-1$方便操作，最后返回$res.next$即可。</p><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img src="/.com//../../../img/nc24/%E7%89%9B%E5%AE%A2%E9%A2%98%E8%A7%A32.png" alt="牛客题解2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span> <span class="params">(ListNode head)</span> </span>&#123; <span class="comment">// 当空链表或者只有一个节点时直接返回。</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);<span class="comment">// 新建节点</span></span><br><span class="line">        ListNode poc = res;<span class="comment">// 遍历节点</span></span><br><span class="line">        <span class="keyword">int</span> f = -<span class="number">1</span>;<span class="comment">// 当前遍历节点的前一项</span></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(poc.val != head.val &amp;&amp; head.val != head.next.val &amp;&amp; head.val != f)&#123;<span class="comment">// 不需要特别找出第一个非重复元素</span></span><br><span class="line">                poc.next = <span class="keyword">new</span> ListNode(head.val);<span class="comment">// 每找到一个非重复元素加入新的链表后面</span></span><br><span class="line">                poc = poc.next;</span><br><span class="line">            &#125;</span><br><span class="line">            f = head.val;<span class="comment">//更新，确保下一次遍历时能对比是否重复</span></span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;<span class="comment">// 当原链表到头</span></span><br><span class="line">                <span class="keyword">if</span>(head.val != f)&#123;<span class="comment">//判断最后一个是否需要加入新链表</span></span><br><span class="line">                    poc.next = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res.next;<span class="comment">//因为第一个是-1</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O_{(n)}$</p><p>空间复杂度：$O_{n}$</p><p><img src="/.com//../../../img/nc24/0.png" alt="0"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC2021广东省赛补题</title>
      <link href="2021/06/30/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
      <url>2021/06/30/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/17797/A">A</a></p><p><img src="/.com//../../../img/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/A.jpg"></p><p>一个$n*m$的矩阵，矩阵每个元素值$F(i,j) = i * j$,找出第$k$大的$F(i,j)$很简单，矩阵每一列或者行的最大值永远是最后面那个所以用一个优先队列维护所有列中最大值即可。每次拿出最大值在放入该列第二大的那个取$k$减一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,m,k;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        q.push(&#123;i * m, i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; temp;</span><br><span class="line">    <span class="keyword">while</span>(--k)&#123;</span><br><span class="line">        temp = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        temp.first -= temp.second;</span><br><span class="line">        q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; q.top().first &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/17797/D">D</a></p><p><img src="/.com//../../../img/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/D.jpg"></p><p>这题就直接模拟，不会超时。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        maxn = max(maxn, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">0</span>] = a[n + <span class="number">1</span>] = <span class="number">1000000009</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> temp = a[i];</span><br><span class="line">        <span class="keyword">int</span> l = i - <span class="number">1</span>, r = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp &lt; maxn) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; a[l] &amp;&amp; temp &lt; a[r]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; <span class="number">0</span> &amp;&amp; temp &gt;= a[l]) &#123;</span><br><span class="line">                temp *= <span class="number">2</span>;</span><br><span class="line">                l--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r &lt;= n &amp;&amp; temp &gt;= a[r]) &#123;</span><br><span class="line">                temp *= <span class="number">2</span>;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == n + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((l == <span class="number">0</span> &amp;&amp; r == n + <span class="number">1</span>) || (temp &gt;= maxn)) &#123;</span><br><span class="line">            ans.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it:ans) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/17797/G">G</a></p><p><img src="/.com//../../../img/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/G.jpg"></p><p>这题找规律，可以知道知道，</p><ol><li>$B是不会把2分为两个1的，因为2分为两个1只能走一步，但是A能走两步（删除两次1）所以当数列中出现2我们不用管他。$</li><li>$当一个数为奇数时分成两个数总会有一个偶数，这是无法避免的，结合1所以我们$A$的操作就是将所有的奇数n每次分为2和n-2，能分n/2+1次.(最后多出的1可以加一次删除操作)$</li><li>$当一个数为偶数时。B只会将其分为若干个2这样才是最优解。<a href="https://ac.nowcoder.com/acm/contest/17797/I">$</a></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">     <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,temp;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">         <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">             <span class="keyword">if</span>(temp &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                 a += temp/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 b += temp/<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (a &gt; b)&#123;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/17797/I">I</a></p><p><img src="/.com//../../../img/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/I.jpg"></p><p>这个就是判断一个两个点是否再函数同一侧即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equ</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span>) || (a &lt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x1,y1,z1,x2,y2,z2;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; z2;</span><br><span class="line">        <span class="keyword">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">        ans &amp;= equ(<span class="number">1000</span> * x1 - y1 * y1 - z1 * z1, <span class="number">1000</span> * x2 - y2 * y2 - z2 * z2);</span><br><span class="line">        ans &amp;= equ(<span class="number">1000</span> * y1 - x1 * x1 - z1 * z1,<span class="number">1000</span> * y2 - x2 * x2 - z2 * z2);</span><br><span class="line">        ans &amp;= equ(<span class="number">1000</span> * z1 - y1 * y1 - x1 * x1,<span class="number">1000</span> * z2 - y2 * y2 - x2 * x2);</span><br><span class="line">        ans &amp;= equ(<span class="number">-1000</span> * x1 - y1 * y1 - z1 * z1,<span class="number">-1000</span> * x2 - y2 * y2 - z2 * z2);</span><br><span class="line">        ans &amp;= equ(<span class="number">-1000</span> * y1 - x1 * x1 - z1 * z1,<span class="number">-1000</span> * y2 - x2 * x2 - z2 * z2);</span><br><span class="line">        ans &amp;= equ(<span class="number">-1000</span> * z1 - y1 * y1 - x1 * x1,<span class="number">-1000</span> * z2 - y2 * y2 - x2 * x2);</span><br><span class="line">        <span class="keyword">if</span>(ans)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/17797/J">J</a></p><p><img src="/.com//../../../img/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/J.jpg"></p><p>模拟</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100007</span>];</span><br><span class="line"><span class="keyword">int</span> temp_insert[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> test;</span><br><span class="line">    s.emplace(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">        test = s.front();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, key = test - i * i; key &gt; <span class="number">0</span>; ++i, key = test - i * i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[key] &gt; a[test] + <span class="number">1</span> || a[key] == <span class="number">0</span>) &#123;</span><br><span class="line">                a[key] = a[test] + <span class="number">1</span>;</span><br><span class="line">                s.emplace(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, key = test + i * i; key &lt;= <span class="number">100000</span>; ++i, key = test + i * i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[key] &gt; a[test] + <span class="number">1</span> || a[key] == <span class="number">0</span>) &#123;</span><br><span class="line">                a[key] = a[test] + <span class="number">1</span>;</span><br><span class="line">                s.emplace(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t, temp;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">     <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[temp] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差点忘了还有一个博客</p><p>2021 年 6 月 30 日</p><p><img src="/.com//../../../img/ICPC2021%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B%E8%A1%A5%E9%A2%98/75778903_p0.jpg" alt="75778903_p0"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
            <tag> ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 107 (Rated for Div. 2) 题解</title>
      <link href="2021/04/13/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/"/>
      <url>2021/04/13/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Review-Site"><a href="#A-Review-Site" class="headerlink" title="A. Review Site"></a><a href="https://codeforces.com/contest/1511/problem/A">A. Review Site</a></h2><p><img src="/.com//../../../img/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/A.jpg"></p><p>题目巨长，实际就看一下$%2==1$的数有多少就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,x;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"> <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"> <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"> <span class="keyword">if</span>(x % <span class="number">2</span>)&#123;</span><br><span class="line">     ++ans;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-GCD-Length"><a href="#B-GCD-Length" class="headerlink" title="B. GCD Length"></a><a href="https://codeforces.com/contest/1511/problem/B">B. GCD Length</a></h2><p><img src="/.com//../../../img/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/B.jpg" alt="B"></p><p>输入$a,b,c;$构造$x$和$y$，$x$共$a$位，$y$共$b$位，要让$gcd(x, y)$的位数为$c$。</p><p>用1构造就行后面加0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b,c;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y,gcd = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        gcd = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        a -= c;</span><br><span class="line">        b -= c;</span><br><span class="line">        --c;</span><br><span class="line">        <span class="keyword">while</span>(c)&#123;</span><br><span class="line">            --c;</span><br><span class="line">            gcd *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x = gcd;</span><br><span class="line">        y = gcd;</span><br><span class="line">        <span class="keyword">while</span>(a)&#123;</span><br><span class="line">            x *= <span class="number">10</span>;</span><br><span class="line">            --a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(b)&#123;</span><br><span class="line">            y *= <span class="number">10</span>;</span><br><span class="line">            --b;</span><br><span class="line">        &#125;</span><br><span class="line">        y += gcd;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Yet-Another-Card-Deck"><a href="#C-Yet-Another-Card-Deck" class="headerlink" title="C. Yet Another Card Deck"></a><a href="https://codeforces.com/contest/1511/problem/C">C. Yet Another Card Deck</a></h2><p><img src="/.com//../../../img/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/C.jpg"></p><p>一个牌堆每张牌有不同的颜色，也有许多牌的颜色相同，每次找到给定颜色最上的牌的位置输出并放到牌堆最上面。</p><p>这题我们用个桶记录最靠前的颜色的位置就行，不在最前的不用管他。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">57</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="keyword">int</span> temp,tmp;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">if</span>(a[temp] == <span class="number">0</span>)&#123;</span><br><span class="line">            a[temp] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[temp] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        tmp = a[temp];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">50</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; tmp &amp;&amp; a[j] != <span class="number">0</span>)&#123;</span><br><span class="line">                ++a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[temp] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Min-Cost-String"><a href="#D-Min-Cost-String" class="headerlink" title="D. Min Cost String"></a><a href="https://codeforces.com/contest/1511/problem/D">D. Min Cost String</a></h2><p><img src="/.com//../../../img/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/D.jpg"></p><p>又是构造，这场构造挺多。构造一个长度为n的串，串中最大字符是k，同时让开销尽可能小。开销是当$s_i = s_j$的同时 $s_{i + 1} = s_{j + 1}$增加一个开销。</p><p>我们用一个数据$int$  $a[26][26]$来记录串中的连接关系$a[i][j]$表示$ij$这样的子串数量。我们先尽量让$a[i][j]$的数都不大于$1$,$a[i][j]$小于1时是不会增加开销的。因为ij这样的字串只有一个，那就找不到$s_{i + 1}s_{j + 1} = s_is_j$ ,当数组$a$都加满了那就只能重复增加开销了，我们不断的找$a$中最小$a[i][k]$的增加$1$并把字符k加到构造的串中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">57</span>][<span class="number">57</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, k, poc = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">char</span> last = <span class="string">&#x27;a&#x27;</span> + k - <span class="number">1</span>;</span><br><span class="line">    ans = last;</span><br><span class="line">    --n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = ans[poc];</span><br><span class="line">        <span class="keyword">int</span> tmp = temp - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">bool</span> fg = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[tmp][i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[tmp][i] = <span class="number">1</span>;</span><br><span class="line">                ans += <span class="string">&#x27;a&#x27;</span> + i;</span><br><span class="line">                ++poc;</span><br><span class="line">                fg = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fg)</span><br><span class="line">        &#123;</span><br><span class="line">            ++n;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mn = <span class="number">10000000</span>;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> local = ans[poc] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (mn &gt; a[local][i]) &#123;</span><br><span class="line">                    mn = a[local][i];</span><br><span class="line">                    tmp = i;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">            ans += <span class="string">&#x27;a&#x27;</span> + tmp;</span><br><span class="line">            ++a[local][tmp];</span><br><span class="line">            ++poc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2021 年 4 月 13日</p><p><img src="/.com//../../../img/Educational-Codeforces-Round-107-Rated-for-Div-2-%E9%A2%98%E8%A7%A3/top.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforce </tag>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串KMP(快速模式匹配）</title>
      <link href="2021/03/17/%E5%AD%97%E7%AC%A6%E4%B8%B2KMP-%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%EF%BC%89/"/>
      <url>2021/03/17/%E5%AD%97%E7%AC%A6%E4%B8%B2KMP-%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP-算法（Knuth-Morris-Pratt-）"><a href="#KMP-算法（Knuth-Morris-Pratt-）" class="headerlink" title="KMP 算法（Knuth-Morris-Pratt ）"></a>KMP 算法（Knuth-Morris-Pratt ）</h1><p>KMP 算法是一个著名的字符串匹配算法，效率很高。我们普通的暴力算法时间复杂度能到$O_(n * m)$,虽然在一般情况下已经够用但还是有很多情况下过不了题。所以我们需要用到更高效的算法。</p><h1 id="暴力的不足"><a href="#暴力的不足" class="headerlink" title="暴力的不足"></a>暴力的不足</h1><p>我们先看看普通暴力模式下的不足</p><p><img src="/.com//../../../img/%E5%AD%97%E7%AC%A6%E4%B8%B2KMP%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/0.jpg"></p><p>当我们在$S$串中寻找$T$时普通的表里是我们从第一位开始依次匹配当匹配到第四位时发现不同</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Next[<span class="number">1007</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="built_in">string</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;t.length() - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || t[i] == t[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(t[i] != t[j])</span><br><span class="line">            &#123;</span><br><span class="line">                Next[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Next[i] = Next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j = Next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetNext(t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != t[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j = Next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == t.length())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i - t.length() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s,t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; kmp(s, t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Next[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//../../../img/%E5%AD%97%E7%AC%A6%E4%B8%B2KMP%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/86916117_p0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瓷砖样式(DFS)</title>
      <link href="2021/03/14/%E7%93%B7%E7%A0%96%E6%A0%B7%E5%BC%8F-DFS/"/>
      <url>2021/03/14/%E7%93%B7%E7%A0%96%E6%A0%B7%E5%BC%8F-DFS/</url>
      
        <content type="html"><![CDATA[<p>今天学弟问了一道题觉得挺有意思的就写一篇博客(这个学弟比我厉害)。题目如下：</p><p><img src="/.com//../../../img/%E7%93%B7%E7%A0%96%E6%A0%B7%E5%BC%8F-DFS/1.png"></p><p>题目不是很难就是一个DFS加set去重。</p><p>解题思路：用一个二维数组代表地板，一块块瓷砖去铺记录所有符合的情况后存入set容器去重后输出个数。</p><ul><li><code>0</code> ：表示当前方块没涂颜色。</li><li><code>1</code> ：表示当前方块涂了黄色。</li><li><code>2</code> ：表示当前方块涂了红色。</li></ul><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>][<span class="number">101</span>],tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !((a[x][y]==a[x<span class="number">-1</span>][y]&amp;&amp;a[x][y]==a[x][y<span class="number">-1</span>]&amp;&amp;a[x][y]==a[x<span class="number">-1</span>][y<span class="number">-1</span>]) ||</span><br><span class="line">             (a[x][y]==a[x<span class="number">-1</span>][y]&amp;&amp;a[x][y]==a[x][y+<span class="number">1</span>]&amp;&amp;a[x][y]==a[x<span class="number">-1</span>][y+<span class="number">1</span>]) ||</span><br><span class="line">             (a[x][y]==a[x+<span class="number">1</span>][y]&amp;&amp;a[x][y]==a[x][y<span class="number">-1</span>]&amp;&amp;a[x][y]==a[x+<span class="number">1</span>][y<span class="number">-1</span>]) ||</span><br><span class="line">             (a[x][y]==a[x+<span class="number">1</span>][y]&amp;&amp;a[x][y]==a[x][y+<span class="number">1</span>]&amp;&amp;a[x][y]==a[x+<span class="number">1</span>][y+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tot==<span class="number">30</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp += <span class="string">&#x27;0&#x27;</span> + a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.insert(temp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y&gt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dfs(x+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y]==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=<span class="number">3</span> &amp;&amp; y+<span class="number">1</span>&lt;=<span class="number">10</span> &amp;&amp; a[x][y+<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x][y] = i;</span><br><span class="line">                a[x][y + <span class="number">1</span>] = i;</span><br><span class="line">                tot += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(pan(x, y) &amp;&amp; pan(x, y + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    dfs(x, y + <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                tot -= <span class="number">2</span>;</span><br><span class="line">                a[x][y] = <span class="number">0</span>;</span><br><span class="line">                a[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x+<span class="number">1</span>&lt;=<span class="number">3</span>&amp;&amp;y&lt;=<span class="number">10</span>&amp;&amp;a[x+<span class="number">1</span>][y]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x][y] = i;</span><br><span class="line">                a[x + <span class="number">1</span>][y] = i;</span><br><span class="line">                tot += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(pan(x, y) &amp;&amp; pan(x + <span class="number">1</span>, y))</span><br><span class="line">                &#123;</span><br><span class="line">                    dfs(x, y + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                tot -= <span class="number">2</span>;</span><br><span class="line">                a[x][y] = <span class="number">0</span>;</span><br><span class="line">                a[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dfs(x, y + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没错的话答案应该是<code>101466</code>。</p><p><img src="/.com//../../../img/%E7%93%B7%E7%A0%96%E6%A0%B7%E5%BC%8F-DFS/2.jpg"></p><p>这是第八届蓝桥杯决赛的填空题，突然就想起一个月后就是蓝桥杯了，这几天比较迷茫要做的事情比较多，web前端目前只学了HTML和CSS甚至没学全。好像五月份还有计算机设计大赛，蓝桥杯那边又不甘心放弃，我好像什么都做不到。我这个人就是这样如果事情多的应付不过来就会想着逃避哪怕一会也好，所以今天跟室友去看电影摸了一天。嘛，明天的事明天再说。</p><p>逃避虽然可耻，但非常有用。</p><p>2021 年 3 月 14日</p><p><img src="/.com//../../../img/%E7%93%B7%E7%A0%96%E6%A0%B7%E5%BC%8F-DFS/84907990_p0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式前向星</title>
      <link href="2021/03/11/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/"/>
      <url>2021/03/11/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><img src="/.com//../../../img/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/1.jpg"></p><p>我们学过可以用邻接矩阵来存图$G[i][j] = 1$表示从$i$ 到$j$存在一条边，但是当我们图的点比较多时邻接矩阵就非常占内存了$(n^2)$。</p><p>于是我们想到了用$vector$代替这样可以有效帮助我们减小体积(不存在的边不占内存)，但是$vector$的速度是比较慢的有人试过遍历所需的时间为普通数组的十倍。(我没验证过，大家有兴趣可以试试)</p><p>所以，我们需要一种既能拥有小内存速度又比较快的存图方式——链式前向星。</p><p>我们存储的是边集而非节点。用一个数组记录$G[i]$第$i$条边.用$head[i]$记录第$i$个节点在边数组$G$中的下标。这样我们就存储了我们需要的边并且能快速的找的相应的边与点。其具体代码实现与DFS和BFS如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">edge G[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G[cnt].w = w;</span><br><span class="line">    G[cnt].to = v;</span><br><span class="line">    G[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> d[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i != <span class="number">0</span>; i = G[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[G[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(G[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bf;</span><br><span class="line">    bf.push(u);</span><br><span class="line">    b[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!bf.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = bf.front();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        bf.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[temp]; i != <span class="number">0</span>; i = G[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!b[G[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                bf.push(G[i].to);</span><br><span class="line">                b[G[i].to] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,u,v,w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    bfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小记：</p><p>都快忘了我还有个博客了，现在想起还是写一写吧。已经大二下了，学长们都有大厂offer了很快就要离开学校了挺伤感的。之后可能要自己一个人搞了，可是我到头来发现自己好像还是和以前一样，什么都不会跟个傻逼一样。</p><p>2021 年 3 月 11 日</p><p><img src="/.com//../../../img/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/1605242533691.jpg" alt="银狼的黎明"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021东华理工大学ACM集训队选拔赛</title>
      <link href="2021/01/23/2021%E4%B8%9C%E5%8D%8E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6ACM%E9%9B%86%E8%AE%AD%E9%98%9F%E9%80%89%E6%8B%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
      <url>2021/01/23/2021%E4%B8%9C%E5%8D%8E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6ACM%E9%9B%86%E8%AE%AD%E9%98%9F%E9%80%89%E6%8B%94%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="2021东华理工大学ACM集训队选拔赛"><a href="#2021东华理工大学ACM集训队选拔赛" class="headerlink" title="2021东华理工大学ACM集训队选拔赛"></a>2021东华理工大学ACM集训队选拔赛</h1><p>最近时间比较紧为数学建模也没刷过题了，所以就只出了一个签到A，其余的都是学长出的,非常感谢学长的帮忙。</p><h2 id="A-排-序"><a href="#A-排-序" class="headerlink" title="A - 排 序"></a><a href="https://www.luogu.com.cn/problem/T164715?contestId=40141">A - 排 序</a></h2><p><img src="https://s3.ax1x.com/2021/01/23/s7uyfs.jpg" alt="A"></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>题目让我们将数组排序，观察到数据范围$1 &lt; n &lt; 10^{7}$ ，而传统排序的复杂度最快不过是$O(nlog(n))$ ，显然在$10^7$的数据范围下会$TLE$。</p><p>但是我们发现$0 &lt; a_{i} &lt; 10^{5} $ ，那么可以通过桶将复杂度降低到$O(n)$，这样我们就能顺利通过这一题。</p><p>（这题是我之前自己想出的一个对整数排序的方式比较有意思。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x,m[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x; m[x]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">100000</span> ; i++)&#123;</span><br><span class="line">    <span class="keyword">while</span> (m[i]--) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-幻-梦"><a href="#B-幻-梦" class="headerlink" title="B - 幻 梦"></a><a href="https://www.luogu.com.cn/problem/T163905?contestId=40141">B - 幻 梦</a></h2><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>容易发现只要让小于$0$的数从后往前在他原来的位置上删除，</p><p>大于$0$的数都放到最后在第一个位置上删除，就能得到最小的代价。</p><p>注意数据范围，要开$long\ long$ </p><p><img src="https://s3.ax1x.com/2021/01/23/s7MSbT.jpg" alt="B"></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  ll ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) ans += x * i;</span><br><span class="line">    <span class="keyword">else</span> ans += x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-树-枝"><a href="#C-树-枝" class="headerlink" title="C - 树 枝"></a><a href="https://www.luogu.com.cn/problem/T164568?contestId=40141">C - 树 枝</a></h2><p><img src="https://s3.ax1x.com/2021/01/23/s7QBTO.jpg" alt="C"></p><h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3><p>在每个位置有两个可能的取值$a_{i}$或者$a_{i} + 1$，所以我们考虑每个位置维护两个状态$dp$，</p><p>用$dp[i][0]$表示当前位置取$a_{i}$，$dp[i][1]$表示当前位置取$a_{i} + 1$，那么我们每次只要关心前后两位在加一或不加的状态下会不会冲突就行了，不冲突我们就能递推了，具体转移方程如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a[i] != a[i - <span class="number">1</span>]) dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (a[i] != (a[i - <span class="number">1</span>] + <span class="number">1</span>)) dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> ((a[i] + <span class="number">1</span>) != a[i - <span class="number">1</span>]) dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + b[i]);</span><br><span class="line"><span class="keyword">if</span> ((a[i] + <span class="number">1</span>) != (a[i - <span class="number">1</span>] + <span class="number">1</span>)) dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + b[i]);</span><br></pre></td></tr></table></figure><h3 id="参考代码：-1"><a href="#参考代码：-1" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn];</span><br><span class="line">ll dp[maxn][<span class="number">2</span>]; <span class="comment">// 0 不+1, 1 加一;</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">    dp[i][<span class="number">0</span>] = dp[i][<span class="number">1</span>] = INF;</span><br><span class="line">  &#125;</span><br><span class="line">  dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; dp[<span class="number">1</span>][<span class="number">1</span>] = b[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] != a[i - <span class="number">1</span>]) dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (a[i] != (a[i - <span class="number">1</span>] + <span class="number">1</span>)) dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ((a[i] + <span class="number">1</span>) != a[i - <span class="number">1</span>]) dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + b[i]);</span><br><span class="line">    <span class="keyword">if</span> ((a[i] + <span class="number">1</span>) != (a[i - <span class="number">1</span>] + <span class="number">1</span>)) dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + b[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = min(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-皇-后"><a href="#D-皇-后" class="headerlink" title="D - 皇 后"></a><a href="https://www.luogu.com.cn/problem/T164562?contestId=40141">D - 皇 后</a></h2><p><img src="https://s3.ax1x.com/2021/01/23/s7lljI.jpg" alt="D"></p><h3 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h3><p>一道比较经典的威佐夫博弈，没有了解过的同学可以去百度看一下。</p><p>实际上在这题中向正西移动等价于取第一堆石子，向正南移动等价于取第二堆石子，向西南移动等价于两堆同时取相同数目的石子。</p><p>所以这题完全的转换为了威佐夫博弈的模型。</p><h3 id="参考代码：-2"><a href="#参考代码：-2" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) swap(a, b);</span><br><span class="line">    <span class="keyword">int</span> c = (<span class="built_in">sqrt</span>(<span class="number">5</span>) + <span class="number">1.0</span>) / <span class="number">2.0</span> * (b - a);</span><br><span class="line">    <span class="keyword">if</span> (c == a) <span class="built_in">puts</span>(<span class="string">&quot;Xiao Niu&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Xiao Gou&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-绽-放"><a href="#E-绽-放" class="headerlink" title="E - 绽 放"></a><a href="https://www.luogu.com.cn/problem/T164803?contestId=40141">E - 绽 放</a></h2><p><img src="https://s3.ax1x.com/2021/01/23/s7ltUS.jpg" alt="E"></p><h3 id="解题思路：-4"><a href="#解题思路：-4" class="headerlink" title="解题思路："></a>解题思路：</h3><p>优先队列模拟，对于小B的选择，我们直接使用优先队列维护小B的选择队列，每次解决队顶的问题;</p><p>而对于小A的选择，我们可以通过一个指针每次向后试探到第一个还未被解决的问题的位置；</p><p>注意到我们要用一个数组记录一下每道题的被解决与否，防止双方重复选择。</p><h3 id="参考代码：-3"><a href="#参考代码：-3" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> q,op,x;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]; <span class="comment">// 记录每道题是否被解决;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;no) <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (x == no.x) <span class="keyword">return</span> y &gt; no.y;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> x &lt; no.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">  <span class="built_in">priority_queue</span>&lt;Node&gt; que;</span><br><span class="line">  <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">1</span>, l = <span class="number">1</span>; <span class="comment">// cnt为目前读到的题目的最大编号+1,l记录小A的选择指针的当前位置;</span></span><br><span class="line">  <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">      que.push(&#123;x, cnt++&#125;); <span class="comment">// 读了一道题;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (vis[l] &amp;&amp; l &lt; cnt) l++; <span class="comment">// 小A找到第一个还未解决的题目;</span></span><br><span class="line">      vis[l] = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> tp;</span><br><span class="line">      <span class="keyword">while</span> (!que.empty()) &#123; <span class="comment">// 小B按照优先队列的顺序找到一个还未解决的题目;</span></span><br><span class="line">        tp = que.top().y;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (!vis[tp]) <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vis[tp] = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; tp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-白-雪"><a href="#F-白-雪" class="headerlink" title="F - 白 雪"></a><a href="https://www.luogu.com.cn/problem/T164557">F - 白 雪</a></h2><p><img src="https://s3.ax1x.com/2021/01/23/s7l6ET.jpg" alt="F"></p><h3 id="解题思路：-5"><a href="#解题思路：-5" class="headerlink" title="解题思路："></a>解题思路：</h3><h3 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h3><p>这题在设计之初是考虑为一道比较基础的数位$dp$，因此我没有多想的将一个数位$dp$的原题从被$7$整除改为了被$9$整除。</p><p>但是其实根据能被$9$整除的数它的数位之和也能被$9$整除这个性质，</p><p>那么这道题实际上就是找$[l,r]$范围里能被$9$整除的数的数目，所以简单的做一个前缀和就好了。</p><h4 id="参考代码：-4"><a href="#参考代码：-4" class="headerlink" title="参考代码："></a>参考代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span></span>&#123; <span class="keyword">return</span> x / <span class="number">9</span>; &#125;</span><br><span class="line">ll l,r;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    ll ans = calc(r) - calc(l - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><p>同时这里放上数位$dp$的写法，供大家学习简单的数位$dp$。</p><p>数位$dp$一般分为几个步骤：</p><p>首先将数字做拆位,进入记忆化搜索过程,</p><p>和一般的搜索不同,数位$dp$,通常是从高位先开始尝试,</p><p>而且是在高位尝试了并且未选择该位的极限数字时,该位之后的数位才没有限制了可以在$0-9$之间任意设置,</p><p>而也只有这一部分的结果,我们可以使用记忆化的方式进行优化。</p><p>我们再来分析这道题,明显我们只要维护各个数位之和,和数字大小的和是不是都能被$9$整除,</p><p>所以我们在$dp$中使用两个维度维护这两个值模$9$的结果,然后套用数位$dp$的基本模板,维护这两个变量就行了。</p><h4 id="参考代码：-5"><a href="#参考代码：-5" class="headerlink" title="参考代码："></a>参考代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line">ll a[<span class="number">20</span>];</span><br><span class="line">ll memo[<span class="number">20</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">ll n,m;</span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> now,<span class="keyword">int</span> sum,<span class="keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pos == <span class="number">0</span>) <span class="keyword">return</span> now % <span class="number">9</span> == <span class="number">0</span> &amp;&amp; sum % <span class="number">9</span> == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (flag &amp;&amp; memo[pos][now][sum] != <span class="number">-1</span>) <span class="keyword">return</span> memo[pos][now][sum];</span><br><span class="line">  <span class="keyword">int</span> cnt = flag ? <span class="number">9</span> : a[pos];</span><br><span class="line">  ll ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">    ans += dp(pos - <span class="number">1</span>, (now * <span class="number">10</span> % <span class="number">9</span> + i) % <span class="number">9</span>, (sum + i) % <span class="number">9</span>, flag || i &lt; cnt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (flag) memo[pos][now][sum] = ans;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123;</span><br><span class="line">    a[++pos] = x % <span class="number">10</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp(pos, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="built_in">memset</span>(memo,<span class="number">-1</span>,<span class="keyword">sizeof</span>(memo));</span><br><span class="line">  <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll ans = calc(m) - calc(n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-拂-晓"><a href="#G-拂-晓" class="headerlink" title="G - 拂 晓"></a><a href="https://www.luogu.com.cn/problem/T164827?contestId=40141">G - 拂 晓</a></h2><p><img src="https://s3.ax1x.com/2021/01/23/s7lHUO.jpg" alt="G"></p><h3 id="解题思路：-6"><a href="#解题思路：-6" class="headerlink" title="解题思路："></a>解题思路：</h3><p>其实是比较简单的一个图论，有两个解法。</p><h3 id="解法一：-1"><a href="#解法一：-1" class="headerlink" title="解法一："></a>解法一：</h3><p>我们看到最小化最大值，其实很容易想到二分，那么每次二分小A自身的被黑暗侵蚀程度，</p><p>然后在道路最大被黑暗侵蚀程度确定的情况下去跑$dfs$判断从$s$点出发是否能到达$t$就行了。</p><h4 id="参考代码：-6"><a href="#参考代码：-6" class="headerlink" title="参考代码："></a>参考代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to,w; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[u]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (it.w &gt; now || vis[it.to]) <span class="keyword">continue</span>;</span><br><span class="line">    dfs(it.to, now);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(vis, <span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">  dfs(s, mid);</span><br><span class="line">  <span class="keyword">return</span> vis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">    G[u].push_back(&#123;v,w&#125;);</span><br><span class="line">    G[v].push_back(&#123;u,w&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">1</span>,r = INF,ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid)) ans = mid,r = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二：-1"><a href="#解法二：-1" class="headerlink" title="解法二："></a>解法二：</h3><p>我们将边排序，然后从小到大用并查集维护连边，直到$s$和$t$联通，</p><p>那么这时之前道路的最大被黑暗侵蚀程度，实际上就是小A自身被黑暗侵蚀程度的最小值。</p><h4 id="参考代码：-7"><a href="#参考代码：-7" class="headerlink" title="参考代码："></a>参考代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;no) <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> w &lt; no.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edge;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,par[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> par[x] == x ? x : par[x] = find(par[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IO;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) par[i] = i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">    edge.push_back(&#123;u, v, w&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(edge.begin(), edge.end());</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> it : edge) &#123;</span><br><span class="line">    <span class="keyword">if</span> (find(s) == find(t)) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">int</span> u = it.u, v = it.v;</span><br><span class="line">    <span class="keyword">int</span> x = find(u), y = find(v);</span><br><span class="line">    <span class="keyword">if</span> (x != y) par[x] = y;</span><br><span class="line">    ans = it.w;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2021 年 1 月 23 日</p><p><img src="https://s3.ax1x.com/2020/11/14/D9gcIU.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC2020济南打铁</title>
      <link href="2021/01/12/ICPC2020%E6%B5%8E%E5%8D%97%E6%89%93%E9%93%81/"/>
      <url>2021/01/12/ICPC2020%E6%B5%8E%E5%8D%97%E6%89%93%E9%93%81/</url>
      
        <content type="html"><![CDATA[<p>4题打铁了很难受,所以一直没有写题解,明天考完数据库就回家了有点慌想想还是写完算了.</p><h2 id="Stone-Game"><a href="#Stone-Game" class="headerlink" title=" Stone Game"></a><strong><a href="https://ac.nowcoder.com/acm/contest/10662/C"> Stone Game</a></strong></h2><p>尽量把$a_{1}$,$a_{2}$都合并成$a_{3}$就行,多出来的可以分一半出来和自己合并最后合并成$a_{3}$.最后剩余的单独计算</p><p><img src="https://s3.ax1x.com/2021/01/12/sYkngO.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a1, a2, a3;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; a3;</span><br><span class="line">    <span class="keyword">if</span> (a1 &gt;= a2) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">2</span> * a2 + (((a1 - a2)/<span class="number">3</span>)*<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> ((a1 - a2) % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">2</span> * a1 + (((a2 - a1)/<span class="number">3</span>)*<span class="number">3</span>) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ((a2 - a1) % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            ans += <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fight-against-involution"><a href="#Fight-against-involution" class="headerlink" title=" Fight against involution"></a><strong><a href="https://ac.nowcoder.com/acm/contest/10662/D"> Fight against involution</a></strong></h2><p>这题开始题意就读错了只要每个人排名不下降就行,优先考虑字数.</p><p><img src="https://s3.ax1x.com/2021/01/12/sYklbd.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> second;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> first;</span><br><span class="line">    <span class="keyword">int</span> No;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">student stu[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(student a, student b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.second == b.second) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; stu[i].first;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; stu[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu, stu + n, cmp);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp_mn = stu[<span class="number">0</span>].first;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp_mx = stu[<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stu[i].second == temp_mx) &#123;</span><br><span class="line">            ans += temp_mn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp_mx = stu[i].second;</span><br><span class="line">            temp_mn = max(temp_mn, stu[i].first);</span><br><span class="line">            ans += temp_mn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Xor-Transformation"><a href="#Xor-Transformation" class="headerlink" title=" Xor Transformation"></a><strong><a href="https://ac.nowcoder.com/acm/contest/10662/G"> Xor Transformation</a></strong></h2><p>这题很难受,我只会一些位运算概念性的东西,具体操作我还没搞过,问了下队友发现都不会,最后自己找规律验算了多组数据才发现就两种情况.之后要多训练位运算的题目.</p><p><img src="https://s3.ax1x.com/2021/01/12/sYkYPP.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp = x ^ y;</span><br><span class="line">    <span class="keyword">if</span> (temp &lt; x) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;1&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cook-Pancakes"><a href="#Cook-Pancakes" class="headerlink" title=" Cook Pancakes!"></a><strong><a href="https://ac.nowcoder.com/acm/contest/10662/M"> Cook Pancakes!</a></strong></h2><p>小学二年级的数学题,$n$个煎饼$2n$个面,一个锅同时$k$个面,除一下最后特判下就行.</p><p><img src="https://s3.ax1x.com/2021/01/12/sYkDVs.png" alt="CookPancakes"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = x ^ y;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; x) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;1&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很难受,写的慢$wa$的还多.之后加油吧.</p><p>2020 年 1 月 12 日</p><p><img src="https://s3.ax1x.com/2021/01/12/sYE90J.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020第三届传智杯初赛</title>
      <link href="2020/12/22/2020%E7%AC%AC%E4%B8%89%E5%B1%8A%E4%BC%A0%E6%99%BA%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
      <url>2020/12/22/2020%E7%AC%AC%E4%B8%89%E5%B1%8A%E4%BC%A0%E6%99%BA%E6%9D%AF%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>​    第一次参加传智杯,上一届传智杯4月份的时候我还没接触ACM,还要等到暑假7月份的时候奕涵学长才把我拉进ACM的坑.非常感谢学长^-^.然后上一届传智杯的题做了,没写完(最后一道还没)就上的战场.</p><h1 id="A-课程报名"><a href="#A-课程报名" class="headerlink" title="A - 课程报名"></a><strong>A - 课程报名</strong></h1><p><a href="https://www.luogu.com.cn/problem/T160507?contestId=38442">题目链接</a></p><p><img src="https://s3.ax1x.com/2020/12/22/rsMc1H.png" alt="image-20201222213350780"></p><p>签到题,模拟就完事.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 219768661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> u, n, m, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; u &gt;&gt; m &gt;&gt; a;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (num + m &lt; n) &#123;</span><br><span class="line">ans += m * u;</span><br><span class="line">num += m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans += (n - num) * u;</span><br><span class="line">num += (n - num);</span><br><span class="line">&#125;</span><br><span class="line">u += a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-期末考试成绩"><a href="#B-期末考试成绩" class="headerlink" title="B - 期末考试成绩"></a><strong>B - 期末考试成绩</strong></h1><p><a href="https://www.luogu.com.cn/problem/T160508?contestId=38442">题目链接</a></p><p><img src="https://s3.ax1x.com/2020/12/22/rsMfBt.png" alt="image-20201222213752592"></p><p>签到题,写几个判断就完了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 219768661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">90</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4.0&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt;= <span class="number">60</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">4.0</span>;</span><br><span class="line">ans = <span class="number">4.0</span> - <span class="number">0.1</span> * (<span class="number">90</span> - n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1f&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">n = (<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(n) * <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">90</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4.0&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= <span class="number">60</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">4.0</span>;</span><br><span class="line">ans = <span class="number">4.0</span> - <span class="number">0.1</span> * (<span class="number">90</span> - n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1f&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;0.0&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-志愿者"><a href="#C-志愿者" class="headerlink" title="C - 志愿者"></a>C - 志愿者</h1><p><a href="https://www.luogu.com.cn/problem/T160509?contestId=38442">题目链接</a></p><p><img src="https://s3.ax1x.com/2020/12/22/rsM79g.png" alt="image-20201222213934299"></p><p>签到题,class数组纯排序.(我没看范围,re了我两发T-T)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 219768661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line">node stu[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.sum == b.sum) &#123;</span><br><span class="line"><span class="keyword">if</span> (a.t == b.t) &#123;</span><br><span class="line"><span class="keyword">return</span> a.n &lt; b.n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.t &gt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.sum &gt; b.sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"></span><br><span class="line">stu[i].t = read();</span><br><span class="line">stu[i].v = read();</span><br><span class="line">stu[i].n = i;</span><br><span class="line">stu[i].sum = stu[i].t * stu[i].v;</span><br><span class="line">&#125;</span><br><span class="line">sort(stu + <span class="number">1</span>, stu + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; stu[i].n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-终端"><a href="#D-终端" class="headerlink" title="D - 终端"></a>D - 终端</h1><p><a href="https://www.luogu.com.cn/problem/T160510?contestId=38442">题目链接</a></p><p><img src="https://s3.ax1x.com/2020/12/22/rsMqjs.png" alt="image-20201222214154424"></p><p>这题好多人说数据有问题’ls’指令错判,我也不知道怎么回事,可能我运气好没出错,不过这题也不难.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 219768661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">bool</span> q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;String&gt; M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">string</span> temp,fname;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="string">&quot;ls&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it : M)&#123;</span><br><span class="line"><span class="keyword">if</span> (it.q) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it.s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp == <span class="string">&quot;touch&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fname;</span><br><span class="line"><span class="keyword">bool</span> find = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (M[i].s == fname &amp;&amp; M[i].q) &#123;</span><br><span class="line">find = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!find) &#123;</span><br><span class="line">M.push_back(&#123;fname, <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (temp == <span class="string">&quot;rm&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fname;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (M[i].s == fname &amp;&amp; M[i].q) &#123;</span><br><span class="line">M[i].q = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp == <span class="string">&quot;rename&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">string</span> fname_temp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fname &gt;&gt; fname_temp;</span><br><span class="line"><span class="keyword">bool</span> findy = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> findy_ = <span class="number">0</span>,findx_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> findx = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (M[i].s == fname &amp;&amp; M[i].q) &#123;</span><br><span class="line">findx = <span class="literal">true</span>;</span><br><span class="line">findx_ = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (M[i].s == fname_temp &amp;&amp; M[i].q) &#123;</span><br><span class="line">findy = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (findx &amp;&amp; !findy) &#123;</span><br><span class="line">M[findx_].s = fname_temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-运气"><a href="#E-运气" class="headerlink" title="E - 运气"></a>E - 运气</h1><p><a href="https://www.luogu.com.cn/problem/T160513?contestId=38793">题目链接</a></p><p><img src="https://s3.ax1x.com/2020/12/22/rsMjH0.png" alt="image-20201222215015129"></p><p>这题非常厉害给了4秒运行时间…实际上我觉得</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(i % k == <span class="number">0</span>)  cnt++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">6</span>; e++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d; ans *= <span class="number">10</span>;</span><br><span class="line">ans += e;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">6</span>; e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= <span class="number">6</span>; f++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d; ans *= <span class="number">10</span>;</span><br><span class="line">ans += e; ans *= <span class="number">10</span>;</span><br><span class="line">ans += f;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">7</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">6</span>; e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= <span class="number">6</span>; f++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">1</span>; g &lt;= <span class="number">6</span>; g++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d; ans *= <span class="number">10</span>;</span><br><span class="line">ans += e; ans *= <span class="number">10</span>;</span><br><span class="line">ans += f; ans *= <span class="number">10</span>;</span><br><span class="line">ans += g;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">8</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">6</span>; e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= <span class="number">6</span>; f++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">1</span>; g &lt;= <span class="number">6</span>; g++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">1</span>; h &lt;= <span class="number">6</span>; h++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d; ans *= <span class="number">10</span>;</span><br><span class="line">ans += e; ans *= <span class="number">10</span>;</span><br><span class="line">ans += f; ans *= <span class="number">10</span>;</span><br><span class="line">ans += g; ans *= <span class="number">10</span>;</span><br><span class="line">ans += h;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">9</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">6</span>; e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= <span class="number">6</span>; f++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">1</span>; g &lt;= <span class="number">6</span>; g++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">1</span>; h &lt;= <span class="number">6</span>; h++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d; ans *= <span class="number">10</span>;</span><br><span class="line">ans += e; ans *= <span class="number">10</span>;</span><br><span class="line">ans += f; ans *= <span class="number">10</span>;</span><br><span class="line">ans += g; ans *= <span class="number">10</span>;</span><br><span class="line">ans += h; ans *= <span class="number">10</span>;</span><br><span class="line">ans += i;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">6</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">6</span>; b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">6</span>; c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">6</span>; d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">6</span>; e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= <span class="number">6</span>; f++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">1</span>; g &lt;= <span class="number">6</span>; g++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">1</span>; h &lt;= <span class="number">6</span>; h++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) &#123;</span><br><span class="line">ans = a * <span class="number">10</span>;</span><br><span class="line">ans += b; ans *= <span class="number">10</span>;</span><br><span class="line">ans += c; ans *= <span class="number">10</span>;</span><br><span class="line">ans += d; ans *= <span class="number">10</span>;</span><br><span class="line">ans += e; ans *= <span class="number">10</span>;</span><br><span class="line">ans += f; ans *= <span class="number">10</span>;</span><br><span class="line">ans += g; ans *= <span class="number">10</span>;</span><br><span class="line">ans += h; ans *= <span class="number">10</span>;</span><br><span class="line">ans += i; ans *= <span class="number">10</span>;</span><br><span class="line">ans += j;</span><br><span class="line"><span class="keyword">if</span>(ans % k == <span class="number">0</span>)  cnt++;</span><br><span class="line">cnt %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt % mod&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是知乎上的一个暴力破解(滑稽)</p><p><img src="https://s3.ax1x.com/2020/12/22/rsMDAK.png" alt="0"></p><p>（本人目前大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 12 月 22 日</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰箱主人的板子</title>
      <link href="2020/12/06/%E5%86%B0%E7%AE%B1%E4%B8%BB%E4%BA%BA%E7%9A%84%E6%9D%BF%E5%AD%90/"/>
      <url>2020/12/06/%E5%86%B0%E7%AE%B1%E4%B8%BB%E4%BA%BA%E7%9A%84%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="冰箱主人的板子"><a href="#冰箱主人的板子" class="headerlink" title="冰箱主人的板子"></a><strong>冰箱主人的板子</strong></h1><p>[TOC]</p><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="最大公约数（GCD）"><a href="#最大公约数（GCD）" class="headerlink" title="最大公约数（GCD）"></a>最大公约数（GCD）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)        <span class="comment">//如果n的当前末位为1</span></span><br><span class="line">            ans *= a;  <span class="comment">//ans乘上当前的a</span></span><br><span class="line">        a *= a;        <span class="comment">//a自乘</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;       <span class="comment">//n往右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[MAXN];<span class="comment">//第i个素数</span></span><br><span class="line"><span class="keyword">bool</span> is_pri[MAXN + <span class="number">10</span>];<span class="comment">//is_pri[i]表示i是素数</span></span><br><span class="line"><span class="comment">//返回n以内素数的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)is_pri[i] = <span class="literal">true</span>;</span><br><span class="line">    is_pri[<span class="number">0</span>] = is_pri[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_pri[i]) &#123;</span><br><span class="line">            prime[++p] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt;= n; j += i)is_pri[j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line"><span class="keyword">int</span> visit[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mem(visit,<span class="number">0</span>);</span><br><span class="line">    mem(prime, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= maxn; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; i = &quot;</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (!visit[i]) &#123;</span><br><span class="line">            prime[++prime[<span class="number">0</span>]] = i;      <span class="comment">//纪录素数， 这个prime[0] 相当于 cnt，用来计数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=prime[<span class="number">0</span>] &amp;&amp; i*prime[j] &lt;= maxn; j++) &#123;</span><br><span class="line">            visit[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大素数判断和素因子分解（miller-rabin，Pollard-rho算法）"><a href="#大素数判断和素因子分解（miller-rabin，Pollard-rho算法）" class="headerlink" title="大素数判断和素因子分解（miller-rabin，Pollard_rho算法）"></a>大素数判断和素因子分解（miller-rabin，Pollard_rho算法）</h3><p>MillerRabin()MillerRabin()算法素数判定<br>是素数返回true.(可能是伪素数，但概率极小)<br>合数返回false;</p><p>调用fidfid对nn进行素因子分解,结果存储在mm里;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pr; <span class="comment">// 最大质因子;</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123; <span class="comment">// O(1)快速乘;</span></span><br><span class="line">  <span class="keyword">return</span> (a * b - (<span class="keyword">long</span> <span class="keyword">long</span>) ((<span class="keyword">long</span> <span class="keyword">double</span>) a / p * b) * p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gmod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">      res = mul(res, a, p);</span><br><span class="line">    a = mul(a, a, p);</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123; <span class="comment">//听说二进制算法特快</span></span><br><span class="line">  <span class="keyword">if</span> (!a) <span class="keyword">return</span> b;</span><br><span class="line">  <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">int</span> t = __builtin_ctzll(a | b);</span><br><span class="line">  a &gt;&gt;= __builtin_ctzll(a);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    b &gt;&gt;= __builtin_ctzll(b);</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">      <span class="keyword">long</span> <span class="keyword">long</span> tmp = b;</span><br><span class="line">      b = a, a = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    b -= a;</span><br><span class="line">  &#125; <span class="keyword">while</span> (b);</span><br><span class="line">  <span class="keyword">return</span> a &lt;&lt; t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">46856248255981l</span>l || n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//强伪素数</span></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">3</span> || n == <span class="number">7</span> || n == <span class="number">61</span> || n == <span class="number">24251</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(n &amp; <span class="number">1</span>) || !(n % <span class="number">3</span>) || !(n % <span class="number">61</span>) || !(n % <span class="number">24251</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> m = n - <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!(m &amp; <span class="number">1</span>)) k++, m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i) &#123; <span class="comment">// 20为Miller-Rabin测试的迭代次数</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = rand() % (n - <span class="number">1</span>) + <span class="number">1</span>, x = gmod(a, m, n), y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">      y = mul(x, x, n);</span><br><span class="line">      <span class="keyword">if</span> (y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      x = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y != <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Pollard_Rho</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> n = <span class="number">0</span>, m = <span class="number">0</span>, t = <span class="number">1</span>, q = <span class="number">1</span>, c = rand() % (x - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> k = <span class="number">2</span>;; k &lt;&lt;= <span class="number">1</span>, m = n, q = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">      n = (mul(n, n, x) + c) % x;</span><br><span class="line">      q = mul(q, <span class="built_in">abs</span>(m - n), x);</span><br><span class="line">    &#125;</span><br><span class="line">    t = gcd(x, q);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fid</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (Miller_Rabin(n)) &#123;</span><br><span class="line">    pr = max(pr, n);</span><br><span class="line">    m[n]++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> p = n;</span><br><span class="line">  <span class="keyword">while</span> (p &gt;= n) p = Pollard_Rho(p);</span><br><span class="line">  fid(p);</span><br><span class="line">  fid(n / p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="exgcd求ax-by-c最小正数解"><a href="#exgcd求ax-by-c最小正数解" class="headerlink" title="exgcd求ax+by=c最小正数解:"></a>exgcd求ax+by=c最小正数解:</h3><p>设a，b是整数且gcd(a,b)=d。<br>如果d不能整除c，那么方程ax+by=c没有整数解，如果d能整除c，那么存在无穷多个整数解。<br>另外，如果(x0,y0)是方程的一个特解，那么所有的解（通解）可以表示为：<br>x=x0+(b/d)n<br>y=y0−(a/d)n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">e_gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">0</span>) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> a; &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = e_gcd(b, a % b, x, y);</span><br><span class="line">  <span class="keyword">int</span> temp = x; x = y;</span><br><span class="line">  y = temp - a / b * y;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ax+by=c的最小正数解x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="keyword">int</span> gcd = e_gcd(a, b, x, y);</span><br><span class="line">  <span class="keyword">if</span> (c % gcd != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  x *= c / gcd;</span><br><span class="line">  b /= gcd;</span><br><span class="line">  <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = -b;</span><br><span class="line">  <span class="keyword">int</span> ans = x % b;</span><br><span class="line">  <span class="keyword">if</span> (ans &lt;= <span class="number">0</span>) ans += b;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll mod)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (a * b - (ll) ((<span class="keyword">long</span> <span class="keyword">double</span>) a / mod * b) * mod + mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通快速乘"><a href="#普通快速乘" class="headerlink" title="普通快速乘"></a>普通快速乘</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll mod)</span> </span>&#123;</span><br><span class="line">  ll res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res + a) % mod;</span><br><span class="line">    a = (a + a) % mod;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解因数"><a href="#分解因数" class="headerlink" title="分解因数"></a>分解因数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">divisor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i * i &lt;= n ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">      res.push_back(i);</span><br><span class="line">      <span class="keyword">if</span>(n / i != i ) res.push_back(n / i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   质因数分解模板(预处理素数版本)</span></span><br><span class="line"><span class="comment">map分别记录每个质因子和该质因子存在个数;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">map&lt;int,int&gt; prime_factor(int n) &#123; // 质数分解到sqrt(n)就行了;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; res;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; prime[i] * prime[i] &lt;= n &amp;&amp; i &lt; num; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">      ++res[prime[i]]; n /= prime[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n != <span class="number">1</span>) res[n] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/<span class="function">a <span class="title">mod</span><span class="params">(p)</span> </span>= a^(p - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h3><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;++i) &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="链式前向星存图"><a href="#链式前向星存图" class="headerlink" title="链式前向星存图"></a>链式前向星存图</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = (<span class="keyword">int</span>)<span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//n: 顶点数 m: 边数;</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, head[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to, w;</span><br><span class="line">&#125; edge[maxn &lt;&lt; <span class="number">1</span>];<span class="comment">//无向图开最大边数的两倍;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化;</span></span><br><span class="line">  cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;<span class="comment">//加u-&gt;v的单向边;</span></span><br><span class="line">  edge[++cnt] = &#123;head[u], v, w&#125;;</span><br><span class="line">  head[u] = cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单源最短路（Dijkstra）"><a href="#单源最短路（Dijkstra）" class="headerlink" title="单源最短路（Dijkstra）"></a>单源最短路（Dijkstra）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> w,to,next;</span><br><span class="line">&#125;;</span><br><span class="line">edge G[<span class="number">10007</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">10007</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G[cnt].w = w;</span><br><span class="line">    G[cnt].to = to;</span><br><span class="line">    G[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> d[<span class="number">10007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i != <span class="number">0</span>; i = G[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[G[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(G[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">10007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(u);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[temp]; i != <span class="number">0</span>; i = G[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!b[G[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                b[G[i].to] = <span class="literal">true</span>;</span><br><span class="line">                q.push(G[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">10007</span>];</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">10007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getLoad</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(pre[u])&#123;</span><br><span class="line">        getLoad(pre[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">djstl</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">    pq.push(&#123;<span class="number">0</span>, u&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp = pq.top();</span><br><span class="line">        pq.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.second]; i != <span class="number">0</span>; i = G[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[G[i].to] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pre[G[i].to] = tmp.second;</span><br><span class="line">                dis[G[i].to] = dis[tmp.second] + G[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[G[i].to] &gt; dis[tmp.second] + G[i].w)&#123;</span><br><span class="line">                    pre[G[i].to] = tmp.second;</span><br><span class="line">                    dis[G[i].to] = dis[tmp.second] + G[i].w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.push(&#123;dis[G[i].to], G[i].to&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getLoad(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v,w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    bfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    djstl(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多源最短路（Floyd）"><a href="#多源最短路（Floyd）" class="headerlink" title="多源最短路（Floyd）"></a>多源最短路（Floyd）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///多源多汇最短路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> scr, <span class="keyword">int</span> des)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= nodenum; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodenum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nodenum; j++) &#123;</span><br><span class="line">                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp[scr][des];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spaf"><a href="#spaf" class="headerlink" title="spaf"></a>spaf</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;               <span class="comment">//点数 &amp;&amp; 边数</span></span><br><span class="line"><span class="keyword">int</span> h[N], nex[N], v[N], w[N], idx;      <span class="comment">//链式前向星存图</span></span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">int</span> pre[N];</span><br><span class="line"><span class="keyword">int</span> sta, ed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    v[idx] = b;</span><br><span class="line">    nex[idx] = h[a];</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> que[N];</span><br><span class="line"><span class="keyword">bool</span> inQue[N];              <span class="comment">//标记vertex是否已经进入队列，防止队列重复进队</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getLoad</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u != sta) &#123;</span><br><span class="line">        getLoad(pre[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[st] = <span class="number">0</span>;</span><br><span class="line">    que[<span class="number">0</span>] = st;</span><br><span class="line">    inQue[st] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = que[hh++];</span><br><span class="line">        inQue[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">-1</span>; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = v[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                pre[j] = t;</span><br><span class="line">                <span class="keyword">if</span> (!inQue[j]) &#123;</span><br><span class="line">                    que[++tt] = j;</span><br><span class="line">                    inQue[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getLoad(ed);</span><br><span class="line">    <span class="keyword">return</span> dist[ed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    n = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">25</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">25</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">25</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">24</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">24</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">24</span>, <span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">25</span>, <span class="number">24</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">5</span>, <span class="number">24</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">24</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">24</span>, <span class="number">26</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">26</span>, <span class="number">24</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">24</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">6</span>, <span class="number">24</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">24</span>, <span class="number">23</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">23</span>, <span class="number">24</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">23</span>, <span class="number">26</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">26</span>, <span class="number">23</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">25</span>, <span class="number">26</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">26</span>, <span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">6</span>, <span class="number">23</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">23</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">22</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">22</span>, <span class="number">23</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">23</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">23</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">21</span>, <span class="number">23</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">21</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">22</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">26</span>, <span class="number">27</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">27</span>, <span class="number">26</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">21</span>, <span class="number">27</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">27</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">8</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">22</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">9</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">22</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">9</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">21</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">17</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">21</span>, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">21</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">20</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">9</span>, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">19</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">20</span>, <span class="number">19</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">18</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">20</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">17</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">18</span>, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">17</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">16</span>, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">18</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">16</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">9</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">16</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">9</span>, <span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">15</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">10</span>, <span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">15</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">16</span>, <span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">15</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">10</span>, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">11</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">10</span>, <span class="number">13</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">13</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">14</span>, <span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">15</span>, <span class="number">14</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">14</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">16</span>, <span class="number">14</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">11</span>, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">12</span>, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">13</span>, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">12</span>, <span class="number">13</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">12</span>, <span class="number">14</span>, <span class="number">1</span>);</span><br><span class="line">    add(<span class="number">14</span>, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sta = <span class="number">15</span>;</span><br><span class="line">    ed = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = spfa(sta);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0x3f3f3f3f</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; dist[ed] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第K短路"><a href="#第K短路" class="headerlink" title="第K短路"></a>第K短路</h3><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h3 id="曼哈顿最小生成树"><a href="#曼哈顿最小生成树" class="headerlink" title="曼哈顿最小生成树"></a>曼哈顿最小生成树</h3><h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; Tree[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ans, ansnum;<span class="comment">// ans 树的重心， ansnum 重心最大子树结点数</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Tree[u].size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Tree[u][i] == pre)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(Tree[u][i], u);</span><br><span class="line">        dp[u] += dp[Tree[u][i]];</span><br><span class="line">        m = max(m, dp[Tree[u][i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    m = max(m, n - dp[u]);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; ansnum)</span><br><span class="line">    &#123;</span><br><span class="line">        ansnum = m;</span><br><span class="line">        ans = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m == ansnum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; u) ans = u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="KMP算法及拓展"><a href="#KMP算法及拓展" class="headerlink" title="KMP算法及拓展"></a>KMP算法及拓展</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> KMP &#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = pattern.length();</span><br><span class="line">    next.resize(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = next[<span class="number">0</span>] = <span class="number">-1</span>; i &lt; n; next[++i] = ++j) &#123;</span><br><span class="line">      <span class="keyword">while</span> (~j &amp;&amp; pattern[j] != pattern[i]) j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">match</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;pattern, <span class="keyword">const</span> <span class="built_in">string</span> &amp;text)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> n = pattern.length(), m = text.length();</span><br><span class="line">    build(pattern);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text[i] != pattern[j]) j = next[j];</span><br><span class="line">      <span class="keyword">if</span> (text[i] == pattern[j]) ++j;</span><br><span class="line">      <span class="keyword">if</span> (j == n) res.push_back(i - n + <span class="number">1</span>), j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><h3 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h3><h3 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h3><h3 id="字符串HASH"><a href="#字符串HASH" class="headerlink" title="字符串HASH"></a>字符串HASH</h3><h3 id="最长有序子序列"><a href="#最长有序子序列" class="headerlink" title="最长有序子序列"></a>最长有序子序列</h3><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h3 id="最长公共递增子序列"><a href="#最长公共递增子序列" class="headerlink" title="最长公共递增子序列"></a>最长公共递增子序列</h3><h2 id="数据结构（其它）"><a href="#数据结构（其它）" class="headerlink" title="数据结构（其它）"></a>数据结构（其它）</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> t[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123; <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">int</span> res = <span class="number">0</span>; <span class="keyword">while</span>(x)&#123; res += t[x]; x -= lowbit(x); &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123; <span class="keyword">while</span>(x &lt; maxn)&#123; t[x] += v; x += lowbit(x); &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(x) x&lt;&lt;1    <span class="comment">//左儿子 x*2</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(x) x&lt;&lt;1|1 <span class="comment">//右儿子  x*2+1</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, num[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod;                     <span class="comment">//膜数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, add, mul,mn,mx;</span><br><span class="line">&#125; tree[maxn &lt;&lt; <span class="number">2</span>];<span class="comment">//注意开long long 和四倍空间</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">    tree[p].sum = (tree[L(p)].sum + tree[R(p)].sum) % mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tree[p].mul != <span class="number">1</span>) &#123;</span><br><span class="line">        tree[L(p)].mul = (tree[L(p)].mul * tree[p].mul) % mod;</span><br><span class="line">        tree[R(p)].mul = (tree[R(p)].mul * tree[p].mul) % mod;</span><br><span class="line">        tree[L(p)].add = (tree[L(p)].add * tree[p].mul) % mod;</span><br><span class="line">        tree[R(p)].add = (tree[R(p)].add * tree[p].mul) % mod;</span><br><span class="line">        tree[L(p)].sum = (tree[L(p)].sum * tree[p].mul) % mod;</span><br><span class="line">        tree[R(p)].sum = (tree[R(p)].sum * tree[p].mul) % mod;</span><br><span class="line">        tree[p].mul = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[p].add) &#123;</span><br><span class="line">        tree[L(p)].add = (tree[L(p)].add + tree[p].add) % mod;</span><br><span class="line">        tree[R(p)].add = (tree[R(p)].add + tree[p].add) % mod;</span><br><span class="line">        tree[L(p)].sum = (tree[L(p)].sum + tree[p].add * (mid - tree[p].l + <span class="number">1</span>)) % mod;</span><br><span class="line">        tree[R(p)].sum = (tree[R(p)].sum + tree[p].add * (tree[p].r - mid)) % mod;<span class="comment">//tree[p].r-mid不加1</span></span><br><span class="line">        tree[p].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;<span class="comment">//建树</span></span><br><span class="line">    tree[p].l = l, tree[p].r = r, tree[p].mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p].sum = num[l];</span><br><span class="line">        tree[p].mul = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l, mid, L(p));</span><br><span class="line">    build(mid + <span class="number">1</span>, r, R(p));</span><br><span class="line">    update(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change_add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> v, <span class="keyword">long</span> <span class="keyword">long</span> p= <span class="number">1</span>)</span> </span>&#123;<span class="comment">//区间增值</span></span><br><span class="line">    <span class="keyword">if</span> (tree[p].l == l &amp;&amp; tree[p].r == r) &#123;</span><br><span class="line">        tree[p].add = (tree[p].add + v) % mod;</span><br><span class="line">        tree[p].sum = (tree[p].sum + v * (r - l + <span class="number">1</span>)) % mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(p);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) change_add(l, r, v, L(p));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) change_add(l, r, v, R(p));</span><br><span class="line">    <span class="keyword">else</span> change_add(l, mid, v, L(p)), change_add(mid + <span class="number">1</span>, r, v, R(p));</span><br><span class="line">    update(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change_multiply</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> v, <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">1</span>)</span> </span>&#123;<span class="comment">//区间乘法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree[p].l == l &amp;&amp; tree[p].r == r) &#123;</span><br><span class="line">        tree[p].mul = (tree[p].mul * v) % mod;</span><br><span class="line">        tree[p].sum = (tree[p].sum * v) % mod;</span><br><span class="line">        tree[p].add = (tree[p].add * v) % mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(p);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) change_multiply(l, r, v, L(p));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) change_multiply(l, r, v, R(p));</span><br><span class="line">    <span class="keyword">else</span> change_multiply(l, mid, v, L(p)), change_multiply(mid + <span class="number">1</span>, r, v, R(p));</span><br><span class="line">    update(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask_sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">1</span>)</span> </span>&#123;<span class="comment">//区间和</span></span><br><span class="line">    <span class="keyword">if</span> (tree[p].l == l &amp;&amp; tree[p].r == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p].sum % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(p);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> ask_sum(l, r, L(p)) % mod;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> ask_sum(l, r, R(p)) % mod;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> (ask_sum(l, mid, L(p)) % mod + ask_sum(mid + <span class="number">1</span>, r, R(p)) % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask_sum_Square</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">1</span>)</span> </span>&#123;<span class="comment">//区间平方和</span></span><br><span class="line">    <span class="keyword">if</span> (tree[p].l == tree[p].r) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p].sum * tree[p].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(p);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> ask_sum_Square(l, r, L(p));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> ask_sum_Square(l, r, R(p));</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> ask_sum_Square(l, mid, L(p)) + ask_sum_Square(mid + <span class="number">1</span>, r, R(p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> opt, l, r, v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ask_sum(<span class="number">1</span>, <span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ask_sum_Square(<span class="number">1</span>, <span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    change_add(<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ask_sum(<span class="number">1</span>, <span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ask_sum_Square(<span class="number">1</span>, <span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    change_multiply(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ask_sum(<span class="number">1</span>, <span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ask_sum_Square(<span class="number">1</span>, <span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h3><h3 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h3><h3 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h3><h3 id="带权的并查集"><a href="#带权的并查集" class="headerlink" title="带权的并查集"></a>带权的并查集</h3><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXpGmn.png"></p><p>待补充。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赫夫曼树（数据结构与算法课程设计）</title>
      <link href="2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>今天数据结构的老师发了课设，我的是第8个赫夫曼树看着挺简单就在下午数据库的实验课上带着写完了。想着赫夫曼树也算一个比较重要的知识点反正实验报告都写了干脆也就写篇博客吧。如果大家有不太会的可以发给我看看，如果有时间我就写写看。</p><p>题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8、哈夫曼编码的实现 </span><br><span class="line">哈夫曼编码也称前缀编码，它是根据每个字符出现的频率而进行编码的，要求任一字符的编码都不是其它任意字符编码的前缀且字符编码的总长度为最短。它主要应用于通信及数据的传送以及对信息的压缩处理等方面。哈夫曼编码的基础是依据字符出现的频率值而构造一棵哈夫曼树，从而实现最短的编码表示最常用的数据块或出现频率最高的数据。 </span><br><span class="line">某个信息所含的五种字符的出现次数分别为:  </span><br><span class="line">a － 16，b － 7，c － 6，d － 6，e － 5．  现要求对这五种字符进行哈夫曼编码。</span><br></pre></td></tr></table></figure><p>从题面上看就是一个简单的构造赫夫曼树的过程再对构造好的赫夫曼树的边加上权值加上一个DFS递归深度搜索求出相应的编码即可。构造赫夫曼树时我们可以用优先队列构造，因为优先队列可以让我们像下面一样决定队列中的元素的优先级。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义优先队列优先级</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(HFM* a, HFM* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-&gt;w &gt; b-&gt;w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt; HFM*, <span class="built_in">vector</span>&lt; HFM* &gt;, cmp&gt; m;</span><br></pre></td></tr></table></figure><p>当然，我们要先写好赫夫曼树的结点类或者结构体。方便构造赫夫曼树。构造方法可以单独写。我们得到赫夫曼树后就要考虑编码的问题了。其实从赫夫曼树的定义上看其实赫夫曼树编码的过程其实就是一个DFS深度搜索的过程。我们一次遍历树上的全部节点后所有字符的赫夫曼码也就出来了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line"><span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//有n个字符要放入哈夫曼树</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赫夫曼树的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">class</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//字符</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 权值</span></span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父结点</span></span><br><span class="line">node* f = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左子结点</span></span><br><span class="line">node* l = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右子结点</span></span><br><span class="line">node* r = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造方法</span></span><br><span class="line">node() &#123;    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//含参数的构造方法</span></span><br><span class="line">node(<span class="keyword">char</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">this</span>-&gt;c = x, <span class="keyword">this</span>-&gt;w = y; &#125;</span><br><span class="line"></span><br><span class="line">&#125;HFM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赫夫曼编码</span></span><br><span class="line"><span class="built_in">string</span> Code_HFM = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义优先队列优先级</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(HFM* a, HFM* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-&gt;w &gt; b-&gt;w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt; HFM*, <span class="built_in">vector</span>&lt; HFM* &gt;, cmp&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造赫夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatGfm</span><span class="params">(HFM*&amp; head)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 当队列不为空时持续构造</span></span><br><span class="line"><span class="keyword">while</span> (!m.empty()) &#123;</span><br><span class="line"><span class="comment">// 新建结点temp</span></span><br><span class="line">HFM* temp = <span class="keyword">new</span> HFM();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队列取出最小结点放入赫夫曼树</span></span><br><span class="line">temp-&gt;l = m.top();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新参数值</span></span><br><span class="line">head = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新父结点</span></span><br><span class="line">temp-&gt;l-&gt;f = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line">m.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当优先队列为空时赫夫曼树构造完毕</span></span><br><span class="line"><span class="keyword">if</span> (m.empty()) &#123;</span><br><span class="line">head = head-&gt;l;</span><br><span class="line">head-&gt;f = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当优先队列不为空时赫夫曼树还未构造完成，取出其次小结点放入赫夫曼树</span></span><br><span class="line">temp-&gt;r = m.top();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新放入结点的父结点</span></span><br><span class="line">temp-&gt;r-&gt;f = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line">m.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新temp结点的权值</span></span><br><span class="line">temp-&gt;w = temp-&gt;l-&gt;w + temp-&gt;r-&gt;w;</span><br><span class="line">temp-&gt;c = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// temp结点进队</span></span><br><span class="line">m.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input_Char</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 输入每个字符及出现频率</span></span><br><span class="line"><span class="keyword">int</span> temp_i;</span><br><span class="line"><span class="keyword">char</span> temp_c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="comment">//字符入队</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp_c &gt;&gt; temp_i;</span><br><span class="line">m.push(<span class="keyword">new</span> node(temp_c, temp_i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Coding_HFM</span><span class="params">(HFM node)</span> </span>&#123;</span><br><span class="line"><span class="comment">//当该节点为我们的字符时</span></span><br><span class="line"><span class="keyword">if</span> (node.c != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符：&quot;</span> &lt;&lt; node.c &lt;&lt; <span class="string">&quot;其赫夫曼编码为：&quot;</span> &lt;&lt; Code_HFM &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加‘0’准备递归</span></span><br><span class="line">Code_HFM.push_back(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当下一个节点不为空时递归</span></span><br><span class="line"><span class="keyword">if</span> (node.l != <span class="literal">NULL</span>) &#123;</span><br><span class="line">Coding_HFM(*node.l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回溯，去除前面加上的‘0’</span></span><br><span class="line">Code_HFM.pop_back();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加‘1’准备递归</span></span><br><span class="line">Code_HFM.push_back(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当下一个节点不为空时递归</span></span><br><span class="line"><span class="keyword">if</span> (node.r != <span class="literal">NULL</span>) &#123;</span><br><span class="line">Coding_HFM(*node.r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回溯，去除前面加上的‘0’</span></span><br><span class="line">Code_HFM.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入n个字符数</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">Input_Char(n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建赫夫曼树结点</span></span><br><span class="line">HFM* hfm = <span class="literal">NULL</span>;</span><br><span class="line">CreatGfm(hfm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码赫夫曼树</span></span><br><span class="line">Coding_HFM(*hfm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://s3.ax1x.com/2020/12/06/DXS4Zq.png"></p><p><strong>（先写这么多吧更新溜了溜了。。。。。。-(´+ω+｀|））</strong></p><p><img src="https://s3.ax1x.com/2020/12/06/DXpAOA.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 赫夫曼树 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #685 (Div. 2)</title>
      <link href="2020/11/22/Codeforces-Round-685-Div-2/"/>
      <url>2020/11/22/Codeforces-Round-685-Div-2/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Subtract-or-Divide"><a href="#A-Subtract-or-Divide" class="headerlink" title="A-Subtract or Divide"></a><a href="https://codeforces.com/contest/1451/problem/A">A-Subtract or Divide</a></h2><p><img src="/.com//../../../img/Codeforces-Round-685-Div-2/A.png" alt="A"></p><p>A的意思是给你一个数n让你用两种操作将其变为1.求出最小操作次数。</p><p><strong>操作一：</strong>用n除以其适当除数之一，就是n除以其任意一个因数。</p><p><strong>操作二：</strong>在n大于1的情况下减一。</p><p>我们可以得知n为1时输出0，n为2时输出1，n为3时输出2.之后只要n为偶数，操作数必为2，n为奇数时，先自减成偶数，则操作数必为3。对n=1,2,3特判为0,1,2即可。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Non-Substring-Subsequence"><a href="#B-Non-Substring-Subsequence" class="headerlink" title="B-Non-Substring Subsequence"></a><a href="https://codeforces.com/contest/1451/problem/B">B-Non-Substring Subsequence</a></h2><p><img src="/.com//../../../img/Codeforces-Round-685-Div-2/B.png" alt="B"></p><p>B的意思是给一个长为n的’01’字符串s进行q次查询，每次查询输入两个数L，R，代表从s下标为l到下标为r的子串。我们查询母串中是否存在长度大于2且不连续的子串，与带检测字符串相等，存在输出Yes，否则输出No。</p><p>这道题其实从给的子串向两边延伸看看子串的左边或者右边能不能找到一个和字串最左端或最右端一样的字符就好。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, q, l, r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        s = <span class="string">&#x27; &#x27;</span> + s;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="keyword">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[l]) &#123;</span><br><span class="line">                    ans = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[r]) &#123;</span><br><span class="line">                    ans = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ans)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-String-Equality"><a href="#C-String-Equality" class="headerlink" title="C-String Equality"></a><a href="https://codeforces.com/contest/1451/problem/C">C-String Equality</a></h2><p><img src="/.com//../../../img/Codeforces-Round-685-Div-2/C.png" alt="C"></p><p>C晚上没搞出来WA了3发，但是今早想了下做出来了。C是给你两个长都为n且有小写字母组成的字符串a, b，问能不能使a经过两种操作（不限次数）变成b。如果可以转换输出“Yes”否则输出“No”。</p><p><strong>操作一：</strong>任意下标i(1≤i≤n−1），ai和a(i + 1)交换。</p><p><strong>操作二：</strong>任意下标i(1≤i≤n−k+1)，如果ai,ai+1,…,ai+k−1是相等的则它们全部用下一个字符代替（比如a用b代替）。分别将字符串a，b中元素计数后，按字母序遍历。同时我们记录下a和b的字符的个数。因为a中的字符只能变大，所以在遍历的过程中a记录的字符数一定大于b记录的字符个数。否则b多出来字符没办法由a转化。同时一次只能转换k个字符，多了少了都不行。所以我们要让其相应的字符转换后留下来的个数一样。有点乱看看代码吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s1[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> s2[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">        <span class="built_in">memset</span>(s2, <span class="number">0</span>, <span class="keyword">sizeof</span>(s2));</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            ++s1[temp - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            ++s2[temp - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> suma = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sumb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            suma += s1[i];</span><br><span class="line">            sumb += s2[i];</span><br><span class="line">            <span class="keyword">if</span> (suma &lt; sumb || s1[i] % k != s2[i] % k) &#123;</span><br><span class="line">                ans = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Circle-Game"><a href="#D-Circle-Game" class="headerlink" title=" D-Circle Game"></a><a href="https://codeforces.com/contest/1451/problem/D"> D-Circle Game</a></h2><p><img src="/.com//../../../img/Codeforces-Round-685-Div-2/D.png" alt="D"></p><p>题目大意：给一个d*d的棋盘，Utkarsh和Ashish操控一个棋子，该棋子只能往上或者往右一次走k格，同时不能走出 以（0，0）为原点半径为d的范围（如上图）。问谁会赢，就是两种操作两个人反着来a让棋子往上走b就让棋子往右相当于又回到了原点但是离圆的范围却更近了。我们先两个相反操作为一步直到<strong>不能再往外走<u>两个相反操作</u></strong>。之后再试探一次看看能不能有一个操作。就能看出谁会赢。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t, k, d;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> poc = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        <span class="keyword">while</span> (d * d &gt;= poc * k * k * poc * <span class="number">2l</span>l ) &#123;</span><br><span class="line">            ++poc;</span><br><span class="line">        &#125;</span><br><span class="line">        --poc;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> temp = k * poc + k;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tempi = k * poc;</span><br><span class="line">        <span class="keyword">if</span> (d * d &lt; temp * temp + tempi * tempi)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Utkarsh\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Ashish\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（本人目前大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><h2 id="Rating蓝名"><a href="#Rating蓝名" class="headerlink" title="Rating蓝名"></a>Rating蓝名</h2><p><img src="/.com//../../../img/Codeforces-Round-685-Div-2/1427.png" alt="1427"></p><p>​    经过这一场本人也上了青名真是挺不容易的。从暑假7月开始接触算法开始学习。结果到现在才上青名，蓝名目前还没有什么想法主要是因为一些课要结课了（什么线代呀，西方经济学呀之类的）所以要留出时间来准备考试（最大的原因是自己菜）。不管怎么说这几个月虽然很菜但也还是学到点东西的，之后的路还有很长不过Rating1600我是一定要拿到蓝名的但是这可能就是寒假甚至下学期的故事了。</p><p>呐，就酱紫继续加油吧。</p><p>2020 年 11 月 20 日</p><p><img src="/.com//../../../img/Codeforces-Round-685-Div-2/top.png" alt="top"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Educational Codeforces Round 98 (Rated for Div. 2) A_B_C_D</title>
      <link href="2020/11/20/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/"/>
      <url>2020/11/20/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Robot-Program"><a href="#A-Robot-Program" class="headerlink" title="A-Robot Program"></a><a href="https://codeforces.com/contest/1452/problem/A">A-Robot Program</a></h2><p><img src="/.com//../../../img/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/A.png" alt="A"></p><p>签到题没啥说的给一个坐标(x, y),求从(0, 0)到该坐标的最小步数，但是每两次之间的方向不能一样（比如说这次向右那么下次就不能向右）。我们从原点先走到(p, p)坐标p为x和y中较小的那个。之后就走直线但是因为方向不能连着相同，所以我们中途插上向上的再回来就好。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t,x,y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        ans += <span class="number">2</span> * min(x, y);</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="built_in">abs</span>(x - y);</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="number">0</span>)</span><br><span class="line">        ans += temp * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Toy-Blocks"><a href="#B-Toy-Blocks" class="headerlink" title="B-Toy Blocks"></a><a href="https://codeforces.com/contest/1452/problem/B">B-Toy Blocks</a></h2><p><img src="/.com//../../../img/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/B.png" alt="B"></p><p>B是道思维题，大意是有n个盒子每个盒子中有若干个东西。任意将其中一个盒子的所有东西分给其他盒子（不管具体的分法）要让其余所有的盒子里的东西数量一致。当然他给的情况可能不能满足，所以要你再加一些东西给其中的盒子。输出你增加的最小东西的数量使其满足条件。比如：第一个案例[3, 2, 2].我们最小加入1个给第一个盒子于是数组变成了[4, 2, 2].在这个数组中不管把那个盒子里的东西分给别的盒子都能满足条件。</p><p>这道题有点意思，不管把哪个盒子里的东西分给另外的盒子，所有盒子里面的东西总数量是不变的只不过是从这个盒子移到那个盒子。满足条件的盒子里的总数减去当前盒子里东西的总数就是我们后来加进去的数量也就是要输出的答案。我们注意自己没加入东西时所有盒子里面的东西总数量除以盒子数量减一向上取整后和原数组里的最大值比较就是分完后的每个盒子里的数量。有点绕，看看代码吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t,x,y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, Max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum += a[i];</span><br><span class="line">            Max = max(Max, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> temp = (<span class="keyword">long</span> <span class="keyword">long</span>)((<span class="keyword">double</span>)sum / (n - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(temp * (n - <span class="number">1</span>) &lt; sum)</span><br><span class="line">            ++temp;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p = max(temp, Max);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = (n - <span class="number">1</span>) * p - sum;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Two-Brackets"><a href="#C-Two-Brackets" class="headerlink" title="C-Two Brackets"></a><a href="https://codeforces.com/contest/1452/problem/C">C-Two Brackets</a></h2><p><img src="/.com//../../../img/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/C.png" alt="C"></p><p>我觉得C比B简单，应该有挺多人和我一样。c的大意是一个字符串由“[”,”]”,”(“,”)”组成，每一对‘[‘,’]’和’(‘,’)’能组成一个括号。问字符串内能组成几对括号。我们记录一下出现的左括号的数量，没出现对应的右括号则消掉对应的左括号++ans。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t,x,y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, l1 = <span class="number">0</span>, r1 = <span class="number">0</span>; <span class="comment">//[]</span></span><br><span class="line">        <span class="keyword">int</span> l2 = <span class="number">0</span>, r2 = <span class="number">0</span>;<span class="comment">//()</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                ++l2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                ++l1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    --l2;</span><br><span class="line">                    ++ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    --l1;</span><br><span class="line">                    ++ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Radio-Towers"><a href="#D-Radio-Towers" class="headerlink" title="D-Radio Towers"></a><a href="https://codeforces.com/contest/1452/problem/D">D-Radio Towers</a></h2><p><img src="/.com//../../../img/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/D.png" alt="D"></p><p>D题求分数取模，分子为斐波那契数组第n项，分母为2的n次方。快速幂解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (int i = l; i &gt;= r; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair <span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair <span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, neg = <span class="number">1</span>; <span class="keyword">char</span> op = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(op)) &#123; <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) neg = <span class="number">-1</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(op)) &#123; x = <span class="number">10</span> * x + op - <span class="string">&#x27;0&#x27;</span>; op = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> neg * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>); x = -x; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">10</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sumi</span><span class="params">(ll a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> a * sumi(a, b - <span class="number">1</span>) % <span class="number">998244353</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ll num = sumi(a, b / <span class="number">2</span>) % <span class="number">998244353</span>; </span><br><span class="line">        <span class="keyword">return</span> num * num % <span class="number">998244353</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fib</span><span class="params">(ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> fa = <span class="number">0</span>;</span><br><span class="line">    ll re = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        temp = fa + re;</span><br><span class="line">        fa = re;</span><br><span class="line">        re = temp;</span><br><span class="line">        re %= <span class="number">998244353</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x, <span class="keyword">long</span> <span class="keyword">long</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y)</span><br><span class="line">        <span class="keyword">return</span> gcd(y, x % y);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll n, ans_temp = <span class="number">1</span>, x1 = <span class="number">1</span>, x2 = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ans_temp = fib(n);</span><br><span class="line">    ll mu = sumi(<span class="number">2</span>, n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp = gcd(ans_temp, mu);</span><br><span class="line">    ans_temp /= temp;</span><br><span class="line">    mu /= temp;</span><br><span class="line">    ll ans = ans_temp * sumi(mu, <span class="number">998244353</span> - <span class="number">2</span>) % <span class="number">998244353</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（本人目前大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>2020 年 11 月 20日<img src="/.com//../../../img/Codeforces-Educational-Codeforces-Round-98-Rated-for-Div-2-A-B-C-D/1589430381526.png" alt="1589430381526"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC2020江西省赛_愿风神忽悠你</title>
      <link href="2020/11/16/ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/"/>
      <url>2020/11/16/ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<p>​    今年的$ICPC$江西省赛在各个学校举行，我们学校就两支队伍，看到别的学校七八支队伍感觉压力山大。队名：“愿风神忽悠你”是玩原神的时候一时兴起就取了的不过我取名的时候好像忘记征询队友的意见了（不过问题不大，队友应该没意见吧哈哈）。这算是我第一次打正式点的比赛，并没有做好充足的准备。很难受，本人英语非常不好。所以队友翻译我去写题，巧的是正好有几个英语单词队友也不会导致题目意思没搞懂就没过T_T。还有‘I’题，行和列弄反了导致我交了3发$WA$还卡了30分钟。</p><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/1.png" alt="1"></p><p>加上两道签到题我们一共写出4道39名，差不多也算是铜首。赛后真的挺伤心的，只要我们不管哪个地方做的再好一点就能摸到银T_T。</p><p>下面是自己写出来的题：</p><h2 id="B-Apple"><a href="#B-Apple" class="headerlink" title="B-Apple"></a><a href="https://ac.nowcoder.com/acm/contest/8827/B">B-Apple</a></h2><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/2.png" alt="2"></p><p>很简单的$a$个苹果分成$T$份，并且每份不一样多。我们只需要第i个人给i个苹果就能确保不重复且该<strong>方案为苹果总数需求最小的方案</strong>。所以我们求出对于不同的人数需要最少的苹果数即第$i$个人最少需要$a[i]$个苹果才够分。判断给的苹果数量即可。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">1005</span>; ++i) &#123;</span><br><span class="line">a[i] = i + a[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> temp, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[n]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;possible\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Mathematical-Practice"><a href="#G-Mathematical-Practice" class="headerlink" title=" G-Mathematical Practice"></a><a href="https://ac.nowcoder.com/acm/contest/8827/G"> G-Mathematical Practice</a></h2><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/3.png" alt="3"></p><p>这题临时敲了个快速幂。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">su</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> re = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (m % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">--m;</span><br><span class="line">re *= n;</span><br><span class="line">re %= <span class="number">998244353</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">n *= n;</span><br><span class="line">n %= <span class="number">998244353</span>;</span><br><span class="line">m /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re %= <span class="number">998244353</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">ans = su(m + <span class="number">1</span>, n);</span><br><span class="line">ans %= <span class="number">998244353</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Simple-Math-Problem"><a href="#I-Simple-Math-Problem" class="headerlink" title=" I-Simple Math Problem"></a><a href="https://ac.nowcoder.com/acm/contest/8827/I"> I-Simple Math Problem</a></h2><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/4.png" alt="4"></p><p>就是这道题害的我交了3发$WA$，题目其实很简单，都说了“Simple Math Problem”了就是一个$n*n$的矩阵案例中的$A,B,C…$是十六进制。但结果好像是输出十进制。然后输出坐标$(x, y)$的数(坐标从0开始)。这题有点意思，他的顺序有点怪。我们判断要求的点是否处于$“/”$型的对角线上。对角线上我们输出上方三角形的面积加$y$值就好，如果在下方就反过来求下方的三角形面积再用矩阵的面积减去三角形面积就好。比如下图：</p><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/4_1.png" alt="4_1"></p><p>我们要求第2行第1列的$‘8’$可以求出三角形面积6在加上$y（y = 2）$得出。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, x, y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; y &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (x + y &lt;= n) &#123;</span><br><span class="line">ans = (<span class="number">1</span> + x + y) * (x + y) / <span class="number">2</span>;</span><br><span class="line">ans += y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x = n - <span class="number">1</span> - x;</span><br><span class="line">y = n - <span class="number">1</span> - y;</span><br><span class="line">ans = (<span class="number">1</span> + x + y) * (x + y) / <span class="number">2</span>;</span><br><span class="line">ans += y;</span><br><span class="line">ans = (n * n - <span class="number">1</span>) - ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="M-Zoos’s-Animal-Codes"><a href="#M-Zoos’s-Animal-Codes" class="headerlink" title="M-Zoos’s Animal Codes"></a><a href="https://ac.nowcoder.com/acm/contest/8827/M">M-Zoos’s Animal Codes</a></h2><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/5.png" alt="5"></p><p>看起来题目很长，其实就是输出两字符串的拼接。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补下k题："><a href="#补下k题：" class="headerlink" title="补下k题："></a><strong>补下k题：</strong></h2><p><a href="https://ac.nowcoder.com/acm/contest/8827/K">K-Travel Expense</a></p><p><img src="/.com//ICPC2020%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-%E6%84%BF%E9%A3%8E%E7%A5%9E%E5%BF%BD%E6%82%A0%E4%BD%A0/6.png" alt="6"></p><p>题目还是很简单，但是队友最后一个小时封榜后愣是没写出来，就是给一个图求出$a$到$b$的最短路径再对能带的物品二分求出结果。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[N][N];<span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> dist[N][N];<span class="comment">//最短路</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ans</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> temp, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tempi = m, re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (temp-- &amp;&amp; re &lt;= w) &#123;</span><br><span class="line">re += tempi;</span><br><span class="line">tempi *= m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (re &lt;= w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (x &lt; y) &#123;</span><br><span class="line"><span class="keyword">if</span> (x + <span class="number">1</span> == y) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans(y, z, w)) &#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (x + y) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (ans(m, z, w)) &#123;</span><br><span class="line">x = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">y = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">g[a][b] = <span class="number">1</span>;</span><br><span class="line">g[b][a] = <span class="number">1</span>;</span><br><span class="line">dist[a][b] = <span class="number">1</span>;</span><br><span class="line">dist[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">floyd();</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> st, end;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mon;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; st &gt;&gt; end &gt;&gt; mon;</span><br><span class="line"><span class="keyword">int</span> min = dist[st][end];</span><br><span class="line"><span class="keyword">int</span> maxi = mon / min + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mid(<span class="number">0</span>, maxi, min, mon) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题不难，无向图弗洛伊德加二分就完了。但是队友写的时候写成有向图了，而我当时看E题去了没注意到。要是我仔细检查下队友的代码就好了T_T。</p><p>晚上8点比赛结束后没多久就出榜了知道自己只是铜牌的时候心情真的不知道是好是坏，人生中第一次正式的比赛就摸到了牌子可惜却是铜牌，并且不管哪个地方我们做的好一点就能摸到银牌。当时真觉得好可惜，后来今天写下这篇乱七八糟的文字时才发现一点都不可惜。表面上看我们差一点就能拿银但实际上正是因为自己菜能力不够才导致各方面都没有做到最好，正如学校另一位拿了金牌的学长和我说的：比赛其实就是有每一个很小很小的细节推挤出来的结果。第一次比赛就能拿牌子虽然是个铜，但也得到了经验或者说是个教训：下次一定要带英汉字典！！！</p><p>不管怎样我才大二还有一年时间，虽然目前非常菜鸡很多东西都不会，但我不会放弃。</p><p>2020 年 11 月 16 日</p><p><img src="https://s3.ax1x.com/2020/11/16/DEGinO.png" alt="0"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
            <tag> ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和/差分</title>
      <link href="2020/11/13/%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86/"/>
      <url>2020/11/13/%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>前缀和是一个数组的某项下标之前(包括此项元素)的所有数组元素的和。</p><p>简单来说：</p><p>a[0] = b[0];</p><p>a[1] = b[0] + b[1];</p><p>a[2] = b[0] + b[1] + b[2];</p><p>…</p><p>a[n] = b[0] + b[1] + b[2] + … + b[n];</p><p>对于a数组中的每一项a[i]都有a[i]等于b[i]前面项的和我们得到数组a为数组b的前缀和数组。</p><p>对于上述的简单一维数组求前缀和我们可以直接：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum[i] = sum[i<span class="number">-1</span>] + a[i];</span><br></pre></td></tr></table></figure><p>求得。</p><p>对于二维数组我们只需让a[i] [j] = sum(b[x] [y]){0&lt;=x&lt;=i;0&lt;=y&lt;=j;}即可。更高维前缀和则按规律推导。</p><p>我们画一张图看看就能了解。</p><p><img src="/.com//%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86/0.png"></p><p>我们假设二维数组b为黄色部分和绿色部分，则其前缀和数组a[5] [5]的值为绿色部分的总和。</p><p>前缀和能很方便的计算静态数组的一个区间和。直接上例题吧。</p><p>​    <a href="https://ac.nowcoder.com/acm/problem/15553">牛客15553</a></p><p><img src="/.com//../../../img/%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86/1.png"></p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t, n, k, max = <span class="number">-9999</span>, mbx = <span class="number">-9999</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, Max[maxn] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        max = mbx = <span class="number">-9999999999</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">            Max[i] = Max[i<span class="number">-1</span>] + a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n - k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            max = max &gt; (Max[i] - Max[i - k]) ? max : (Max[i] - Max[i - k]);</span><br><span class="line">            mbx = mbx &gt; (max + Max[i + k] - Max[i]) ? mbx : (max + Max[i + k] - Max[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,mbx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p>差分就是前缀和的反向操作了，给定一个数组b；我们有</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i] = b[i] - b[i - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>则称数组a为数组b的差分。同时我们对数组a求前缀和就能得到原数组b。</p><p>（待补充。。。）</p><p>（最近有点事停更了好久（其实就是懒），不过反正也没人看，但毕竟是笔记不能怠惰了，之后还是要写的。本人目前大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>2020 年 11 月 13日</p><p>.<img src="https://s3.ax1x.com/2020/11/14/D9gcIU.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces break through 1200 rated</title>
      <link href="2020/09/24/Codeforces-break-through-1200-rated/"/>
      <url>2020/09/24/Codeforces-break-through-1200-rated/</url>
      
        <content type="html"><![CDATA[<p><img src="/.com//../../../img/Codeforces-break-through-1200-rated/1.PNG"></p><p>我还是很菜，经过几个回合终于也突破1200新手区到绿名了。希望之后能继续坚持下去。嗯，我的目标是这个学期突破1400到青名。之后的事情到时候再说吧应该会有很多打算。</p><p>总之，本人目前非常菜鸡很多东西都不会，但我不会放弃。</p><p>​                                                                                                                                                                                                2020-09-24 14:19:48</p><p><img src="/.com//../../../img/Codeforces-break-through-1200-rated/69649089_p0.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> Codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS广度搜索</title>
      <link href="2020/09/09/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/"/>
      <url>2020/09/09/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="还是这棵树"><a href="#还是这棵树" class="headerlink" title="还是这棵树"></a><strong>还是这棵树</strong></h1><p>前面讲了深度搜索（<a href="https://hyperion-lr.gitee.io/2020/08/04/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/">DFS深度搜索</a>），当时我们从一棵树开始讲起，现在我们同样假设，我们有一颗树如图：</p><p><img src="/.com//../../../img/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/1.png"></p><p>该树共有13个节点，深度为4。同样的，我们已知根节点“7”需要找“11”号节点。这次我们不再一条路走到黑，现在我们走一步看一步（每走一步看看接下来有那些路能走）即以根节点“7”开始向周围最近的“辐射”不放过任何一条路。这样我们就能求出从根节点“7”到“11”的最短路径长度。例如这棵树：我们从“7”开始最近的有“6”和“10”记住他们，离“6”最近的是“2”和“4”离“10”最近的是“9”和“12”记住他们……如下：</p><img src="/.com//BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/2.png" style="zoom:60%;"><img src="/.com//BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/3.png" style="zoom:60%;"><img src="/.com//BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/4.png" style="zoom:60%;"><img src="/.com//BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/5.png" style="zoom:60%;"><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h1><h2 id="深度搜索"><a href="#深度搜索" class="headerlink" title="深度搜索"></a>深度搜索</h2><p><strong>优点：</strong></p><ol><li>能遍历完所有的解决方案确保不漏过。</li><li>一条路一条路的找,使用内存相对光度搜索来说较少。</li><li>能确定具体的路径。</li></ol><p><strong>缺点：</strong></p><ol><li>要多次寻找,搜索所有的路,还要做好标记并且回溯时要取消标记。</li><li>当搜索的深度很大的情况下效率不高。</li></ol><h2 id="广度搜索"><a href="#广度搜索" class="headerlink" title="广度搜索"></a>广度搜索</h2><p><strong>优点：</strong></p><ol><li>能最快找到结果，对于解决最短或最少问题特别有效。</li><li>每个结点只访问一遍，结点总是以最短路径被访问，所以第二次路径确定不会比第一次短。</li></ol><p><strong>缺点：</strong></p><ol><li>需要不断存储状态会消耗大量内存。</li></ol><h1 id="来道题"><a href="#来道题" class="headerlink" title="来道题"></a><strong>来道题</strong></h1><p>大概就是这个意思，可能在该树上没能很好的表现广度搜索的方式。我们看道题：</p><p><img src="/.com//../../../img/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/6.PNG"></p><p><img src="/.com//../../../img/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/7.PNG"></p><p>题目在这：（<a href="https://ac.nowcoder.com/acm/problem/14572">走出迷宫</a>）</p><p>这道题用深度搜索也可以，但是我们只需要判断小明能否走出迷宫而不需要求出走出迷宫具体的路线，并且DFS不断试探非常耗时有超时的风险所以我们这里用广度搜索。二维数组模拟迷宫，创建一个队列从起点开始不断从队首拿出一个位置并将其周围能去的位置放入队列，一直重复至找到出口或者队列为空（即迷宫从起点开始能去的地方遍历完，也就是无法走出迷宫）。</p><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dop</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, dop start)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;dop&gt; q;</span><br><span class="line">    q.push(start);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        dop temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">map</span>[temp.x][temp.y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = temp.x + a[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = temp.y + a[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[x][y] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m &amp;&amp; x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dop tempdop;</span><br><span class="line">                    tempdop.x = x;</span><br><span class="line">                    tempdop.y = y;</span><br><span class="line">                    q.push(tempdop);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    dop start;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; n; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; m; ++y) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    start.x = x;</span><br><span class="line">                    start.y = y;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">map</span>[x][y] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bfs(n,  m, start)) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/8.PNG"></p><p>最近有点事停更了好久（其实就是懒），不过反正也没人看，但毕竟是笔记不能怠惰了，之后还是要写的。同时本人也大二了，新学期加油吧。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）</p><p>​                                                                                                                                                                                        2020 年 09 月 09 日</p><p><img src="/.com//../../../img/BFS%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/mmexport1596705930020.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> BFS </tag>
            
            <tag> 广度搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforce/C.Boats Competition</title>
      <link href="2020/08/13/codeforce-C-Boats-Competition/"/>
      <url>2020/08/13/codeforce-C-Boats-Competition/</url>
      
        <content type="html"><![CDATA[<p><img src="/.com//../../../img/codeforce-C-Boats-Competition/0.PNG"></p><p><strong>输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">8</span><br><span class="line">6 6 6 6 6 6 8 8</span><br><span class="line">8</span><br><span class="line">1 2 2 1 2 1 1 2</span><br><span class="line">3</span><br><span class="line">1 3 3</span><br><span class="line">6</span><br><span class="line">1 1 3 4 2 2</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>题目很简单，有t组数据每组n个划船运动员。每两个运动员一队进行比赛，尽可能让所有的队体重和一样重输出有多少队。第一行输入n组数据，接下来n组数据每组两行，第一行运动员个数，接下来一行输入运动员重量。输出该组数据最多有多少队。</p><p>我们可以暴力解决（我只会暴力解决T-T）先求出平均数，平均数乘2就是一个队两人体重总和的期望，之后一个一个找拿出一对后做好标记得出人数。但有时平均数可能是错误的，所以我们试试对平均数持续加1或减1直至其==0或者小于max.</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">55</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ans</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> temp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[x] + a[y] == temp &amp;&amp; b[x] != <span class="number">1</span> &amp;&amp; b[y] != <span class="number">1</span> &amp;&amp; x != y) &#123;</span><br><span class="line">                b[x] = <span class="number">1</span>;</span><br><span class="line">                b[y] = <span class="number">1</span>;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t, n, Min = <span class="number">90</span>, Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp, ans1;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            <span class="keyword">if</span> (Min &gt; a[i]) &#123;</span><br><span class="line">                Min = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Max &lt; a[i]) &#123;</span><br><span class="line">                Max = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            temp += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        temp /= n;</span><br><span class="line">        temp *= <span class="number">2</span>;</span><br><span class="line">        ans1 = ans(n, temp);</span><br><span class="line">        Min = max(Max - temp, temp - Min);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Min; ++i) &#123;</span><br><span class="line">            ans1 = max(ans1, ans(n, temp + i));</span><br><span class="line">            ans1 = max(ans1, ans(n, temp - i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 08 月 13 日</p><p><img src="/.com//../../../img/codeforce-C-Boats-Competition/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforce </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS深度搜索</title>
      <link href="2020/08/04/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/"/>
      <url>2020/08/04/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="从一棵树说起"><a href="#从一棵树说起" class="headerlink" title="从一棵树说起"></a><strong>从一棵树说起</strong></h1><p>假设，我们有一颗树如图：</p><p><img src="/.com//../../../img/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/1.png"></p><p>该树共有13个节点，深度为4。假设我们从根节点“7”开始查找该树中的任意的节点（就“11”吧），我们该怎么去查找呢？我们可以这样：不管他对错，先一条路走到黑就是。最后如果这条路走不通我们再回到上一个分叉点直到遍历完整棵树。例如上面的树我们从根节点“7”开始，不管对错下一个节点是“6”（这是个分叉点），再下一个是“2”，再下一个“1”再下一个…没了。此路不通，于是我们回到上一个分叉点“6”，“6”的下一个是“4”……如此下去。我们从“7”开始依次遍历 7，6，2，1，4，3，5，10，9，8，12，11（好，我们找到了）。这种一条路走到黑，不行就返回上一个分叉点直至遍历完全部的搜索方法我们称为深度搜索。同时深度搜索也是算法竞赛走图题的基本方式。</p><h1 id="走图"><a href="#走图" class="headerlink" title="走图"></a><strong>走图</strong></h1><p><img src="/.com//../../../img/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/2.PNG"></p><p>如图，“@”为起点，“*”为终点，“0”为可以通过的地方，“#”表示建筑（不可经过）将从起点“@”到终点的路径标为“&amp;”</p><p>我们从“@”开始利用递归不断朝一个方向前进，走到头后回溯到上一个分叉点换个方向继续搜索。直到找到终点。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;#&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; ++x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">10</span>; ++y) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[x][y] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">map</span>[x - <span class="number">1</span>][y] == <span class="string">&#x27;*&#x27;</span> || <span class="built_in">map</span>[x][y + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> || <span class="built_in">map</span>[x + <span class="number">1</span>][y] == <span class="string">&#x27;*&#x27;</span> || <span class="built_in">map</span>[x][y - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        print();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + d[i][<span class="number">0</span>], ny = y + d[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">10</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">10</span> &amp;&amp; <span class="built_in">map</span>[nx][ny] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">map</span>[nx][ny] = <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">            dfs(nx, ny);</span><br><span class="line">            <span class="built_in">map</span>[nx][ny] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/3.PNG"></p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 08 月 04 日</p><p><img src="/.com//../../../img/DFS%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/ec9940a95f5bf2d3e32df4507c7c3701.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
            <tag> 深度搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java/包</title>
      <link href="2020/07/28/Java-%E5%8C%85/"/>
      <url>2020/07/28/Java-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="package"><a href="#package" class="headerlink" title="package"></a><strong>package</strong></h1><p>包是Java提供的一种机制，能帮助我们更好的管理类。包的具体表现形式为文件夹。</p><h3 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h3><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li></ul><p>包语句的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名<span class="number">1</span>[.包名<span class="number">2</span>[.包名<span class="number">3</span>…]];</span><br></pre></td></tr></table></figure><p>通常我们以该语句作为Java源文件的第一语句，指明该源文件所在的包，包名一般为源文件所在的文件夹名。经package声明后的所有类或接口会被纳入其声明的包内，同时一个包内也可放多个包进行管理。再package语句中用“.”指明文件的层数。如下：</p><p><img src="/.com//Java-%E5%8C%85/1.PNG"></p><p>test.java的源文件在test包中。注意，包的声明应该在源文件的第一句。当类被声明为public时处于同一包中的类或接口可以自由访问。处于包外的则需使用import导入要使用的类或接口所在的包。</p><h1 id="import"><a href="#import" class="headerlink" title="import"></a><strong>import</strong></h1><p>Java中我们除了声明package来管理包，到我们需要在一个包内使用处于另外一个包内的接口或者类时，我们还可以用import来导入包。语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名<span class="number">1</span>[.包名<span class="number">2</span>…].(类名|*);</span><br></pre></td></tr></table></figure><p>这样表示引入别的包里面的类或者接口，“*”表示引用该包内的所有类或接口。如下：</p><p><img src="/.com//../../../img/Java-%E5%8C%85/2.PNG"></p><p>注意：</p><ol><li>String类处于java.lang类库中，该包中的类会自动加载，所以我们使用String时不需要导入该包。</li><li>导入了一系列包，其中Student，stick，test为自己做的包，java.util, java.lang为java自带的包其中包含一些经常使用的类如：Scanner等。</li><li>所有被protected修饰的类或成员只能供父类，子类及同一包中的类使用。其他类无法使用及更改。</li><li>不同的包中的类需要被访问时必须将需要被访问的类用public修饰。</li><li>当源文件中没有package声明时，系统默认该源文件在一个没有名称的包内。</li></ol><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 28 日</p><p><img src="/.com//Java-%E5%8C%85/0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java/类的继承，抽象类及接口</title>
      <link href="2020/07/19/Java%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF_%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%8F%8A%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/07/19/Java%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF_%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%8F%8A%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="C-继承"><a href="#C-继承" class="headerlink" title="C++/继承"></a><strong>C++/继承</strong></h1><p>继承的概念我在之前（C++的继承）的文章中已经说的差不多了，可以看看这篇文章(<a href><a href="https://hyperion-lr.gitee.io/2020/04/09/C++_%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/">链接</a></a>).我们现在要在Java上实现它。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>在Java中我们使用extends关键字进行声明子类的继承。</p><h2 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;<span class="comment">//确保父类与子类处于同一个包内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123; </span><br><span class="line">        name = n; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </span><br><span class="line">        age = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + getName() + <span class="string">&quot; age: &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为更好的封装这个类，我们定义类的属性(C++中被成数据成员)的修饰符为“private”。对每一个属性分别声明相应的方法对进行修改。如setName()等。</p><h2 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;<span class="comment">//确保父类与子类处于同一个包内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        setNumber(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//函数重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + getName() + <span class="string">&quot; number: &quot;</span> + getNumber() + <span class="string">&quot; age: &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类继承父类中所有的属性及public修饰的方法，同时子类可以对父类中不满意的方法进行进行重写如上面的printf().</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a><strong>super</strong></h2><p>Java的子类可以利用super访问父类public修饰的属性及方法，其用法和this类似。还是这个例子：</p><p><strong>父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;<span class="comment">//确保父类与子类处于同一个包内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;<span class="comment">//确保父类与子类处于同一个包内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age);<span class="comment">//super调用父类构造方法</span></span><br><span class="line">        setNumber(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>当super调用的方法有多个重载时，编译器会根据参数自动寻找对应的方法。</p></li><li><p>super调用父类的构造方法时，必须将其放在子类构造方法的第一句，否则会报错。</p></li><li><p>如果子类构造方法中没有调用super()，则系统会自动调用无参的父类构造方法。</p></li><li><p>一个类只能有一个直接父类，但它可以实现若干个接口来实现多继承的功能。</p></li><li><p>如果子类中定义了父类中同名的属性或方法，则父类中的同名属性和方法会被覆盖。</p></li><li><p>同一类内的同名方法称为重载，而子类与父类中的同名方法称为覆盖。</p></li><li><p>在Java中所有的类(不论是自定义的类还是Java内置的类)都继承自Object类。</p></li><li><p>当一个类被final修饰时，该类被称为最终类表示该类<strong>不可被继承</strong>。</p></li></ol><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a><strong>抽象类</strong></h1><p>在类中声明一个方法，这个方法没有实现体，是一个“空”方法，这样的方法就叫抽象方法，使用修饰符“abstract”，当一个类有抽象方法的时候，该类必须被声明为抽象类。</p><p>父类(抽象类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;<span class="comment">//确保父类与子类处于同一个包内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;<span class="comment">//确保父类与子类处于同一个包内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        setNumber(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123; <span class="comment">//需要对抽象类中的抽象方法重写</span></span><br><span class="line">        name = n; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </span><br><span class="line">        age = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + getName() + <span class="string">&quot; number: &quot;</span> + getNumber() + <span class="string">&quot; age: &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>当类含有抽象方法时，该类必须声明为抽象类。</li><li>抽象类大多是用来当父类的，起到一个模板的作用，所以抽象类不能直接用来实例化也大多也不需要构造方法。</li><li>抽象类可以没有抽象方法。</li><li>抽象方法也用“abstract”修饰，抽象方法不需要方法体但是要在继承的子类中对“abstract”修饰的方法进行重写。</li><li>抽象类同样可以继承给抽象类。如果子类在继承抽象类的时候没有对抽象类中所有的抽象方法重写，那么这个子类只能为抽象类。(依然不能用来实例化对象)</li><li>抽象类同样不能多继承。</li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h1><p>接口是Java中很重要的一个概念，它类似于一种约定。接口规定了一个类应具有的部分属性及方法。接口用“interface”修饰其使用方法与抽象类相似。</p><p><strong>Person接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生类(Person接口的实现)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Person派生类Student类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        setNumber(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123; </span><br><span class="line">        name = n; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </span><br><span class="line">        age = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + getName() + <span class="string">&quot; number: &quot;</span> + getNumber() + <span class="string">&quot; age: &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口更像是一种约定，在实现接口时必须将接口内的所有声明的方法实现。接口的实现在语法上用“implements”修饰。虽然Java不支持多继承，但我们可以使一个类实现多个接口来实现多继承的功能。一个类实现多个接口时，在implements后用“,”隔开多个接口名。</p><p>接口同样可以继承，接口的继承同样使用关键字implements。同时，如果子接口中有父接口中同名的属性或方法，则父接口中的同名属性和方法会被覆盖。</p><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p>默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法。默认方法有实现体，并且被声明为了<strong>default</strong>，如下面的”study()”:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习中！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种手段，其所有实现接口的类就不用再实现默认方法(如图中的study())，这样就能够很好的扩展新的类，并且做到不影响原来的类。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>子类只能继承一个抽象类，不能继承多个子类但可以实现多个接口。</li><li>抽象类可以定义public,protected,package,private静态和非静态属性final和非final属性。<br>但是接口中声明的属性，只能是public静态final的即便没有显式的声明。</li></ol><p>好像还有一些东西没有写，之后想到什么就补上。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 19 日</p><p><img src="/.com//../../../img/Java-%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广州大学第十四届ACM(同步赛)-倒放</title>
      <link href="2020/07/18/%E5%B9%BF%E5%B7%9E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8AACM-%E5%90%8C%E6%AD%A5%E8%B5%9B-%E5%80%92%E6%94%BE/"/>
      <url>2020/07/18/%E5%B9%BF%E5%B7%9E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8AACM-%E5%90%8C%E6%AD%A5%E8%B5%9B-%E5%80%92%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h1><p>题目太长且与实际无关就不描述了，就是将输入的字符串反过来输出，很简单的签到题（我也只会做签到题了T_T）</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多组数据输入。（组数不超过1000）</span><br><span class="line">每一组输入数据一行。（仅包含数字、英文字母和空格，保证每一行都至少有一个字符且每一行的头和尾都不是空格，每一行最多有1000个字符）</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每一组输入，输出这一行字符串的反转字符串。</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bn hhc</span><br><span class="line">hhc bn</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chh nb</span><br><span class="line">nb chh</span><br></pre></td></tr></table></figure><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h1><p>题目简单，但是注意空格。可以用一个栈来玩玩，输入字符不断压入栈中，遇到‘\n’则将栈中的所有字符全部输出。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; Q;</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;temp) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; Q.top();</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两天虽然一直再刷题，但是Java的学习并没有落下，已经学完接口了。明天或者后天发。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)                                                                                                                                                                                        2020 年 7 月 18 日</p><p><img src="/.com//../../../img/%E5%B9%BF%E5%B7%9E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8AACM-%E5%90%8C%E6%AD%A5%E8%B5%9B-%E5%80%92%E6%94%BE/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广州大学第十四届ACM(同步赛)-Badeline</title>
      <link href="2020/07/18/%E5%B9%BF%E5%B7%9E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8AACM-%E5%90%8C%E6%AD%A5%E8%B5%9B-Badeline/"/>
      <url>2020/07/18/%E5%B9%BF%E5%B7%9E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8AACM-%E5%90%8C%E6%AD%A5%E8%B5%9B-Badeline/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Madeline来到了旧址（旧址是这一关卡的名字），患有抑郁症的Madeline臆想出了另一个自己Badeline，这个另一个自己正要阻止Madeline登上Celeste山。</span><br><span class="line"></span><br><span class="line">在旧址中，Madeline被Badeline追着，如果Madeline与Badeline在某个时间点在同一个位置相当于Madeline登山失败。</span><br><span class="line"></span><br><span class="line">为了简化模型，Madeline和Badeline在一个无限大的二维的坐标系内。一开始Madeline在某个位置，然后Madeline在接下来的n秒钟内向四个方向移动或者不动，这四个方向分别是上下左右四个方向。如果在这第1秒到第n秒内Madeline与Badeline在任何一个时间点都没有在同一个位置就相当于成功通过旧址。</span><br><span class="line"></span><br><span class="line">如果Madeline此时的坐标是(x,y)，向上移动则下一秒的位置是在(x,y+1)，向下移动则下一秒的位置是在(x,y−1)，向左移动则下一秒的位置是在(x−1,y)，向右移动则下一秒的位置是在(x+1,y)，不动则下一秒的位置是在(x,y)。</span><br><span class="line"></span><br><span class="line">Badeline在第&#123;t&#125;t秒时的位置是Madeline在第t−k秒时的位置。而第1秒到第k−1秒内Badeline不在任何位置上，即第1秒到第k−1秒内Madeline与Badeline不会在同一个位置。在第k秒时Badeline在Madeline第0秒时的位置。</span><br><span class="line"></span><br><span class="line">现在给定Madeline在第1秒到第n秒内的移动，Madeline想让你判断一下这样移动的话会不会登山失败。</span><br></pre></td></tr></table></figure><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只有一组输入样例。</span><br><span class="line">输入第一行有两个整数n，k，意义见题目描述。(1 &lt;&#x3D; n &lt;&#x3D; 300000,1 &lt;&#x3D; k &lt;&#x3D; 200000)</span><br><span class="line">输入第二行是一个字符串s，si表示这n秒钟内的移动方向。U表示向上移动，D表示向下移动，L表示向左移动，R表示向右移动，S表示不动。字符串s的长度为n，且只会出现这五种字符</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果登山失败则输出no。</span><br><span class="line">否则输出yes。</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">LR</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes</span><br></pre></td></tr></table></figure><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h1><p>其实这题我们没必要建立二维数组，只需建立一个队列纪录Madeline最近k次移动的坐标x，y即可，只要Madeline没有经过k次移动前的坐标即输出“yes”。所以我们创建一个长度为k的队列。并将Madline的最开始(Badeline还没出现)前k次移动的坐标依次入队。之后每次移动判断移动的点是否为队首的坐标（k次前经过的点）就好。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qy;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">char</span> S[<span class="number">300005</span>];</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1000</span>, y = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">bool</span> B = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">            ++y;</span><br><span class="line">            qx.push(x);</span><br><span class="line">            qy.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            --y;</span><br><span class="line">            qx.push(x);</span><br><span class="line">            qy.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">            qx.push(x);</span><br><span class="line">            qy.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">            --x;</span><br><span class="line">            qx.push(x);</span><br><span class="line">            qy.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">            ++x;</span><br><span class="line">            qx.push(x);</span><br><span class="line">            qy.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">            ++y;</span><br><span class="line">            <span class="keyword">if</span> (x == qx.front() &amp;&amp; y == qy.front()) &#123;</span><br><span class="line">                B = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                qx.push(x);</span><br><span class="line">                qy.push(y);</span><br><span class="line">                qx.pop();</span><br><span class="line">                qy.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            --y;</span><br><span class="line">            <span class="keyword">if</span> (x == qx.front() &amp;&amp; y == qy.front()) &#123;</span><br><span class="line">                B = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                qx.push(x);</span><br><span class="line">                qy.push(y);</span><br><span class="line">                qx.pop();</span><br><span class="line">                qy.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == qx.front() &amp;&amp; y == qy.front()) &#123;</span><br><span class="line">                B = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                qx.push(x);</span><br><span class="line">                qy.push(y);</span><br><span class="line">                qx.pop();</span><br><span class="line">                qy.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">            --x;</span><br><span class="line">            <span class="keyword">if</span> (x == qx.front() &amp;&amp; y == qy.front()) &#123;</span><br><span class="line">                B = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                qx.push(x);</span><br><span class="line">                qy.push(y);</span><br><span class="line">                qx.pop();</span><br><span class="line">                qy.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">            ++x;</span><br><span class="line">            <span class="keyword">if</span> (x == qx.front() &amp;&amp; y == qy.front()) &#123;</span><br><span class="line">                B = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                qx.push(x);</span><br><span class="line">                qy.push(y);</span><br><span class="line">                qx.pop();</span><br><span class="line">                qy.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (B == <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里没有用结构体或者类，坐标的x，y分开用队列存储比较麻烦。可以自行优化。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 18 日</p><p><img src="/.com//../../../img/%E5%B9%BF%E5%B7%9E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8AACM-%E5%90%8C%E6%AD%A5%E8%B5%9B-Badeline/1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智算之道-开关</title>
      <link href="2020/07/14/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E5%BC%80%E5%85%B3/"/>
      <url>2020/07/14/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E5%BC%80%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p><img src="/.com//../../../img/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E5%BC%80%E5%85%B3/0.PNG"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h1><p>和上题一样，还是暴力枚举。但是不一样的是我们定义一个按钮temp，开始为‘1’，从字符串后面开始往前遍历。遇到和开关状态相同的（需要按开关反转状态）我们将temp的‘1’变成‘0’或者把‘0’变成‘1’就好。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> temp = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> Q[maxn];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span>); i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i] == temp)</span><br><span class="line">        &#123;</span><br><span class="line">            ++sum;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                temp = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                temp = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题还有另一种解法，就是对输入的字符串进行压缩。将相邻且相同的的字符删去仅保留一个判断最后一个字符是否为‘0’为0去掉，最后计算字符长度并输出。如1001可以压缩成101输出长度3。</p><p>（本人即将大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 14 日</p><p><img src="/.com//../../../img/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E5%BC%80%E5%85%B3/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
            <tag> 智算之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智算之道-排队</title>
      <link href="2020/07/14/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E6%8E%92%E9%98%9F/"/>
      <url>2020/07/14/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E6%8E%92%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p><img src="/.com//../../../img/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E6%8E%92%E9%98%9F/000.PNG"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h1><p>题目简单，直接暴力枚举即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m, n, temp, i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> Q[maxn] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;temp);</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * temp &lt;= m)</span><br><span class="line">                Q[i * temp] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= m; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[x] == <span class="number">0</span>)</span><br><span class="line">            ++last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, last);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的测试结果是1ms，至于那些0ms的可能卡常了吧。。。。。。我也不是很懂。</p><p>（本人即将大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 14 日</p><p><img src="/.com//../../../img/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%93-%E6%8E%92%E9%98%9F/001%20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
            <tag> 智算之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P5661 公交换乘</title>
      <link href="2020/07/07/%E6%B4%9B%E8%B0%B7-P5661-%E5%85%AC%E4%BA%A4%E6%8D%A2%E4%B9%98/"/>
      <url>2020/07/07/%E6%B4%9B%E8%B0%B7-P5661-%E5%85%AC%E4%BA%A4%E6%8D%A2%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h1><p>著名旅游城市 B 市为了鼓励大家采用公共交通方式出行，推出了一种地铁换乘公交车的优惠方案：</p><ol><li>在搭乘一次地铁后可以获得一张优惠票，有效期为 45 分钟，在有效期内可以消耗这张优惠票，免费搭乘一次票价不超过地铁票价的公交车。在有效期内指开始乘公交车的时间与开始乘地铁的时间之差小于等于 45 分钟，即： t_{bus} - t_{subway} \leq 45<em>t<strong>b</strong>u**s</em>−<em>t<strong>s</strong>u<strong>b</strong>w<strong>a</strong>y</em>≤45</li><li>搭乘地铁获得的优惠票可以累积，即可以连续搭乘若干次地铁后再连续使用优惠票搭乘公交车。</li><li>搭乘公交车时，如果可以使用优惠票一定会使用优惠票；如果有多张优惠票满足条件，则优先消耗获得最早的优惠票。</li></ol><p>现在你得到了小轩最近的公共交通出行记录，你能帮他算算他的花费吗?</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件的第一行包含一个正整数 n，代表乘车记录的数量。</p><p>接下来的 n 行，每行包含 3 个整数，相邻两数之间以一个空格分隔。第 i行的第 1 个整数代表第 i条记录乘坐的交通工具，0 代表地铁，1 代表公交车；第 2 个整数代表第 i条记录乘车的票价 price ；第三个整数代表第 i条记录开始乘车的时间 t（距 0 时刻的分钟数）。</p><p>我们保证出行记录是按照开始乘车的时间顺序给出的，且不会有两次乘车记录出现在同一分钟。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件有一行，包含一个正整数，代表小轩出行的总花费。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 10 3</span><br><span class="line">1 5 46</span><br><span class="line">0 12 50</span><br><span class="line">1 3 96</span><br><span class="line">0 5 110</span><br><span class="line">1 6 135</span><br></pre></td></tr></table></figure><p><strong>输出1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">36</span><br></pre></td></tr></table></figure><p><strong>输入2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 5 1</span><br><span class="line">0 20 16</span><br><span class="line">0 7 23</span><br><span class="line">1 18 31</span><br><span class="line">1 4 38</span><br><span class="line">1 7 68 </span><br></pre></td></tr></table></figure><p><strong>输出2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h1><p>首先优惠卷有严格的使用顺序，我们优先想到了队列。但是如果第一张卷因面额太小无法使用而需使用第二张时就会面临一个十分尴尬的问题：队列无法直接访问除队首或队尾的元素。所以我们可以用数组模拟队列来完成这个问题。</p><p>我们定义一个优惠卷类，该类包含优惠价格和获得时间。每当程序得到一排数字的第一个数为0时（题目中表示坐地铁）给数组中加上该对象的价格和时间并付钱（sum++）。每当一排数字的第一个数为1时（题目中表示公交车）从头遍历数组寻找合适的优惠卷对象使用它（将价格成员改为0）如果没找到这自己付钱（sum++）。另外，我们话可以用int head，tail，now等来记录队首位置和队尾位置的下标。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn  100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">q</span>// <span class="title">q</span>为优惠卷类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>,time = <span class="number">0</span>;<span class="comment">// 时间，价格数据成员</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, p, t, sum = <span class="number">0</span>;<span class="comment">// 每输入一个车次将类型，价格，时间存储至i，p，t</span></span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>,tail = <span class="number">0</span>,head = <span class="number">0</span>;<span class="comment">// 当前位置，队首位置，队尾位置的下标，相当于指针。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    q *a = <span class="keyword">new</span> q[maxn];<span class="comment">// 题目中n &lt;= 10的5次方，所以干脆设置最大</span></span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;i,&amp;p,&amp;t);<span class="comment">// 输入车次</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            a[tail].p = p;</span><br><span class="line">            a[tail].time = t;</span><br><span class="line">            sum += p;</span><br><span class="line">            ++tail;<span class="comment">// 输入数据后队尾向后移动一位</span></span><br><span class="line">            ++now;<span class="comment">// 当前指针向后移动一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            now = head;<span class="comment">// 校准指针位置，从队首开始查找是否有过期或已使用的优惠卷</span></span><br><span class="line">            <span class="keyword">while</span> (now &lt; tail)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (t - a[now].time &gt; <span class="number">45</span> || a[now].p == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (now != tail)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ++now;</span><br><span class="line">                        ++head;<span class="comment">// 如果查找到过期或已使用的优惠卷队首向后移，相当于去除无用的卷。</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            now = head;<span class="comment">// 校准指针</span></span><br><span class="line">            <span class="keyword">while</span> (now &lt;= tail)<span class="comment">// 寻找面额够大的优惠卷</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[now].p &gt;= p)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[now].p = <span class="number">0</span>;<span class="comment">// 找到可用优惠卷，直接break</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++now;</span><br><span class="line">                <span class="keyword">if</span> (now &gt;= tail)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += p;<span class="comment">//没找到可用的优惠卷，自己出钱。</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);<span class="comment">// 输出总花费的钱</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/.com//../../../img/%E6%B4%9B%E8%B0%B7-P5661-%E5%85%AC%E4%BA%A4%E6%8D%A2%E4%B9%98/1.PNG"></p><p>其实这个花了我好久时间，最开始用的队列并且用的复杂了一点发现直接超时，一片的TLE只有一个AC。后来改用链表，自己定义创建链表的那种，也不知道是什么原因自己电脑上运行的好好的他那里全是WA。最后在一位学长的指导下换用数组这才AC。现在看来，自己还是太菜。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 7 日</p><p><img src="/.com//../../../img/%E6%B4%9B%E8%B0%B7-P5661-%E5%85%AC%E4%BA%A4%E6%8D%A2%E4%B9%98/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++/vector</title>
      <link href="2020/07/06/C-vector/"/>
      <url>2020/07/06/C-vector/</url>
      
        <content type="html"><![CDATA[<h1 id="C-vector"><a href="#C-vector" class="headerlink" title="C++/vector"></a><strong>C++/vector</strong></h1><p>迭代器（vector）是C++的一个容器，它能够存放各种类型的对象，可以理解为高级动态数组。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h1><ol><li>迭代器中的的元素严格按照线性顺序排序，和栈一样，但是可以通过下标访问其中的元素。</li><li>迭代器中的任意元素可以通过下标直接访问，也可以通过指针访问</li><li>迭代器的存储大小可改变。</li></ol><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a><strong>基本功能</strong></h1><h2 id="创建迭代器"><a href="#创建迭代器" class="headerlink" title="创建迭代器"></a>创建迭代器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;数据类型&gt;名称;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector(const vector&amp;):复制构造函数</span><br></pre></td></tr></table></figure><h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><ol><li>push_back 在数组的最后添加一个数据</li><li>pop_back 去掉数组的最后一个数据</li><li>at 得到编号位置的数据</li><li>begin 得到数组头的指针</li><li>end 得到数组的最后一个单元+1的指针</li><li>front 得到数组头的引用</li><li>back 得到数组的最后一个单元的引用</li><li>max_size 得到vector最大可以是多大</li><li>size 当前使用数据的大小</li><li>clear 清空当前的vector</li><li>empty 判断vector是否为空，返回bool值如果为空返回true否则false</li><li>swap 与另一个vector交换数据</li><li>sort 从小到大排序（许加入头文件#include <algorithm>）</algorithm></li><li>reverse 倒排同上</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;obj1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;obj2;</span><br><span class="line"><span class="keyword">float</span> a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入obj1的5个数据&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">obj1.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入obj2的5个数据&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">obj2.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未排序输出obj1的5个数据&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; obj1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序后输出obj2的5个数据&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(obj2.begin(), obj2.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; obj2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒排后输出obj2的5个数据&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">reverse(obj2.begin(), obj2.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; obj2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj1容量&quot;</span> &lt;&lt; obj1.max_size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj1已存储数据&quot;</span> &lt;&lt; obj1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">obj1.swap(obj2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj1与obj2交换&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(obj2.begin(), obj2.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; obj2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj1第一个数据&quot;</span> &lt;&lt; *obj1.begin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj1最后一个数据&quot;</span> &lt;&lt; obj1.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj2第一个数据&quot;</span> &lt;&lt; *obj2.begin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj2最后一个数据&quot;</span> &lt;&lt; obj2.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(obj1.begin(), obj1.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序后obj1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; obj1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(obj2.begin(), obj2.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序后obj2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; obj2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;要在obj1中查找的数据：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *lower_bound(obj1.begin(), obj1.end(), a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">obj2.clear();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;清除obj2的数据&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;::iterator it;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj1中的数据：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (it = obj1.begin(); it != obj1.end(); it++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj2中的数据：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(obj2.empty() == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj2为空！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (it = obj2.begin(); it != obj2.end(); it++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们输入9.9 1.1 2.2 8.8 7.7 3.3 6.6 4.4 5.5 5.6后再输入5.6结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">*****************************************</span><br><span class="line">*****************************************</span><br><span class="line">*****************************************</span><br><span class="line">输入obj1的5个数据</span><br><span class="line">9.9 1.1 2.2 8.8 7.7 3.3 6.6 4.4 5.5 5.6</span><br><span class="line">*****************************************</span><br><span class="line">输入obj2的5个数据</span><br><span class="line">*****************************************</span><br><span class="line">未排序输出obj1的5个数据</span><br><span class="line">9.9</span><br><span class="line">1.1</span><br><span class="line">2.2</span><br><span class="line">8.8</span><br><span class="line">7.7</span><br><span class="line">*****************************************</span><br><span class="line">排序后输出obj2的5个数据</span><br><span class="line">3.3</span><br><span class="line">4.4</span><br><span class="line">5.5</span><br><span class="line">5.6</span><br><span class="line">6.6</span><br><span class="line">*****************************************</span><br><span class="line">倒排后输出obj2的5个数据</span><br><span class="line">6.6</span><br><span class="line">5.6</span><br><span class="line">5.5</span><br><span class="line">4.4</span><br><span class="line">3.3</span><br><span class="line">*****************************************</span><br><span class="line">obj1容量4611686018427387903</span><br><span class="line">obj1已存储数据5</span><br><span class="line">*****************************************</span><br><span class="line">obj1与obj2交换</span><br><span class="line">*****************************************</span><br><span class="line">1.1</span><br><span class="line">2.2</span><br><span class="line">7.7</span><br><span class="line">8.8</span><br><span class="line">9.9</span><br><span class="line">*****************************************</span><br><span class="line">obj1第一个数据6.6</span><br><span class="line">obj1最后一个数据3.3</span><br><span class="line">obj2第一个数据1.1</span><br><span class="line">obj2最后一个数据9.9</span><br><span class="line">*****************************************</span><br><span class="line">排序后obj1</span><br><span class="line">3.3</span><br><span class="line">4.4</span><br><span class="line">5.5</span><br><span class="line">5.6</span><br><span class="line">6.6</span><br><span class="line">*****************************************</span><br><span class="line">排序后obj2</span><br><span class="line">1.1</span><br><span class="line">2.2</span><br><span class="line">7.7</span><br><span class="line">8.8</span><br><span class="line">9.9</span><br><span class="line">*****************************************</span><br><span class="line">要在obj1中查找的数据：5.6</span><br><span class="line">5.6</span><br><span class="line">*****************************************</span><br><span class="line">清除obj2的数据</span><br><span class="line">obj1中的数据：</span><br><span class="line">3.3</span><br><span class="line">4.4</span><br><span class="line">5.5</span><br><span class="line">5.6</span><br><span class="line">6.6</span><br><span class="line">*****************************************</span><br><span class="line">obj2中的数据：</span><br><span class="line">obj2为空！</span><br><span class="line">*****************************************</span><br></pre></td></tr></table></figure><p>迭代器还有很多东西但我觉得我只需要用到这些就够了，所以就没有深究。</p><p>（本人即将大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                            2020 年 7 月 6 日</p><p><img src="/.com//../../../img/C-vector/1588145987152.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Presentation Error!!!</title>
      <link href="2020/07/06/HDU-2015-%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C-Presentation-Error/"/>
      <url>2020/07/06/HDU-2015-%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C-Presentation-Error/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一个长度为n(n&lt;&#x3D;100)的数列，该数列定义为从2开始的递增有序偶数，现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组输入数据，输出一个平均值序列，每组输出占一行。</span><br></pre></td></tr></table></figure><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a><strong>思考</strong></h1><p>题目不难，但我还是写了好久（我太菜了）从2开始的偶数数列，2 4 6 8 10 …长度为n，没m个算平均值。我们可以先求出前m/n个平均值在加上最后一个不足m个数的平均值。我们容易得知前m/n个平均值为公差为2m首项为（2+2+2(m-1)）/2也就是m+1的等差数列，所以：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = n/m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; i; p++)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(m+<span class="number">1</span>) + <span class="number">2</span>*(p<span class="number">-1</span>)*m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以循环输出前m/n个平均值了，然后是最后一个平均值，先判断n/m有没有余数，没有的话已经可以输出了。有的话我们可以先将数列补齐算出平均值得出最后n%m个数列的首项在加上((int)(n/m)/2)*2得出平均值并输出。完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = n/m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">1</span>; p &lt; i; p++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(m+<span class="number">1</span>) + <span class="number">2</span>*(p<span class="number">-1</span>)*m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(m+<span class="number">1</span>) + <span class="number">2</span>*(i<span class="number">-1</span>)*m);</span><br><span class="line">        i = n % m;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = n/m;</span><br><span class="line">            <span class="keyword">int</span> q = (m+<span class="number">1</span>) + <span class="number">2</span>*i*m;</span><br><span class="line">            i = n % m;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            q++;</span><br><span class="line">            q = q - (<span class="keyword">int</span>)(m / <span class="number">2</span>) * <span class="number">2</span>; </span><br><span class="line">            q = q + (<span class="keyword">int</span>)(i / <span class="number">2</span>) * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            q--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d\n&quot;</span>,q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是AC后的代码</p><p><img src="/.com//../../../img/HDU-2015-%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C-Presentation-Error/001.PNG"></p><p>但其实这个是我经历两个小时修改得出的结果。。。。。。</p><p>它之前一直是这样的：</p><p><img src="/.com//../../../img/HDU-2015-%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C-Presentation-Error/002.PNG"></p><p>Presentation Error？？？格式错误？？？我找呀找，对代码的每处空格进行审查，最后修改n次后才AC。不得不说他这个要求太变态了。题目又没说清楚哪里有空格哪里没有，全靠自己想。。。。。。</p><p>（本人即将大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                        2020 年 7 月 6 日</p><p><img src="/.com//../../../img/HDU-2015-%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C-Presentation-Error/74502138_p0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从C++迁移到Java</title>
      <link href="2020/07/03/%E4%BB%8EC++%E8%BF%81%E7%A7%BB%E5%88%B0Java/"/>
      <url>2020/07/03/%E4%BB%8EC++%E8%BF%81%E7%A7%BB%E5%88%B0Java/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java的特点就不多说了，面向对象、简单性、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等，这些百度都能找到。鉴于本人算是初学Java,即使学了C++有了点面向对象的底子，但对其后面的特点还是不清楚。我想这并不影响我们的学习，现在最重要的是先将C++的知识迁移到Java上也就是了解C++与Java的不同。</p><h1 id="Java程序的基本结构"><a href="#Java程序的基本结构" class="headerlink" title="Java程序的基本结构"></a>Java程序的基本结构</h1><p>按照惯例，我们学习一个新语言都是先编写一个HelloWorld。我们也一样，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他会在程序的输出终端打印“HelloWorld”如下：</p><p><img src="/.com//%E4%BB%8EC++%E8%BF%81%E7%A7%BB%E5%88%B0Java/2.PNG"></p><p>先说说一个程序的主要结构吧，第一行为 public class HelloWorld  这里的“HelloWorld”为该Java的文件名（听说过可以写其他的东西但是会很麻烦）“public”表示该文件具有最大的访问权限，任何文件均可访问。“class”表示定义一个类，这个没什么好说的Java的最小运行单元是类。后面的括号是我们开始写代码的地方。</p><p>第二行“public static void main(String[] arg)”</p><p>同样“public”表示该类（后面的main类）可以被所有其他类所访问。</p><p>“static” 表示不需要创建类实例就可以调用main方法。因为,一般情况下,类没有实例化就不能访问.但如方法前有关键字static,即使未创建类实例,也可以通过类名直接访问.由于JVM将在其它流程之前调用main()方法,所以,main()方法不应依赖于要创建的任何类的实例,必须声明为static.</p><p>void 表示main方法不返回值，所有方法名后必须有括号。</p><p>String arg[]是传递给main()方法的一个参数。（我并不知道这个参数有什么用，但是没有这个程序会报错。程序运行时我们并不需要管这个参数，要设置该参数得再终端控制台编译时加入如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java&#x2F;&#x2F;该语句编译java文件生成可以运行的class文件</span><br><span class="line">java HelloWorld a b c&#x2F;&#x2F;运行上条语句生成的文件，a b c之间空格隔开</span><br></pre></td></tr></table></figure><p>这样a, b, c就为String[] arg的参数，但是可能是我太菜了，我并不知道这有什么用。因为main中调用arg字符串数组时会报错。）</p><p>之后是“System.out.println(“HelloWorld!”);”</p><p>它的作用是输出“HelloWorld”</p><p><strong>注意</strong>：</p><ol><li>main方法是程序执行的入口,所有的java程序都必须具备一个main()方法,而且按照如上的格式来定义.</li><li>Java是严格区分大小写的语言，所以该大写的字母大写该小写的小写。</li></ol><p>这样一个HelloWorld就出来了。</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>与C++一样，任何Java中表示数据源的对象都会提供以数据流的方式读写它的数据的方法。 所以当我们要在键盘上输入数据给程序时我们必须引入类再调用类的函数进行输入。支持输入输出的有类很多，像java.io等这里我们用Scanner。（主要是其它的有点麻烦）</p><p>与C++不同，我们再调用某个类的成员时必须先引用该类所在的包。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><p>import 表示引用包名。java.util 表示引用的包名，Scanner表示引用该包中的类。</p><p>引用完包名后我们还要新建一个类的对象来调用方法，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner 对象名 = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>对象名可以随意，但之后调用方法时得用该对象调用，为方便表达，我们这里之后的对象名为“In”。定义好对象后我们就可以使用该对象的方法向程序输入数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">Scanner In = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">b = In.nextInt();</span><br></pre></td></tr></table></figure><p>b = In.nextInt();表示从键盘接受一个整形数据赋值给b。相应的：</p><p>nextFloat()输入一个浮点数。</p><p>nextDouble()输入一个双精度数。</p><p>nextLine（）输入一个字符串。</p><p>还有nextShort(), nextLong()等同理。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>Java的输出比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p>括号内为输出的内容不同的类型用“+”连接如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br></pre></td></tr></table></figure><p>会输出：b = 3</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Java的方法在其他语言中被称为函数，方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问权限符 方法修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数返回a，b中的最大值。public表示任何类及成员都可访问该函数，static表示该方法为静态方法，静态方法为整个类的类方法，能被类内任意成员调用。没有static的表示为具体对象的方法，只能被该对象调用。</p><p>写个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(max(a, b));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过于简单，我就不运行了。（也没必要）</p><p>但是注意，方法在哪个括号里面，哪个括号就为其作用域方法只能在该括号内被调用，或者被所属对象对象调用。</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类是面向对象思想中很重要的一部分，也是Java程序的组成部分。我们在Java中对类的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">访问权限符 <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">    访问权限符 数据类型 数据成员名;</span><br><span class="line">    。。。。。。</span><br><span class="line">    访问权限符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">        方法体；</span><br><span class="line">    &#125;</span><br><span class="line">    。。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和前面的类似，我们举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    Scanner In = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">&quot; &quot;</span>;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">        sex = <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String n, <span class="keyword">int</span> a, String s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        sex = s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入输出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = In.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.sex = In.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = In.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java中我们一般将对象的数据放入堆中。所以，我们一般用类以”new”的形式定义一个对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student 对象名 = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>上式有时我们声明对象用到构造方法时括号里可能会有参数。Java有内存自动回收机制，没有用到的内存系统会自动回收，所以我们不用delete掉我们申请的地址。</p><p>对象对其方法的调用与C++无异。</p><h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><p><strong>在Java语言中，实现类的继承使用extends关键字</strong></p><p><strong>格式如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">　　<span class="comment">//类体的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、关于继承的注意事项</strong></p><p>1、子类继承父类中非private的成员变量和成员方法，同时，注意构造方法不能被子类继承。</p><p>2、定义类时若缺省extends关键字，则所定义的类为java.lang.Object类的直接子类。</p><p>​    <strong>在Java语言中，一切类都是Object类的直接或间接子类。</strong></p><p>3、Java仅支持单重继承，即一个类至多只有一个直接父类。在Java中通过接口来实现多重继承。</p><p>4、父类中定义的private成员变量和方法不能被子类继承，因此在子类中不能直接使用。我们可以在父类中定义公共的访问方法和修改方法，子类可以通过这些方法来实现访问和修改。</p><p><strong>三、举例说明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">&quot;Hyperion&quot;</span>, <span class="number">18</span>, <span class="number">2019213037</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名= &quot;</span> + student.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄= &quot;</span> + student.getAge());</span><br><span class="line">        student.printf();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义基类Person</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;<span class="comment">//Person属性</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="comment">//封装name，age。</span></span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;<span class="comment">//构造函数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span> </span>&#123;<span class="comment">//输出信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;age: &quot;</span> + age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Person派生类Student类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number;<span class="comment">//Student属性</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;<span class="comment">//封装number</span></span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;<span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//调用父类的构造方法</span></span><br><span class="line">            <span class="keyword">super</span>(name, age);</span><br><span class="line">            setNumber(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">()</span> </span>&#123;<span class="comment">//输出信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;name: &quot;</span> + getName() + <span class="string">&quot; number: &quot;</span> + getNumber() + <span class="string">&quot; age: &quot;</span> + getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="/.com//../../../img/%E4%BB%8EC++%E8%BF%81%E7%A7%BB%E5%88%B0Java/4.PNG"></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>出于安全考虑Java没有指针，但其实Java是将指针的相关操作进行了封装。就比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">&quot;Hyperion&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br></pre></td></tr></table></figure><p>实际上的这里是在堆中申请一块Student大小的地址，将地址赋值给栈中的student。如图：</p><p><img src="/.com//../../../img/%E4%BB%8EC++%E8%BF%81%E7%A7%BB%E5%88%B0Java/3.PNG"></p><p>我们用new申请了一块空间其首地址为x001并放入数据，为student在栈中申请一块内存f001并将堆中申请的首地址x001放入f001。仔细想想，student不就是指针。这个地方还有许多可以说的，之后会仔细说说链表。这里先跳过。</p><p><strong>这些都是我自学的一些东西，讲的也都是一些十分基础的东西，因为是自学所以有些专业术语及操作可能并不规范甚至有些错误，如：我一般将各个类分别写进不同的文件并在主方法（main）中引用这些文件来调用这些类，而为方便理解就都放到main（）边上了。</strong></p><p>（本人即将大二，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p><img src="/.com//../../../img/%E4%BB%8EC++%E8%BF%81%E7%A7%BB%E5%88%B0Java/wallpaper.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前进，不择手段前进！</title>
      <link href="2020/07/01/%E5%89%8D%E8%BF%9B%EF%BC%8C%E4%B8%8D%E6%8B%A9%E6%89%8B%E6%AE%B5%E5%89%8D%E8%BF%9B%EF%BC%81/"/>
      <url>2020/07/01/%E5%89%8D%E8%BF%9B%EF%BC%8C%E4%B8%8D%E6%8B%A9%E6%89%8B%E6%AE%B5%E5%89%8D%E8%BF%9B%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后一场物理也考完了，收拾收拾东西准备明天回家，进入假期之后大一的生活也就结束了。算算这一年来的收获，我觉得大一的两个重要目标还是达成了。</p><ol><li>了解更多的知识明确自己的目标和方向。</li><li>加入卓越计划。</li></ol><p>之后就是向着自己的目标不断前进了。不知道我能走多远，可能我也只是个废物，但这都没什么也不会阻止我前进。想到韦德的“前进，不择手段的前进”于是就做了标题。我一向是那种想做什么就会去做的人。所以，加油吧，自己。</p><p>因为考试博客停笔了一阵子，之后会补上。</p><p>呐，就酱紫。</p><p><img src="/.com//../../../img/%E5%89%8D%E8%BF%9B%EF%BC%8C%E4%B8%8D%E6%8B%A9%E6%89%8B%E6%AE%B5%E5%89%8D%E8%BF%9B%EF%BC%81/117.png"></p><p>​                                                                                                                                                                                                    2020 年 7月 1日</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1097 A hard puzzle</title>
      <link href="2020/06/13/HDU-1097-A-hard-puzzle/"/>
      <url>2020/06/13/HDU-1097-A-hard-puzzle/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcy gives a hard puzzle to feng5166,lwg,JGShining and Ignatius: gave a and b,how to know the a^b.everybody objects to this BT problem,so lcy makes the problem easier than begin.</span><br><span class="line">this puzzle describes that: gave a and b,how to know the a^b&#39;s the last digit number.But everybody is too lazy to slove this problem,so they remit to you who is wise.</span><br></pre></td></tr></table></figure><p>翻译后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcy给feng5166，lwg，JGShining和Ignatius带来了一个难题：给了a和b，如何知道a ^ b。每个人都反对这个BT问题，所以lcy使问题比开始容易。</span><br><span class="line">这个难题描述了：给了a和b，如何知道a ^ b的最后一位数字。但是每个人都懒得解决这个问题，所以他们将自己寄给了明智的人。</span><br></pre></td></tr></table></figure><h2 id="输入项"><a href="#输入项" class="headerlink" title="输入项"></a>输入项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有多个测试用例。每个测试用例由两个数字a和b（0 &lt;a，b &lt;&#x3D; 2 ^ 30）组成</span><br></pre></td></tr></table></figure><h2 id="输出量"><a href="#输出量" class="headerlink" title="输出量"></a><strong>输出量</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每个测试用例，您应该输出a ^ b的最后一位数字。</span><br></pre></td></tr></table></figure><h2 id="样本输入"><a href="#样本输入" class="headerlink" title="样本输入"></a><strong>样本输入</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 66</span><br><span class="line">8 800</span><br></pre></td></tr></table></figure><h2 id="样本输出"><a href="#样本输出" class="headerlink" title="样本输出"></a><strong>样本输出</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a><strong>作者</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eddy</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>​    看题目简单的说就是输入a，b输出a的b次方的最后一位数。计算量较大简单的枚举应该会超时。但我们可以试试。</p><p><img src="/.com//../../../img/HDU-1097-A-hard-puzzle/1.PNG"></p><p>提交后:</p><p><img src="/.com//../../../img/HDU-1097-A-hard-puzzle/2.PNG"></p><p>Time Limit Exceeded 果不其然，超时了。</p><p>我们看看题目，题目只要个位，所以我们只需要看其个位的n次方的个位就好。</p><p><img src="/.com//../../../img/HDU-1097-A-hard-puzzle/3.png"></p><p>我们看到所有个位数字最小共同周期为4，所以我们只需要求出次方数除以4的余数就能省掉很多运算。</p><p><img src="/.com//../../../img/HDU-1097-A-hard-puzzle/4.PNG"></p><p>提交后</p><p><img src="/.com//../../../img/HDU-1097-A-hard-puzzle/5.PNG"></p><p>AC！</p><p>好久没更新了，这算是我开的一个新坑吧（虽然没人看），我报名了学校ACM集训队的选拔，ACM主要考察算法所以考试周后我就要开始刷题了。嗯，我是个英语很差很差的学生，一想到ACM的题目如果字数一多就成了阅读理解我的脑瓜子就特别疼。</p><p>还有，之后Java的学习也会正式开始。现在祈祷我考试别挂科吧，这对我真的很重要。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                            2020 年 06 月 13 日</p><p><img src="/.com//../../../img/HDU-1097-A-hard-puzzle/72475416_p0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++课程设计（选做6）</title>
      <link href="2020/05/17/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E9%80%89%E5%81%9A6%EF%BC%89/"/>
      <url>2020/05/17/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E9%80%89%E5%81%9A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-课程设计（选做6）"><a href="#C-课程设计（选做6）" class="headerlink" title="C++/课程设计（选做6）"></a>C++/课程设计（选做6）</h1><p>我要做的题目是第六题的学生成绩管理，题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">学生成绩管理</span><br><span class="line">基本要求：</span><br><span class="line">定义学生（student）类，其中至少包括姓名、性别、学号、班级和四门功课的成绩。</span><br><span class="line">功能要求：</span><br><span class="line">       1、设计菜单实现功能选择；   </span><br><span class="line">       2、输入功能：输入学生信息，并保存到文件中；</span><br><span class="line">       3、计算每个学生的总分与平均分并排序</span><br><span class="line">       4、能根据学号修改学生信息</span><br><span class="line">       5、能根据学号删除学生信息</span><br><span class="line">       6、查询功能：</span><br><span class="line">            1）能够根据学号查询学生信息；</span><br><span class="line">            2）能够根据姓名、班级查询学生信息</span><br><span class="line">        3）统计学生成绩，按照班级和科目计算平均分。</span><br></pre></td></tr></table></figure><p><strong>差不多写完了，之后可能会有改动。</strong></p><p>一般建好Student类后直接（Student* P = new Student[];）这样new一个Student类数组就好。但本着提高难度挑战自我的精神（作死），我打算用链表完成。排序有时间会试试归并排序或者哈希排序，没时间就另说。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6学生成绩管理</span></span><br><span class="line"><span class="comment">基本要求：</span></span><br><span class="line"><span class="comment">定义学生（student）类，其中至少包括姓名、性别、学号、班级和四门功课的成绩。</span></span><br><span class="line"><span class="comment">功能要求：</span></span><br><span class="line"><span class="comment">       1、设计菜单实现功能选择；</span></span><br><span class="line"><span class="comment">       2、输入功能：输入学生信息，并保存到文件中；</span></span><br><span class="line"><span class="comment">       3、计算每个学生的总分与平均分并排序</span></span><br><span class="line"><span class="comment">       4、能根据学号修改学生信息</span></span><br><span class="line"><span class="comment">       5、能根据学号删除学生信息</span></span><br><span class="line"><span class="comment">       6、查询功能：</span></span><br><span class="line"><span class="comment">            1）能够根据学号查询学生信息；</span></span><br><span class="line"><span class="comment">            2）能够根据姓名、班级查询学生信息</span></span><br><span class="line"><span class="comment">            3）统计学生成绩，按照班级和科目计算平均分。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> Name;    <span class="comment">//学生姓名</span></span><br><span class="line">    <span class="built_in">string</span> Sex;       <span class="comment">//学生性别</span></span><br><span class="line">    <span class="keyword">int</span> Number;     <span class="comment">//学生学号</span></span><br><span class="line">    <span class="keyword">int</span> Class;      <span class="comment">//学生班级</span></span><br><span class="line">    <span class="keyword">double</span> Chinese; <span class="comment">//语文成绩</span></span><br><span class="line">    <span class="keyword">double</span> Math;    <span class="comment">//数学成绩</span></span><br><span class="line">    <span class="keyword">double</span> English; <span class="comment">//英语成绩</span></span><br><span class="line">    <span class="keyword">double</span> Computer;<span class="comment">//计算机成绩</span></span><br><span class="line">    <span class="keyword">double</span> NumScore;     <span class="comment">//学生总成绩</span></span><br><span class="line">    <span class="keyword">double</span> Average; <span class="comment">//学生平均分</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span>* <span class="title">next</span>;</span>    <span class="comment">//下一个节点位置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Num;     <span class="comment">//Num记录已入系统的学生数量。</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student();          <span class="comment">//构造函数</span></span><br><span class="line">    Student(Student* node);</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Menu</span><span class="params">()</span></span>;         <span class="comment">//显示菜单</span></span><br><span class="line">    <span class="function">Student* <span class="title">InStudent</span><span class="params">(Student* Nownode)</span></span>;   <span class="comment">//输入学生数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(Student* head)</span></span>;                             <span class="comment">//修改学生数据</span></span><br><span class="line">    <span class="function">Student* <span class="title">Del</span><span class="params">(Student* node)</span></span>;                <span class="comment">//删除学生数据</span></span><br><span class="line">    <span class="function">Student* <span class="title">Query</span><span class="params">(Student* head)</span></span>;          <span class="comment">//查询学生数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span></span>;                         <span class="comment">//显示学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span><span class="params">(Student* head)</span></span>;        <span class="comment">//排序函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Student* <span class="title">Students</span><span class="params">()</span></span>;             <span class="comment">//友元函数方便读取数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Student::Num = <span class="number">0</span>;</span><br><span class="line">Student::Student()                          <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot; &quot;</span>;</span><br><span class="line">    Sex = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    Number = <span class="number">0</span>;</span><br><span class="line">    Class = <span class="number">0</span>;</span><br><span class="line">    Chinese = <span class="number">0</span>;</span><br><span class="line">    Math = <span class="number">0</span>;</span><br><span class="line">    English = <span class="number">0</span>;</span><br><span class="line">    Computer = <span class="number">0</span>;</span><br><span class="line">    Student* next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(Student* node)             <span class="comment">//拷贝构造函数    估计用不到但写上预防万一</span></span><br><span class="line">&#123;</span><br><span class="line">    Name = node-&gt;Name;    <span class="comment">//学生姓名</span></span><br><span class="line">    Sex = node-&gt;Sex;       <span class="comment">//学生性别</span></span><br><span class="line">    Number = node-&gt;Number;     <span class="comment">//学生学号</span></span><br><span class="line">    Class = node-&gt;Class;      <span class="comment">//学生班级</span></span><br><span class="line">    Chinese = node-&gt;Chinese; <span class="comment">//语文成绩</span></span><br><span class="line">    Math = node-&gt;Math;    <span class="comment">//数学成绩</span></span><br><span class="line">    English = node-&gt;English; <span class="comment">//英语成绩</span></span><br><span class="line">    Computer = node-&gt;Computer;<span class="comment">//计算机成绩</span></span><br><span class="line">    next = node-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::Display</span><span class="params">()</span>     <span class="comment">//该函数显示该学生信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|姓名:&quot;</span> &lt;&lt; Name &lt;&lt; <span class="string">&quot;|性别:&quot;</span> &lt;&lt; Sex &lt;&lt; <span class="string">&quot;|学号:&quot;</span> &lt;&lt; Number &lt;&lt; <span class="string">&quot;|班级:&quot;</span> &lt;&lt; Class &lt;&lt; <span class="string">&quot;|语文成绩:&quot;</span> &lt;&lt; Chinese &lt;&lt; <span class="string">&quot;|数学成绩:&quot;</span> &lt;&lt; Math &lt;&lt; <span class="string">&quot;|英语成绩:&quot;</span> &lt;&lt; English &lt;&lt; <span class="string">&quot;|计算机成绩:&quot;</span> &lt;&lt; Computer &lt;&lt; <span class="string">&quot;|平均分:&quot;</span> &lt;&lt; Average &lt;&lt; <span class="string">&quot;|总分:&quot;</span> &lt;&lt; NumScore &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Student::Menu</span><span class="params">()</span>     <span class="comment">//菜单栏</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> Opin;           <span class="comment">//Opin为用户的选择</span></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_GREEN);    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎使用学生成绩管理系统 作者（李荣）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          1. 增加学生信息           |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          2. 输出学生信息           |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          3. 查询学生信息           |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          4. 查询班级信息           |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          5. 修改学生信息           |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          6. 删除学生信息           |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;|          7. 退  出                 |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入相应数字进行操作：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Opin;</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);</span><br><span class="line">    <span class="keyword">return</span> Opin;    <span class="comment">//返回用户操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">Student::InStudent</span><span class="params">(Student* Nownode)</span>   <span class="comment">//Nownode为当前链表最后节点。增加的数据接上之前的链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int i = -1;</span></span><br><span class="line">    <span class="function">fstream <span class="title">out</span><span class="params">(<span class="string">&quot;StudentScore.txt&quot;</span>, ios::app)</span></span>;  <span class="comment">//创建文件类对象</span></span><br><span class="line">    <span class="keyword">if</span> (!out.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The file open fail!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;要输入多少学生信息？&quot; &lt;&lt; endl;   //输入学生数量        //由于该功能不稳定故省去；</span></span><br><span class="line"><span class="comment">    bool q = true;</span></span><br><span class="line"><span class="comment">    cin &gt;&gt; i;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    Student* node = Nownode;</span><br><span class="line">    <span class="comment">//for (int n = 1; n &lt;= i; n++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        Student* P = <span class="keyword">new</span> Student;</span><br><span class="line">        <span class="comment">//输入学生信息；</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;正在输入第&quot;</span> &lt;&lt; ++Student::Num &lt;&lt; <span class="string">&quot;位同学的信息&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        P-&gt;Set(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每输入一个学生信息将学生信息写入文件。</span></span><br><span class="line">        out &lt;&lt; P-&gt;Name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Sex &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Class &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Chinese &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Math &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;English &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Computer &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Average &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;NumScore &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        node-&gt;next = P;     <span class="comment">//将新增节点接上链表；</span></span><br><span class="line">        node = P;</span><br><span class="line">        P-&gt;next = <span class="literal">NULL</span>;     <span class="comment">//切断链表；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.close();            <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="keyword">return</span> node;            <span class="comment">//返回当前最后的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::Set</span><span class="params">(Student* head)</span>         <span class="comment">//设置学生信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Name;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生性别&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Sex;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生学号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">bool</span> i = <span class="literal">true</span>;  <span class="comment">//判断学号是否有</span></span><br><span class="line">    <span class="keyword">while</span> (i == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; Number;</span><br><span class="line">        <span class="keyword">for</span> (Student* node = head; node != <span class="literal">NULL</span>; node = node-&gt;next)     <span class="comment">//遍历链表查找信息，查找是否有该学号的学生</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;Number == Number)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;已有该学号学生信息，请重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                node-&gt;Display();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next == <span class="literal">NULL</span> &amp;&amp; i == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生班级&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Class;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生语文成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Chinese;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生数学成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Math;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生英语成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; English;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该学生计算机成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Computer;</span><br><span class="line">    NumScore = Chinese + Math + English + Computer;</span><br><span class="line">    Average = NumScore / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">Student::Del</span><span class="params">(Student* node)</span>    <span class="comment">//删除学生信息。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> Opin = <span class="string">&quot;0&quot;</span>;  <span class="comment">//string防止用户输入错误时系统陷入死循环</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;删除前&quot; &lt;&lt; endl;            //测试用</span></span><br><span class="line">    <span class="comment">//node-&gt;Display();</span></span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;/////////////////////////////////////////////////////&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;！！！！！！！！确定要删除吗?！！！！！！！！！！！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;/////////////////////////////////////////////////////&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;按“1”确定删除(该操作无法撤销！)\t 其余任意键取消&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Opin;</span><br><span class="line">    <span class="keyword">if</span> (Opin == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;next == <span class="literal">NULL</span>)         <span class="comment">//遍历链表查找信息，有则输出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (Student* node = <span class="keyword">this</span>; node != <span class="literal">NULL</span>; node = node-&gt;next)     <span class="comment">//如果要删除的为最后一个节点信息，为排除指针指向问题单独开。   </span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((node-&gt;next)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***\t删除成功！\t***&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            Student::Num--;     <span class="comment">//学生总数减少；</span></span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student* P = node-&gt;next;</span><br><span class="line">            *node = *(node-&gt;next);</span><br><span class="line">            <span class="built_in">free</span>(P);    <span class="comment">//释放内存，防止内存泄漏；</span></span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            Student::Num--; <span class="comment">//学生总数减少；</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***\t删除成功！\t***&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除取消！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;删除后&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//node-&gt;Display();</span></span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">Student::Query</span><span class="params">(Student* head)</span>  <span class="comment">//查询学生信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> number, Class;    <span class="comment">//number, opin, Class, name分别用来存储要查找同学的信息</span></span><br><span class="line">    <span class="built_in">string</span> opin;           </span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Student* Node = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您想怎么查找呢？&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1. 学号  2. 班级和姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; opin;                <span class="comment">//输入要查找的方式</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opin == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找学生的学号：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; number;</span><br><span class="line">        <span class="keyword">for</span> (Student* node = head; node != <span class="literal">NULL</span>; node = node-&gt;next)     <span class="comment">//遍历链表查找信息，有则输出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;Number == number)</span><br><span class="line">            &#123;</span><br><span class="line">                node-&gt;Display();</span><br><span class="line"></span><br><span class="line">                Node = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;很抱歉没有找到该学生！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opin == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找学生的班级：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; Class;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找学生的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        <span class="keyword">for</span> (Student* node = head; node != <span class="literal">NULL</span>; node = node-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;Class == Class &amp;&amp; node-&gt;Name == name)</span><br><span class="line">            &#123;</span><br><span class="line">                node-&gt;Display();</span><br><span class="line">                Node = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;很抱歉没有找到该学生！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opin != <span class="string">&quot;1&quot;</span> &amp;&amp; opin != <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的数字！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::Sort</span><span class="params">(Student* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Student* nodex = head-&gt;next; nodex; nodex = nodex-&gt;next)           <span class="comment">//选择法排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student* nodey = nodex; nodey; nodey = nodey-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodex-&gt;Average &lt; nodey-&gt;Average)</span><br><span class="line">            &#123;</span><br><span class="line">                Student* P = <span class="keyword">new</span> Student;</span><br><span class="line">                *P = *nodex;</span><br><span class="line">                *nodex = *nodey;</span><br><span class="line">                *nodey = *P;</span><br><span class="line">                nodey-&gt;next = nodex-&gt;next;</span><br><span class="line">                nodex-&gt;next = P-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> P;       <span class="comment">//释放内存空间防止内存泄漏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">Students</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* head = <span class="keyword">new</span> Student;    <span class="comment">//创建头部节点；</span></span><br><span class="line">    Student* NowNode = head;        <span class="comment">//记录当前节点。</span></span><br><span class="line">    <span class="function">ifstream <span class="title">In</span><span class="params">(<span class="string">&quot;StudentScore.txt&quot;</span>, ios::in)</span></span>;  <span class="comment">//创建文件类对象</span></span><br><span class="line">    <span class="keyword">if</span> (!In.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The file open fail!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Student* node = head; !In.eof(); node = node-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        head-&gt;next;     <span class="comment">//测试用</span></span><br><span class="line">        Student* Node = <span class="keyword">new</span> Student;</span><br><span class="line">        In &gt;&gt; Node-&gt;Name;           <span class="comment">//输入学生信息；</span></span><br><span class="line">        In &gt;&gt; Node-&gt;Sex;</span><br><span class="line">        In &gt;&gt; Node-&gt;Number;</span><br><span class="line">        In &gt;&gt; Node-&gt;Class;</span><br><span class="line">        In &gt;&gt; Node-&gt;Chinese;</span><br><span class="line">        In &gt;&gt; Node-&gt;Math;</span><br><span class="line">        In &gt;&gt; Node-&gt;English;</span><br><span class="line">        In &gt;&gt; Node-&gt;Computer;</span><br><span class="line">        In &gt;&gt; Node-&gt;Average;</span><br><span class="line">        In &gt;&gt; Node-&gt;NumScore;</span><br><span class="line">        <span class="keyword">if</span> (Node-&gt;Name != <span class="string">&quot; &quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node-&gt;next = Node;     <span class="comment">//将新增节点接上链表；</span></span><br><span class="line">            NowNode = node-&gt;next;</span><br><span class="line">            Student::Num++;  <span class="comment">//每设置一个学生信息Num+1；</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    In.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> i = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">string</span> Opin = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Opin = head-&gt;Menu();    <span class="comment">//菜单</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; Opin &lt;&lt;endl;     测试用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Opin == <span class="string">&quot;1&quot;</span>)   <span class="comment">//增加学生信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;增加学生信息&quot; &lt;&lt; endl;测试用</span></span><br><span class="line">            NowNode = head-&gt;InStudent(NowNode);     <span class="comment">//增加学生信息后将NowNode节点更新；</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Opin == <span class="string">&quot;2&quot;</span>)                         <span class="comment">//输出学生信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Student::Sort(head);     <span class="comment">//调用静态成员函数Sort（）排序</span></span><br><span class="line">            <span class="keyword">for</span> (Student* node = head; node-&gt;next; node = node-&gt;next)   <span class="comment">//排好序后按链表顺序输出</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-------------------------------------------------------------------------------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                (node-&gt;next)-&gt;Display();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-------------------------------------------------------------------------------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;总计&quot;</span> &lt;&lt; Student::Num &lt;&lt; <span class="string">&quot;同学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Opin == <span class="string">&quot;3&quot;</span>)   <span class="comment">//查询学生信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            NowNode-&gt;Query(head);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Opin == <span class="string">&quot;4&quot;</span>) <span class="comment">//查询班级信息，有点复杂</span></span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;班级\t人数\t语文\t数学\t英语\t计算机&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">int</span> Class = <span class="number">0</span>;  <span class="comment">//初始化班级</span></span><br><span class="line">            <span class="keyword">double</span> Chinese = (head-&gt;next)-&gt;Chinese, Math = (head-&gt;next)-&gt;Math, English = (head-&gt;next)-&gt;English, Computer = (head-&gt;next)-&gt;Computer;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;    <span class="comment">//班级人数</span></span><br><span class="line">            <span class="keyword">int</span> N = <span class="number">0</span>;      <span class="comment">//班级数量</span></span><br><span class="line">            <span class="keyword">int</span> Classs[<span class="number">64</span>];  <span class="comment">//班级数组，储存各个班级；</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; <span class="number">64</span>; q++)</span><br><span class="line">                Classs[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;  <span class="comment">//检测Classs数组中是否收录该班级</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Student* Node = head-&gt;next; Node != <span class="literal">NULL</span>; Node = Node-&gt;next)   <span class="comment">//遍历链表</span></span><br><span class="line">            &#123;</span><br><span class="line">                p = <span class="number">0</span>;  <span class="comment">//将p值重新赋0；</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i++)    <span class="comment">//在Classs数组中查找当前学生班级</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Node-&gt;Class == Classs[i])   <span class="comment">//找到时p = 1跳过</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        p = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">0</span>) <span class="comment">//但没找到时p值为0在Classs中创建该班级并输入数据</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Class = Node-&gt;Class;</span><br><span class="line">                    Chinese = Node-&gt;Chinese;</span><br><span class="line">                    Math = Node-&gt;Math;</span><br><span class="line">                    English = Node-&gt;English;</span><br><span class="line">                    Computer = Node-&gt;Computer;</span><br><span class="line">                    num++;</span><br><span class="line">                    N++;</span><br><span class="line">                    Classs[N] = Class;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Student* node = Node-&gt;next; node; node = node-&gt;next)   <span class="comment">//遍历链表寻找所有该班级的学生并计算平均分</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (node-&gt;Class == Class)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Chinese = Chinese + node-&gt;Chinese;</span><br><span class="line">                            Math = Math + node-&gt;Math;</span><br><span class="line">                            English = English + node-&gt;English;</span><br><span class="line">                            Computer = Computer + node-&gt;Computer;</span><br><span class="line">                            num++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%2d\t%2d\t%.4f\t%.4f\t%.4f\t%.4f\n&quot;</span>, Class, num, Chinese / num, Math / num, English / num, Computer / num);</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Opin == <span class="string">&quot;5&quot;</span>)   <span class="comment">//修改学生信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            Student* Node = NowNode-&gt;Query(head);   <span class="comment">//先查找要修改的学生信息；</span></span><br><span class="line">            <span class="keyword">if</span> (Node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Node-&gt;Set(head);                        <span class="comment">//找到后调用该节点的Set（）对学生信息进行修改；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Opin == <span class="string">&quot;6&quot;</span>)   <span class="comment">//删除学生信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            Student* Node = head-&gt;Query(head);   <span class="comment">//先查找要删除的学生信息；</span></span><br><span class="line">            <span class="keyword">if</span> (Node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head-&gt;Del(Node);                        <span class="comment">//找到后调用该节点的Del（）对学生信息进行删除；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Opin == <span class="string">&quot;7&quot;</span>)   <span class="comment">//退出</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="literal">false</span>;          <span class="comment">//i = 1时跳出循环。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确数字！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fstream <span class="title">out</span><span class="params">(<span class="string">&quot;StudentScore.txt&quot;</span>, ios::out)</span></span>;  <span class="comment">//创建文件类对象,刷新文件信息；</span></span><br><span class="line">    <span class="keyword">if</span> (!out.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The file open fail!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Student* P = head-&gt;next; P != <span class="literal">NULL</span>; P = P-&gt;next)</span><br><span class="line">    out &lt;&lt; P-&gt;Name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Sex &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Class &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Chinese &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Math &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;English &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Computer &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;Average &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; P-&gt;NumScore &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    out.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/******以下内容为课外自己写着玩的******/</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Loading</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> loading[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        loading[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> full = <span class="literal">false</span>;</span><br><span class="line">    srand((<span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">    rand();</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>,z = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (full == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;********************************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   学生成绩管理系统                   *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   作者：李荣                         *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   学号：2019213037                   *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   班级：1921808                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                             载入中...*&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* [&quot;</span>;</span><br><span class="line">        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_GREEN);</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">50</span>; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (loading[x] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;/&quot;</span>;</span><br><span class="line">                z++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">               <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        y = (rand()%<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            loading[z + i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (loading[<span class="number">49</span>] == <span class="number">1</span>)</span><br><span class="line">            full = <span class="literal">true</span>;</span><br><span class="line">        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;] *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;********************************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Sleep(<span class="number">70</span>);<span class="comment">//延时</span></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;********************************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   学生成绩管理系统                   *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   作者：李荣                         *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   学号：2019213037                   *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                   班级：1921808                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                             载入成功 *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* [//////////////////////////////////////////////////] *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*                                                      *&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;********************************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> Name = <span class="string">&quot;adim&quot;</span>, name, Key = <span class="string">&quot;000000&quot;</span>,key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;********************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********学生管理系统**********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;********************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*  &quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*  账户：&quot;</span>; <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*  密码：&quot;</span>; <span class="built_in">cin</span> &gt;&gt; key;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*******************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name == Name &amp;&amp; Key == key)</span><br><span class="line">            &#123;   </span><br><span class="line">                    Loading();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;密码错误，请重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;密码错误次数过多&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;title 学生成绩管理（作者：冰箱的主人）φ(≧ω≦*)♪&quot;</span>);<span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">if</span> (Lock() == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Students();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;感谢您的使用，再见！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新日志：</p><p>2020.5.18：增加文件功能。因为课程原因，排序的指针指向问题依旧没能弄好。</p><p>2020.5.19：矫正排序指针问题。新增查询班级各科目平均分问题。</p><p><strong>（先写这么多吧更新溜了溜了。。。。。。-(´+ω+｀|））</strong></p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E9%80%89%E5%81%9A6%EF%BC%89/73891517_p0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++课程设计(必做)</title>
      <link href="2020/05/16/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/"/>
      <url>2020/05/16/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/</url>
      
        <content type="html"><![CDATA[<p>接着上篇,这篇是C++课程设计的必做题，现在我把已经写好的题目上传，因为是自己写的可能有些错误。</p><p>运行环境：<strong>Visual Studio 2019</strong></p><h1 id="1-函数重载"><a href="#1-函数重载" class="headerlink" title="1 函数重载"></a>1 <strong>函数重载</strong></h1><p><strong>定义重载函数max3用于计算三个数的最大值（参数类型分别为int和double）。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义重载函数max3用于计算三个数的最大值（参数类型分别为int和double）。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((x &gt; y ? x : y) &gt; z ? (x &gt; y ? x : y) : z) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max3</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((x &gt; y ? x : y) &gt; z ? (x &gt; y ? x : y) : z) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">max3(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">max3(<span class="number">2.71</span>, <span class="number">3.14</span>, <span class="number">1.68</span>);</span><br><span class="line">max3(<span class="number">2.71</span>, (<span class="keyword">double</span>)<span class="number">3</span>, (<span class="keyword">double</span>)<span class="number">1</span>);</span><br><span class="line">max3((<span class="keyword">double</span>)<span class="number">2</span>, <span class="number">3.14</span>, (<span class="keyword">double</span>)<span class="number">1</span>);</span><br><span class="line">max3((<span class="keyword">double</span>)<span class="number">2</span>, (<span class="keyword">double</span>)<span class="number">3</span>, <span class="number">1.68</span>);</span><br><span class="line">max3(<span class="number">2.71</span>, <span class="number">3.14</span>, (<span class="keyword">double</span>)<span class="number">1</span>);</span><br><span class="line">max3((<span class="keyword">double</span>)<span class="number">2</span>, <span class="number">3.14</span>, <span class="number">1.68</span>);</span><br><span class="line">max3(<span class="number">2.71</span>, (<span class="keyword">double</span>)<span class="number">3</span>, <span class="number">1.68</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/1.PNG"></p><h1 id="2-类的组合"><a href="#2-类的组合" class="headerlink" title="2 类的组合"></a>2 <strong>类的组合</strong></h1><p><strong>定义point类，数据成员包括x, y，成员函数包括构造函数，拷贝构造函数和析构函数，以及setx，getx，sety，gety四个属性函数。定义line类，端点由两个point类的对象组成，包括构造函数，析构函数以及计算线段长度的函数getlength。在main函数中，定义line的对象，并输出其长度。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义point类，数据成员包括x, y，成员函数包括构造函数，拷贝构造函数和析构函数，以及setx，getx，sety，gety四个属性函数。</span></span><br><span class="line"><span class="comment">//定义line类，端点由两个point类的对象组成，包括构造函数，析构函数以及计算线段长度的函数getlength。在main函数中，定义line的对象，并输出其长度。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">point(<span class="keyword">double</span> a = <span class="number">0</span>, <span class="keyword">double</span> b = <span class="number">0</span>) &#123; x = a; y = b; &#125;</span><br><span class="line">point(<span class="keyword">const</span> point&amp; q) &#123; x = q.x; y = q.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setx</span><span class="params">(<span class="keyword">double</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sety</span><span class="params">(<span class="keyword">double</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gety</span><span class="params">()</span></span>;</span><br><span class="line">~point() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del point ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point::setx</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">point::getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point::sety</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">point::gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">point a, b;</span><br><span class="line">line(point x, point y) </span><br><span class="line">&#123;</span><br><span class="line">a.setx(x.getx()); a.sety(x.gety()); b.setx(y.getx()); b.sety(y.gety()); </span><br><span class="line"><span class="comment">//cout &lt;&lt; a.getx() &lt;&lt; a.gety() &lt;&lt; b.getx() &lt;&lt; b.gety() &lt;&lt; endl; </span></span><br><span class="line">&#125;</span><br><span class="line">line(<span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> x3, <span class="keyword">double</span> x4) &#123; a.setx(x1); a.sety(x2); b.setx(x3); b.sety(x4); &#125;</span><br><span class="line">~line() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del line ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getlength</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">line::getlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x = a.getx() - b.getx();</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;ax = &quot; &lt;&lt; a.getx() &lt;&lt; &quot;bx = &quot; &lt;&lt; b.getx() &lt;&lt;&quot;x = &quot; &lt;&lt; x &lt;&lt; endl;//此行代码测试用</span></span><br><span class="line"><span class="keyword">double</span> y = a.gety() - b.gety();</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;ay = &quot; &lt;&lt; a.gety() &lt;&lt; &quot;by = &quot; &lt;&lt; b.gety() &lt;&lt; &quot;y = &quot; &lt;&lt; y &lt;&lt; endl;//此行代码测试用 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">point <span class="title">a</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">point <span class="title">b</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">point <span class="title">c</span><span class="params">(a)</span></span>;</span><br><span class="line"><span class="function">line <span class="title">L1</span><span class="params">(c, b)</span></span>;</span><br><span class="line"><span class="function">line <span class="title">L2</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;L1长度为：&quot;</span> &lt;&lt; L1.getlength() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;L2长度为：&quot;</span> &lt;&lt; L2.getlength() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/2.PNG"></p><h1 id="3-对象数组和函数"><a href="#3-对象数组和函数" class="headerlink" title="3 对象数组和函数"></a>3 对象数组和函数</h1><p>定义student类，数据成员包括姓名name和成绩score，成员函数包括构造函数，拷贝构造函数和析构函数。定义函数void highestscore(student s[]),输出分数最高的学生姓名和分数。在main函数中定义student s[N]，调用highestscore函数,输出分数最高的学生姓名和分数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 对象数组和函数</span></span><br><span class="line"><span class="comment">定义student类，数据成员包括姓名name和成绩score，成员函数包括构造函数，拷贝构造函数和析构函数。</span></span><br><span class="line"><span class="comment">定义函数void highestscore(student s[]),输出分数最高的学生姓名和分数。</span></span><br><span class="line"><span class="comment">在main函数中定义student s[N]，调用highestscore函数,输出分数最高的学生姓名和分数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> Name;</span><br><span class="line"><span class="keyword">double</span> Score;</span><br><span class="line">student() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入学生姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span> &gt;&gt; Name; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入学生成绩：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span> &gt;&gt; Score; &#125;</span><br><span class="line">student(<span class="built_in">string</span> name, <span class="keyword">double</span> score) &#123; Name = name; score = Score; &#125;</span><br><span class="line">student(<span class="keyword">const</span> student&amp; A) &#123; Name = A.Name; Score = A.Score; &#125;</span><br><span class="line">~student() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del student ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">highestscore</span><span class="params">(student s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">student <span class="title">Max</span><span class="params">(<span class="string">&quot;Max&quot;</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((s+i)-&gt;Score &gt;= Max.Score)</span><br><span class="line">&#123;</span><br><span class="line">Max.Name = (s + i)-&gt;Name;</span><br><span class="line">Max.Score = (s + i)-&gt;Score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最高分的同学为：&quot;</span> &lt;&lt; Max.Name &lt;&lt; <span class="string">&quot;分数为：&quot;</span> &lt;&lt; Max.Score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有多少学生？&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">student *s = <span class="keyword">new</span> student[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">s[i];</span><br><span class="line">&#125;</span><br><span class="line">highestscore(s);</span><br><span class="line"><span class="keyword">delete</span> []s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/3.PNG"></p><p>输入学生数量后依次输入姓名成绩，最后返回最高分的学生信息。</p><h1 id="4-静态数据成员"><a href="#4-静态数据成员" class="headerlink" title="4 静态数据成员"></a>4 <strong>静态数据成员</strong></h1><p><strong>设计一个书类，能够保存书名、定价，所有书的本数和总价。（将书名和定价设计为普通数据成员；将书的本数和总价设计为静态数据成员）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 静态数据成员</span></span><br><span class="line"><span class="comment">设计一个书类，能够保存书名、定价，所有书的本数和总价。（将书名和定价设计为普通数据成员；将书的本数和总价设计为静态数据成员）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> Name;</span><br><span class="line"><span class="keyword">double</span> Price;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> total;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num ;</span><br><span class="line">Book(<span class="built_in">string</span> name, <span class="keyword">double</span> price) &#123; Name = name; Price = price; num++; total = total + Price; &#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Name; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetPrice</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Price; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Book::num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> Book::total = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Book <span class="title">A</span><span class="params">(<span class="string">&quot;三体1_地球往事&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"><span class="function">Book <span class="title">B</span><span class="params">(<span class="string">&quot;三体2_黑暗森林&quot;</span>, <span class="number">36</span>)</span></span>;</span><br><span class="line"><span class="function">Book <span class="title">C</span><span class="params">(<span class="string">&quot;三体3_死神永生&quot;</span>, <span class="number">47</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;书名：&quot;</span> &lt;&lt; A.GetName() &lt;&lt; <span class="string">&quot;定价：&quot;</span> &lt;&lt; A.GetPrice() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;书名：&quot;</span> &lt;&lt; B.GetName() &lt;&lt; <span class="string">&quot;定价：&quot;</span> &lt;&lt; B.GetPrice() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;书名：&quot;</span> &lt;&lt; C.GetName() &lt;&lt; <span class="string">&quot;定价：&quot;</span> &lt;&lt; C.GetPrice() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;总共&quot;</span> &lt;&lt; C.num &lt;&lt; <span class="string">&quot;本，总计&quot;</span> &lt;&lt; C.total &lt;&lt; <span class="string">&quot;元&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/4.PNG"></p><p>这道题并没有让我们对book类进行操作只是让我们设计一个类，但我为检测该类的功能自行做了些许改动。</p><h1 id="5-动态内存分配"><a href="#5-动态内存分配" class="headerlink" title="5 动态内存分配"></a>5 <strong>动态内存分配</strong></h1><p><strong>定义point类，数据成员包括x,y，成员函数包括构造函数，拷贝构造函数和析构函数，以及setx，getx，sety，gety四个属性函数。在main函数中，用new和delete分配和释放N个point的数组。（N是const常量，N=10）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 动态内存分配</span></span><br><span class="line"><span class="comment">定义point类，数据成员包括x,y，成员函数包括构造函数，拷贝构造函数和析构函数，以及setx，getx，sety，gety四个属性函数。</span></span><br><span class="line"><span class="comment">在main函数中，用new和delete分配和释放N个point的数组。（N是const常量，N=10）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">point(<span class="keyword">double</span> a = <span class="number">0</span>, <span class="keyword">double</span> b = <span class="number">0</span>) &#123; x = a; y = b; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ok&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">point(<span class="keyword">const</span> point&amp; q) &#123; x = q.x; y = q.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setx</span><span class="params">(<span class="keyword">double</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sety</span><span class="params">(<span class="keyword">double</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gety</span><span class="params">()</span></span>;</span><br><span class="line">~point() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del point ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point::setx</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">point::getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point::sety</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">point::gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">point* P = <span class="keyword">new</span> point[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">P[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]P;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/5.PNG"></p><h1 id="6-类的继承"><a href="#6-类的继承" class="headerlink" title="6 类的继承"></a>6 <strong>类的继承</strong></h1><p><strong>定义一个point类，包含私有数据成员x，y，成员函数包括无参构造函数，带参构造函数，set和get属性函数。定义circle类，从point类公有派生，增加数据成员半径r，成员函数包括无参构造函数，带参构造函数，计算面积函数getarea。在main函数中定义一个circle的对象，并计算其面积。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 类的继承</span></span><br><span class="line"><span class="comment">定义一个point类，包含私有数据成员x，y，成员函数包括无参构造函数，带参构造函数，set和get属性函数。</span></span><br><span class="line"><span class="comment">定义circle类，从point类公有派生，增加数据成员半径r，成员函数包括无参构造函数，带参构造函数，计算面积函数getarea。</span></span><br><span class="line"><span class="comment">在main函数中定义一个circle的对象，并计算其面积。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">point() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">point(<span class="keyword">double</span> a, <span class="keyword">double</span> b) &#123; x = a; y = b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">point <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point::set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">point::get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">point Q = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circle</span>:</span><span class="keyword">public</span> point</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> R;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">circle() &#123; R = <span class="number">0</span>; &#125;</span><br><span class="line">circle(<span class="keyword">double</span> r, <span class="keyword">double</span> x, <span class="keyword">double</span> y) :point(x, y) &#123; R = r; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getarea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">circle::getarea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Pi * R * R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">circle <span class="title">O</span><span class="params">(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;面积为：&quot;</span> &lt;&lt; O.getarea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/6.PNG"></p><h1 id="7-虚基类"><a href="#7-虚基类" class="headerlink" title="7 虚基类"></a>7 <strong>虚基类</strong></h1><p><strong>定义vehicle类，数据成员包括私有的weight，公有的构造函数，析构函数和输出函数dispaly；从vehicle类公有派生car类，增加数据成员载人数personnum，公有的构造函数,析构函数和输出display；从vehicle类公有派生truck类，增加数据成员载货量laod,公有的构造函数，析构函数和输出函数display；从car类和truck类共同公有派生出pickup类，包括公有的构造函数和输出函数。在main函数中，定义pickup类对象，并输出其基本信息。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 虚基类</span></span><br><span class="line"><span class="comment">定义vehicle类，数据成员包括私有的weight，公有的构造函数，析构函数和输出函数dispaly；</span></span><br><span class="line"><span class="comment">从vehicle类公有派生car类，增加数据成员载人数personnum，公有的构造函数,析构函数和输出display；</span></span><br><span class="line"><span class="comment">从vehicle类公有派生truck类，增加数据成员载货量laod,公有的构造函数，析构函数和输出函数display；</span></span><br><span class="line"><span class="comment">从car类和truck类共同公有派生出pickup类，包括公有的构造函数和输出函数。在main函数中，定义pickup类对象，并输出其基本信息。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vehicle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">vehicle(<span class="keyword">double</span> x) &#123; weight = x; &#125;</span><br><span class="line">~vehicle() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del vehicle ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetWeight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vehicle::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;重&quot;</span> &lt;&lt; weight &lt;&lt;<span class="string">&quot; 吨 &quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">vehicle::GetWeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> vehicle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> personnum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">car(<span class="keyword">int</span> x, <span class="keyword">double</span> y):vehicle(y)&#123; personnum = x; &#125;</span><br><span class="line">~car() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del car ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetPer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">car::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;重&quot;</span> &lt;&lt; GetWeight() &lt;&lt; <span class="string">&quot; 吨 &quot;</span> &lt;&lt; <span class="string">&quot;载重&quot;</span> &lt;&lt; personnum &lt;&lt; <span class="string">&quot; 人 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">car::GetPer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> personnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">truck</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> vehicle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> laod;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">truck(<span class="keyword">int</span> x, <span class="keyword">double</span> y) :vehicle(y) &#123; laod = x; &#125;</span><br><span class="line">~truck() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del truck ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLoad</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">truck::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;重&quot;</span> &lt;&lt; GetWeight() &lt;&lt; <span class="string">&quot; 吨 &quot;</span> &lt;&lt; <span class="string">&quot;载重&quot;</span> &lt;&lt; laod &lt;&lt; <span class="string">&quot; 吨 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">truck::GetLoad</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> laod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pickup</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> car, <span class="keyword">virtual</span> <span class="keyword">public</span> truck</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: pickup(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">double</span> z) :car(x, z), truck(y, z), vehicle(z) &#123; ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pickup::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;重&quot;</span> &lt;&lt; GetWeight() &lt;&lt; <span class="string">&quot; 吨 &quot;</span> &lt;&lt; <span class="string">&quot;载重&quot;</span> &lt;&lt; GetLoad() &lt;&lt; <span class="string">&quot; 吨 &quot;</span> &lt;&lt; <span class="string">&quot;载重&quot;</span> &lt;&lt; GetPer() &lt;&lt; <span class="string">&quot; 人 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">pickup <span class="title">P</span><span class="params">(<span class="number">4</span>, <span class="number">10</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">P.display();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/7.PNG"></p><h1 id="8-运算符重载，友元函数和this指针"><a href="#8-运算符重载，友元函数和this指针" class="headerlink" title="8 运算符重载，友元函数和this指针"></a>8 <strong>运算符重载，友元函数和this指针</strong></h1><p><strong>定义一个计数器类counter，具备自增，自减功能（前后缀）；输入输出&gt;&gt;,&lt;&lt;功能。在main函数里测试该类。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个计数器类counter，具备自增，自减功能（前后缀）；输入输出&gt;&gt;,&lt;&lt;功能。在main函数里测试该类。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">counter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> Date;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">counter() &#123; Date = <span class="number">0</span>; &#125;</span><br><span class="line">counter(<span class="keyword">int</span> x) &#123; Date = x; &#125;</span><br><span class="line">counter <span class="keyword">operator</span>++();</span><br><span class="line">counter <span class="keyword">operator</span>--();</span><br><span class="line">counter <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">counter <span class="keyword">operator</span>--(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, counter&amp; P);</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> counter&amp; P);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">counter counter::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Date++;</span><br><span class="line"><span class="keyword">return</span>  *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">counter counter::<span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Date--;</span><br><span class="line"><span class="keyword">return</span>  *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">counter counter::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">counter P = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;Date++;</span><br><span class="line"><span class="keyword">return</span>  P;</span><br><span class="line">&#125;</span><br><span class="line">counter counter::<span class="keyword">operator</span>--(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">counter P = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;Date--;</span><br><span class="line"><span class="keyword">return</span>  P;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, counter&amp; P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P.Date;</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> counter&amp; P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P.Date;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">counter <span class="title">Q</span><span class="params">((<span class="keyword">int</span>)<span class="number">7</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">counter P = Q--;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P &lt;&lt; Q &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">P = Q++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P &lt;&lt; Q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">++Q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">--Q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/8.PNG"></p><p>最后输入9返回9.</p><h1 id="9-虚函数和抽象类"><a href="#9-虚函数和抽象类" class="headerlink" title="9 虚函数和抽象类"></a>9 <strong>虚函数和抽象类</strong></h1><p><strong>定义一个抽象类shape，包括公有的计算面积area函数，计算体积volume函数，输出基本信息函数printinfo（三个函数均为纯虚函数）。从shape公有派生point类，增加私有数据成员x,y坐标，以及构造函数，析构函数。从point公有派生circle类，增加私有数据成员半径r，以及构造函数，析构函数。从circle公有派生cylinder类，增加私有数据成员高度h，以及构造函数，析构函数。（在定义三个派生类的过程中，自己考虑需要重定义哪个虚函数）。在main函数中，定义shape类的指针，指向派生类的对象，输出三类对象的基本信息，面积，体积；（将shape指针改为引用再尝试）。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">9 虚函数和抽象类</span></span><br><span class="line"><span class="comment">定义一个抽象类shape，包括公有的计算面积area函数，计算体积volume函数，输出基本信息函数printinfo（三个函数均为纯虚函数）。</span></span><br><span class="line"><span class="comment">从shape公有派生point类，增加私有数据成员x,y坐标，以及构造函数，析构函数。从point公有派生circle类，增加私有数据成员半径r，以及构造函数，析构函数。</span></span><br><span class="line"><span class="comment">从circle公有派生cylinder类，增加私有数据成员高度h，以及构造函数，析构函数。（在定义三个派生类的过程中，自己考虑需要重定义哪个虚函数）。</span></span><br><span class="line"><span class="comment">在main函数中，定义shape类的指针，指向派生类的对象，输出三类对象的基本信息，面积，体积；（将shape指针改为引用再尝试）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printinfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span> :</span><span class="keyword">public</span> shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">point() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">point(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; x = a; y = b; &#125;</span><br><span class="line">~point() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del point ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printinfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point::printinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;坐标&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circle</span> :</span><span class="keyword">public</span> point</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">circle() &#123; r = <span class="number">0</span>; &#125;</span><br><span class="line">circle(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z) :point(x, y) &#123; r = z; &#125;</span><br><span class="line">~circle() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del circle ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Pi * r * r; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printinfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">circle::printinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">point::printinfo();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;半径为&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;面积为&quot;</span> &lt;&lt; area() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cylinder</span> :</span><span class="keyword">public</span> circle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cylinder() &#123; h = <span class="number">0</span>; &#125;</span><br><span class="line">cylinder(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> l) :circle(x, y, z) &#123; h = l; &#125;</span><br><span class="line">~cylinder() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del cylinder ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> h*area(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printinfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cylinder::printinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">circle::printinfo();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;高度为&quot;</span> &lt;&lt; h &lt;&lt; <span class="string">&quot;体积为&quot;</span> &lt;&lt; volume() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">point <span class="title">P</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">P.printinfo();</span><br><span class="line"><span class="function">circle <span class="title">O</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">O.printinfo();</span><br><span class="line"><span class="function">cylinder <span class="title">T</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">T.printinfo();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><h1 id="10-模板"><a href="#10-模板" class="headerlink" title="10 模板"></a>10 <strong>模板</strong></h1><p><strong>设计一个堆栈的类模板Stack，在模板中用类型参数T表示栈中存放的数据，用非类型参数MAXSIZE代表栈的大小。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size; <span class="comment">//入栈数量</span></span><br><span class="line">    T head[MAXSIZE]; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Stack()&#123; size = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(T a)</span></span>; <span class="comment">//入栈</span></span><br><span class="line">    <span class="function">T <span class="title">StackPop</span><span class="params">()</span></span>;  <span class="comment">//出栈</span></span><br><span class="line">    <span class="function">T <span class="title">StackTop</span><span class="params">()</span></span>; <span class="comment">//获取栈顶元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintStack</span><span class="params">()</span></span>; <span class="comment">//打印栈</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Counts</span><span class="params">()</span></span>; <span class="comment">//获取栈内元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line"><span class="keyword">void</span> Stack&lt;T, MAXSIZE&gt;::StackPush(T a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (IsEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        head[size] = a;</span><br><span class="line">         size++;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line">T Stack&lt;T, MAXSIZE&gt;::StackPop()</span><br><span class="line">&#123;</span><br><span class="line">    T a = head[size<span class="number">-1</span>];</span><br><span class="line">    head[size<span class="number">-1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line">T Stack&lt;T, MAXSIZE&gt;::StackTop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> head[size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line"><span class="keyword">void</span> Stack&lt;T, MAXSIZE&gt;::PrintStack()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; head[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line"><span class="keyword">int</span> Stack&lt;T, MAXSIZE&gt;::Counts()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> MAXSIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> Stack&lt;T, MAXSIZE&gt;::IsEmpty()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &gt;= MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack&lt;<span class="keyword">int</span>, <span class="number">5</span>&gt;A;</span><br><span class="line">    Stack&lt;<span class="keyword">char</span>, <span class="number">5</span>&gt;B;</span><br><span class="line">    A.StackPush(<span class="number">648</span>);</span><br><span class="line">    A.StackPush(<span class="number">324</span>);</span><br><span class="line">    A.StackPush(<span class="number">128</span>);</span><br><span class="line">    A.StackPush(<span class="number">64</span>);</span><br><span class="line">    A.StackPush(<span class="number">32</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时栈A内有&quot;</span> &lt;&lt; A.Counts() &lt;&lt; <span class="string">&quot;个元素&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;栈A内的数据为：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    A.PrintStack();</span><br><span class="line">    <span class="keyword">int</span> a = A.StackPop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时栈A内有&quot;</span> &lt;&lt; A.Counts() &lt;&lt; <span class="string">&quot;个元素&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时栈内的数据为：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    A.PrintStack();</span><br><span class="line">    B.StackPush(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    B.StackPush(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    B.StackPush(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    B.StackPush(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">    B.StackPush(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时栈B内有&quot;</span> &lt;&lt; B.Counts() &lt;&lt; <span class="string">&quot;个元素&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;栈B内的数据为：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    B.PrintStack();</span><br><span class="line">    <span class="keyword">char</span> b = B.StackPop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时栈B内有&quot;</span> &lt;&lt; B.Counts() &lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时栈内的数据为：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    B.PrintStack();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/10.PNG"></p><h1 id="11-文件读写"><a href="#11-文件读写" class="headerlink" title="11 文件读写"></a>11 <strong>文件读写</strong></h1><p><strong>定义学生类数组，有N个人（N=5），包括姓名和语数外三名课的成绩，通过重载&lt;&lt;和&gt;&gt;运算符实现学生数组的文件读写。（姓名用string name;）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11 文件读写</span></span><br><span class="line"><span class="comment">定义学生类数组，有N个人（N=5），包括姓名和语数外三名课的成绩，通过重载&lt;&lt;和&gt;&gt;运算符实现学生数组的文件读写。</span></span><br><span class="line"><span class="comment">（姓名用string name;）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> Name;</span><br><span class="line"><span class="keyword">int</span> Chinese;</span><br><span class="line"><span class="keyword">int</span> Math;</span><br><span class="line"><span class="keyword">int</span> English;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Name; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetChinese</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Chinese; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMath</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Math; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetEnglish</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> English; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;语文成绩：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Chinese;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数学成绩：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Math;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;英语成绩：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; English;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student* P = <span class="keyword">new</span> Student[N];</span><br><span class="line">ofstream of;</span><br><span class="line">of.open(<span class="string">&quot;Hello.txt&quot;</span>, ios::out);</span><br><span class="line"><span class="keyword">if</span> (of.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">of &lt;&lt; P[i].GetName() &lt;&lt; P[i].GetChinese() &lt;&lt; P[i].GetMath() &lt;&lt; P[i].GetEnglish() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">of.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/11.PNG"></p><p><img src="/.com//../../../img/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E5%BF%85%E5%81%9A)/12.PNG"></p><p><strong>（先写这么多吧不定期更新溜了溜了。。。。。。-(´+ω+｀|））</strong></p><p><img src="https://s1.ax1x.com/2020/05/17/YRhYrj.jpg"></p><p>​                                                                                                                                            2020 年 5月 16 日</p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++/课程设计题目</title>
      <link href="2020/05/15/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/"/>
      <url>2020/05/15/C-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>今天刚回到寝室老师就把课程设计的题目发下来了，在下面：</p><p>11道必做</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 函数重载</span><br><span class="line">定义重载函数max3用于计算三个数的最大值（参数类型分别为<span class="keyword">int</span>和<span class="keyword">double</span>）。</span><br><span class="line"><span class="number">2</span> 类的组合</span><br><span class="line">定义point类，数据成员包括x,y，成员函数包括构造函数，拷贝构造函数和析构函数，以及setx，getx，sety，gety四个属性函数。定义line类，端点由两个point类的对象组成，包括构造函数，析构函数以及计算线段长度的函数getlength。在main函数中，定义line的对象，并输出其长度。</span><br><span class="line"><span class="number">3</span> 对象数组和函数</span><br><span class="line">定义student类，数据成员包括姓名name和成绩score，成员函数包括构造函数，拷贝构造函数和析构函数。定义函数void highestscore(student s[]),输出分数最高的学生姓名和分数。在main函数中定义student s[N]，调用highestscore函数,输出分数最高的学生姓名和分数。</span><br><span class="line"><span class="number">4</span> 静态数据成员</span><br><span class="line">设计一个书类，能够保存书名、定价，所有书的本数和总价。（将书名和定价设计为普通数据成员；将书的本数和总价设计为静态数据成员）</span><br><span class="line"><span class="number">5</span> 动态内存分配</span><br><span class="line">定义point类，数据成员包括x,y，成员函数包括构造函数，拷贝构造函数和析构函数，以及setx，getx，sety，gety四个属性函数。在main函数中，用<span class="keyword">new</span>和<span class="keyword">delete</span>分配和释放N个point的数组。（N是<span class="keyword">const</span>常量，N=<span class="number">10</span>）</span><br><span class="line"><span class="number">6</span> 类的继承</span><br><span class="line">定义一个point类，包含私有数据成员x，y，成员函数包括无参构造函数，带参构造函数，<span class="built_in">set</span>和get属性函数。定义circle类，从point类公有派生，增加数据成员半径r，成员函数包括无参构造函数，带参构造函数，计算面积函数getarea。在main函数中定义一个circle的对象，并计算其面积。</span><br><span class="line"><span class="number">7</span> 虚基类</span><br><span class="line">定义vehicle类，数据成员包括私有的weight，公有的构造函数，析构函数和输出函数dispaly；从vehicle类公有派生car类，增加数据成员载人数personnum，公有的构造函数,析构函数和输出display；从vehicle类公有派生truck类，增加数据成员载货量laod,公有的构造函数，析构函数和输出函数display；从car类和truck类共同公有派生出pickup类，包括公有的构造函数和输出函数。在main函数中，定义pickup类对象，并输出其基本信息。</span><br><span class="line"><span class="number">8</span> 运算符重载，友元函数和<span class="keyword">this</span>指针</span><br><span class="line">定义一个计数器类counter，具备自增，自减功能（前后缀）；输入输出&gt;&gt;,&lt;&lt;功能。在main函数里测试该类。</span><br><span class="line"><span class="number">9</span> 虚函数和抽象类</span><br><span class="line">定义一个抽象类shape，包括公有的计算面积area函数，计算体积volume函数，输出基本信息函数printinfo（三个函数均为纯虚函数）。从shape公有派生point类，增加私有数据成员x,y坐标，以及构造函数，析构函数。从point公有派生circle类，增加私有数据成员半径r，以及构造函数，析构函数。从circle公有派生cylinder类，增加私有数据成员高度h，以及构造函数，析构函数。（在定义三个派生类的过程中，自己考虑需要重定义哪个虚函数）。在main函数中，定义shape类的指针，指向派生类的对象，输出三类对象的基本信息，面积，体积；（将shape指针改为引用再尝试）。</span><br><span class="line"><span class="number">10</span> 模板</span><br><span class="line">设计一个堆栈的类模板Stack，在模板中用类型参数T表示栈中存放的数据，用非类型参数MAXSIZE代表栈的大小。</span><br><span class="line"><span class="number">11</span> 文件读写</span><br><span class="line">定义学生类数组，有N个人（N=<span class="number">5</span>），包括姓名和语数外三名课的成绩，通过重载&lt;&lt;和&gt;&gt;运算符实现学生数组的文件读写。（姓名用<span class="built_in">string</span> name;）</span><br></pre></td></tr></table></figure><p>还有几道选做：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>通信录的设计</span><br><span class="line">基本要求：</span><br><span class="line">定义人员（person）类，其中至少包括姓名、性别、电话、地址、邮政编码、邮箱、QQ号和类别（例如：同学、朋友等）。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入功能：输入人员信息，并保存到文件中；</span><br><span class="line">       <span class="number">3</span>、查询功能：</span><br><span class="line">           <span class="number">1</span>）能够根据姓名、电话精确查询人员信息；</span><br><span class="line">           <span class="number">2</span>）能够根据地址进行模糊查询人员信息；</span><br><span class="line">       <span class="number">3</span>）根据人员类别查询人员信息</span><br><span class="line">       <span class="number">4</span>、根据姓名对人员信息排序输出</span><br><span class="line">       <span class="number">5</span>、能根据姓名、电话修改人员信息</span><br><span class="line">       <span class="number">6</span>、能根据姓名、电话删除人员信息</span><br><span class="line"><span class="number">2</span>职工工资管理</span><br><span class="line">基本要求：</span><br><span class="line">定义职工（employee ）类，其中至少包括姓名、性别、工号、电话、所在科室和工资。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入功能：输入职工信息，并保存到文件中；</span><br><span class="line">       <span class="number">3</span>、查询功能：</span><br><span class="line">           <span class="number">1</span>）能够根据工号精确查询职工信息；</span><br><span class="line">           <span class="number">2</span>）能够根据姓名、科室查询职工信息</span><br><span class="line">       <span class="number">3</span>）分科室进行工资统计，计算各科室的平均工资</span><br><span class="line">       <span class="number">4</span>、根据职工的工资排序输出</span><br><span class="line">       <span class="number">5</span>、根据工号修改职工信息</span><br><span class="line">       <span class="number">6</span>、根据工号删除职工信息</span><br><span class="line"><span class="number">3</span>公司员工管理系统</span><br><span class="line">基本要求：</span><br><span class="line">设计一个虚基类Staff（员工），包括编号、姓名和年龄保护数据成员以及相关的成员函数；由Staff派生出工程师类Engineer包含专业和职称保护数据成员以及相关的成员函数，再由Staff派生出领导类Leader，包括职务和部门保护数据成员以及相关的成员函数；然后由Engineer和Leader类派生出主任工程师类Chairman。</span><br><span class="line">功能要求：</span><br><span class="line"><span class="number">1</span>、增加员工数据信息</span><br><span class="line"><span class="number">2</span>、更新员工数据信息</span><br><span class="line"><span class="number">3</span>、查询员工数据信息</span><br><span class="line"><span class="number">4</span>、删除员工数据信息</span><br><span class="line"><span class="number">5</span>、良好的人际交互界面、方便操作</span><br><span class="line"><span class="number">4</span>三角形的种类与面积</span><br><span class="line">基本要求：</span><br><span class="line">定义点（point）类，包含点的坐标x和y；通过继承点类派生出线段（line）类；通过线段（line）类的组合定义三角形（triangle ）类。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入三角形的三个顶点坐标；</span><br><span class="line">       <span class="number">3</span>、判断三角形的种类（一般三角形、等腰三角形、等边三角形、直角三角形和不能构成三角形）；</span><br><span class="line">       <span class="number">4</span>、计算并输出三角形的面积 。      </span><br><span class="line"><span class="number">5</span>字符串类的设计</span><br><span class="line">基本要求：</span><br><span class="line">定义点字符串（<span class="built_in">string</span>）类，包含存放字符串的字符数组和字符串中字符的个数。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、字符串的输入与赋值;</span><br><span class="line">       <span class="number">3</span>、字符串的运算，包括：</span><br><span class="line">            <span class="number">1</span>）连接     <span class="number">2</span>）复制       <span class="number">3</span>）查找  </span><br><span class="line">            <span class="number">4</span>）交换     <span class="number">5</span>）求子串    <span class="number">6</span>）比较</span><br><span class="line">       <span class="number">4</span>、字符串的输出</span><br><span class="line"><span class="number">6</span>学生成绩管理</span><br><span class="line">基本要求：</span><br><span class="line">定义学生（student）类，其中至少包括姓名、性别、学号、班级和四门功课的成绩。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入功能：输入学生信息，并保存到文件中；</span><br><span class="line">       <span class="number">3</span>、计算每个学生的总分与平均分并排序</span><br><span class="line">       <span class="number">4</span>、能根据学号修改学生信息</span><br><span class="line">       <span class="number">5</span>、能根据学号删除学生信息</span><br><span class="line">       <span class="number">6</span>、查询功能：</span><br><span class="line">            <span class="number">1</span>）能够根据学号查询学生信息；</span><br><span class="line">            <span class="number">2</span>）能够根据姓名、班级查询学生信息</span><br><span class="line">        <span class="number">3</span>）统计学生成绩，按照班级和科目计算平均分。</span><br><span class="line"><span class="number">7</span>几何体的表面积与体积</span><br><span class="line">基本要求：</span><br><span class="line">定义一个抽象类形状（shape），包含输入基本图形的信息函数input()、显示基本图形信息函数disp()、计算表面积的函数area()、计算体积的函数volume()，它们均为纯虚函数。通过继承形状类派生出球体类、正方体类、长方体类、圆柱体类。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入各种形状信息；</span><br><span class="line">       <span class="number">3</span>、显示各种形状信息；</span><br><span class="line">       <span class="number">4</span>、计算各种形状的表面积；</span><br><span class="line">       <span class="number">5</span>、计算各种形状的体积；      </span><br><span class="line"><span class="number">8</span>学生信息管理</span><br><span class="line">基本要求：</span><br><span class="line">定义学生（student）类，其中至少包括姓名、性别、学号、班级和联系电话。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入功能：输入学生信息，并保存到文件中；</span><br><span class="line">       <span class="number">3</span>、能按照学生的学号排序</span><br><span class="line">       <span class="number">4</span>、能根据学号修改学生信息</span><br><span class="line">       <span class="number">5</span>、能根据学号删除学生信息</span><br><span class="line">       <span class="number">6</span>、查询功能：</span><br><span class="line">            <span class="number">1</span>）能够根据学号查询学生信息；</span><br><span class="line">            <span class="number">2</span>）能够根据姓名、学号、班级等查询学生信息</span><br><span class="line">        <span class="number">3</span>）按照班级统计学生人数。</span><br><span class="line"><span class="number">9</span>教职工信息管理</span><br><span class="line">基本要求：</span><br><span class="line">定义职工（employee ）类，其中至少包括姓名、性别、工号、电话、所在系部和职称。</span><br><span class="line">功能要求：</span><br><span class="line">       <span class="number">1</span>、设计菜单实现功能选择；   </span><br><span class="line">       <span class="number">2</span>、输入功能：输入职工信息，并保存到文件中；</span><br><span class="line">       <span class="number">3</span>、查询功能：</span><br><span class="line">           <span class="number">1</span>）能够根据工号精确查询职工信息；</span><br><span class="line">           <span class="number">2</span>）能够根据姓名、科室查询职工信息</span><br><span class="line">       <span class="number">3</span>）分系部进行职称统计，计算各职称的人数</span><br><span class="line">       <span class="number">4</span>、根据职工的职称排序输出</span><br><span class="line">       <span class="number">5</span>、根据工号修改职工信息</span><br><span class="line">       <span class="number">6</span>、根据工号删除职工信息</span><br><span class="line"><span class="number">10</span>复数计算器</span><br><span class="line">基本要求：</span><br><span class="line">定义复数（<span class="built_in">complex</span> ）类，其中至少包括实部和虚部，对复数类实现尽可能丰富的运算。</span><br><span class="line">功能要求：</span><br><span class="line"><span class="number">1</span>）建立复数类</span><br><span class="line"><span class="number">2</span>）复数信息的初始化</span><br><span class="line"><span class="number">3</span>）复数信息的输出</span><br><span class="line"><span class="number">4</span>）将复数信息保存为文件</span><br><span class="line"><span class="number">5</span>）求复数的绝对值</span><br><span class="line"><span class="number">6</span>）实现复数的加、减、乘、除、乘方、自加、自减等运算</span><br></pre></td></tr></table></figure><p>除了前面11道必做以外我还要选做第6个学生成绩管理（虽然说是选做但好像不是我选。。。），我会尽快做好自己的部分（11道必做和第6个学生成绩管理），如果时间有多就看看其他的吧！</p><p>呐，就这样。</p><p><img src="https://s1.ax1x.com/2020/05/15/YsBMu9.jpg" alt="top"></p><p>​                                                                                                                                                                2020 年 5 月 15日</p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 课程设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="2020/05/05/%E9%93%BE%E8%A1%A8/"/>
      <url>2020/05/05/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="C-链表"><a href="#C-链表" class="headerlink" title="C++/链表"></a>C++/链表</h1><p>链表是一种数据储存的格式，是指针的基础应用。是一种物理储存上非连续，非顺序的存储结构，链表中的逻辑顺序为链表中指针的连接顺序。链表由许多个节点连接而成，每个节点中除了存有数据外还保存下一个节点的位置。我们分别称之为数据域和指针域。</p><ol><li>本身的信息，称为“数据域”；</li><li>指向直接后继的指针，称为“指针域”。</li></ol><p>n个结点通过指针域相互链接，组成一个链表。</p><p><img src="/.com//%E9%93%BE%E8%A1%A8/1.png"></p><p><img src="/.com//%E9%93%BE%E8%A1%A8/2.png"></p><p>一般我们用结构体或者类来定义节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">struct</span> 节点名//也可用<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> Name;<span class="comment">//该节点的数据</span></span><br><span class="line">    <span class="keyword">int</span> Namber;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span><span class="comment">//用来储存下一节点的位置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>头结点：有时，在链表的第一个结点之前会额外增设一个结点，结点的数据域一般不存放数据（有些情况下也可以存放链表的长度等信息），此结点被称为头结点。若头结点的指针域为空（NULL），表明链表是空表。头结点对于链表来说，不是必须的，在处理某些问题时，给链表添加头结点会使问题变得简单。</p><p>一般情况下，链表只能通过头结点或者头指针进行访问，所以实现查找某结点最常用的方法就是对链表中的结点进行逐个遍历。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>我们创建一个简单的链表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> Name;<span class="comment">//每一结点包含Name和Namber</span></span><br><span class="line">    <span class="keyword">int</span> Namber;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span><span class="comment">//下一节点的位置</span></span><br><span class="line">&#125;Student;<span class="comment">//转换名字</span></span><br><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">CreatList</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//创建链表的函数，i表示创建的链表中节点数量。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* head = <span class="keyword">new</span> Student;<span class="comment">//创yi建头节点，头节点不放东西。</span></span><br><span class="line">    Student* pre = head;<span class="comment">//当前处理pre</span></span><br><span class="line">    <span class="keyword">for</span> (i; i--; i &gt;= <span class="number">0</span>)<span class="comment">//循环，不断创建节点。</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student* p = <span class="keyword">new</span> Student;<span class="comment">//创建下一节点。</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生姓名：&quot;</span>;<span class="comment">//输入数据。</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;Name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生学号：&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;Namber;</span><br><span class="line">        pre-&gt;next = p;<span class="comment">//把下一节点位置给当前节点的“.next”</span></span><br><span class="line">        pre = p;<span class="comment">//将下一节点位置给pre</span></span><br><span class="line">        pre-&gt;next = <span class="literal">NULL</span>;<span class="comment">//切断链表。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(Student* head)</span><span class="comment">//输出链表中数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生姓名：&quot;</span> &lt;&lt; head-&gt;Name &lt;&lt; <span class="string">&quot;学生学号：&quot;</span> &lt;&lt; head-&gt;Namber &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(Student* head)</span><span class="comment">//删除链表中数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* pre = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> head;</span><br><span class="line">        head = pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> pre;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del ok!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    Student* head = CreatList(n);</span><br><span class="line">    Display(head);</span><br><span class="line">    Del(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个简单的链表，该链表每一节点存有名字“Name”和学号“Namber”，同时还存有下一个节点的数据“.next”</p><p>有些东西待补充。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                2020年 5月 5日</p><p><img src="https://s1.ax1x.com/2020/05/05/YFdwrV.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++/模板</title>
      <link href="2020/04/27/C-%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/04/27/C-%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="C-模板"><a href="#C-模板" class="headerlink" title="C++/模板"></a>C++/模板</h1><p>模版是C++里面一个很重要的机制，它能帮助我们实现参数化多态。在C++中我们可以设计出一个函数或者是类的模板。当我们要使一些与类型无关的变量进行计算时或者是实例化几个仅仅是成员变量不同的对象时，我们即可直接套用模板生成。</p><p>C++中模板通常有两种形式：<strong>函数模板，类模板</strong></p><p>函数模板针对仅<strong>参数类型</strong>不同的<strong>函数</strong>；</p><p>类模板针对仅<strong>数据成员</strong>和<strong>成员函数类型</strong>不同的类。</p><p><strong>注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中声明或定义一个模板。</strong></p><h1 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>模板函数的定义一般形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> 形参名, <span class="keyword">typename</span> 形参名，......&gt;</span><br><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中template和class是关键字，class可以用typename 关键字代替，在这里typename 和class没区别，&lt;&gt;括号中的参数叫模板形参，模板形参和函数形参很相像，模板形参不能为空。一但声明了模板函数就可以用模板函数的形参名声明类中的成员变量和成员函数，即可以在该函数中使用内置类型的地方都可以使用模板形参名。模板形参需要调用该模板函数时提供的模板实参来初始化，一旦编译器确定了实际的模板实参类型就称他实例化了函数模板的一个实例。</p><p>下面我们来看一个很简单的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">float</span> c, d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">Swap(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c &gt;&gt; d;</span><br><span class="line">Swap(c, d);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(c, d) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个模板函数实现任意两个同类型变量交换，第二个模板函数表示将两个同类型中较大的那个以“int”类型输出。我们输入3和4回车后输入3.14和2.71。结果如下：</p><p><img src="/.com//../../../img/C-%E6%A8%A1%E6%9D%BF/000.PNG" alt="top"></p><p>注意：</p><ol><li><p>函数模板并不是一个函数，它只相当于一个模具，定义一次即可使用不同类型的参数来调用该函数，这样做可以减小代码的书写，提高代码的复用性。</p></li><li><p>普通函数的优先级要高于模板函数，当编译器能够匹配到普通函数时不会调用模板函数。</p></li></ol><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>函数模板在被调用的时候需要被实例化成模板函数，然后调用模板函数。函数模板的实例化分为隐式实例化，显示实例化和显示具体化。</p><h3 id="隐式实例化"><a href="#隐式实例化" class="headerlink" title="隐式实例化"></a>隐式实例化</h3><p>如上述的例子，直接调用函数模板时编译器在找不到符合条件的普通函数的情况下会在同名函数模板中自动调用函数实参对号入座进行实参推演进而实例化模板函数。这种由编译器自行将函数模板实例化的方式我们称之为隐式实例化。</p><h3 id="显示实例化"><a href="#显示实例化" class="headerlink" title="显示实例化"></a>显示实例化</h3><p>显示实例化可以让我们在函数模板实例化时人为的指定函数模板的模板形参，从而减少编译器在实参推演时系统资源的消耗。我们只需在调用时在函数名后加上模板形参名即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名&lt;指定类型名&gt;（模板形参）</span><br></pre></td></tr></table></figure><p>例如上面的例子中我们可以对程序稍作修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</span><br><span class="line"><span class="function">T3 <span class="title">Max</span><span class="params">(T1&amp; a, T2&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">float</span> c, d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">Swap(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c &gt;&gt; d;</span><br><span class="line">Swap(c, d);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max&lt;<span class="keyword">float</span>&gt;(c, d) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max&lt;<span class="keyword">int</span>,<span class="keyword">float</span>, <span class="keyword">double</span>&gt;(a, c) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//&lt;&gt;中内容与上方定义时&lt;&gt;里面一致.</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样的，输入2和3后回车输入3.14和2.17结果如下：</p><p><img src="/.com//C-%E6%A8%A1%E6%9D%BF/002.PNG"></p><h3 id="显式具体化"><a href="#显式具体化" class="headerlink" title="显式具体化"></a>显式具体化</h3><p>对于某些特殊类型可能我们用不了模板函数，这时我们可以用显示具体化重新定义模板。格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> 函数返回类型 函数模板名&lt;实际类型列表&gt;（函数参数列表）</span><br><span class="line">&#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板的显式具体化有点类似类中的函数重写，但函数重写是在类层次结构中不同的作用域，而模板显示具体化是在同一作用域中。如果函数有多个原型，则编译器在选择函数调用时，非模板版本将优先于显示具体化和模板版本，显式具体化将优先于模板版本。分别先调用直接定义函数，如果没有则优先调用显式具体化，如果没有才会调用函数模板。</p><h2 id="函数模板重载"><a href="#函数模板重载" class="headerlink" title="函数模板重载"></a>函数模板重载</h2><p>和普通函数一样模板函数也可以重载，即相同函数模板名可以具有不同的函数模板定义,当进行函数调用时,编译器根据实参的类型与个数来决定调用哪个函数模板来实例化一个函数。</p><h1 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h1><h2 id="类模板定义"><a href="#类模板定义" class="headerlink" title="类模板定义"></a>类模板定义</h2><p>同样的，我们也可以设置一个模板类型。在类模板中我们可以对不同的对象定义相同的操作，拥有不同数据类型的成员属性。同样使用<code>template</code>来声明。声明形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> 形参名&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参名可以在类被实例化时指定。</p><p>我们这里建立一个简单的类模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T A;</span><br><span class="line"><span class="keyword">int</span> B;</span><br><span class="line"><span class="keyword">float</span> C;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Name(T a, <span class="keyword">int</span> b, <span class="keyword">float</span> c)</span><br><span class="line">&#123;</span><br><span class="line">A = a;</span><br><span class="line">B = b;</span><br><span class="line">C = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Put</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A = &quot;</span> &lt;&lt; A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B = &quot;</span> &lt;&lt; B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C = &quot;</span> &lt;&lt; C &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Name&lt;<span class="keyword">int</span>&gt;Q(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>);</span><br><span class="line">Q.Put();</span><br><span class="line">Name&lt;<span class="keyword">float</span>&gt;W(<span class="number">3.14</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">W.Put();</span><br><span class="line">Name&lt;<span class="keyword">char</span>&gt;E(<span class="string">&#x27;S&#x27;</span>, <span class="number">1</span>, <span class="number">3.14</span>);</span><br><span class="line">E.Put();</span><br><span class="line">Name&lt;<span class="built_in">string</span>&gt;R(<span class="string">&quot;Hyperion&quot;</span>, <span class="number">1</span>, <span class="number">3.14</span>);</span><br><span class="line">R.Put();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立一个“Name”类（名字瞎起的）包含一个任意类型的A，“int”类型的B, “float”类型的C（A为类型模板形参，B, C为非类型模板形参）。我们在类模板实例化时可以指定A的类型。结果如下：</p><p><img src="/.com//../../../img/C-%E6%A8%A1%E6%9D%BF/001.PNG"></p><p><strong>注意：</strong></p><ol><li><p><strong>使用类模板时，必须要为模板形参显式指定实参，不存在实参推演过程，在类A后面跟上一个&lt;&gt;，并在里面表明相应的类型如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模板类名&lt;指定类型名&gt;对象名(参数列表);</span><br></pre></td></tr></table></figure></li><li><p>模板的声明或定义只能在全局、命名空间或类范围内进行，不能在局部范围、函数内进行，比如不能在main()函数中声明或定义一个模板。</p></li><li><p>如果在全局域中声明了与模板参数同名的变量，则该变量被隐藏。</p></li><li><p> 模板参数名不能被当作类模板定义中类成员的名字。</p></li><li><p>  同一个模板参数名在模板参数表中只能出现一次。</p></li><li><p>在不同的类模板声明或定义中，模板参数名可以被重复使用。</p></li><li><p>非类型模板形参相当于为函数模板或类模板预定义一些常量，在生成模板实例时，也要求必须以常量，即编译期已知的值为非类型模板参数赋值。非类型模板形参只可以是整型、枚举、指针和引用类型。</p></li><li><p>类型模板形参和函数的默认参数一样，如果有多个形参，则第一个形参设定了默认值之后的所有模板形参都要设定默认形参。可以为类模板设置默认值，但不能为函数模板设置默认值。</p></li></ol><p><strong>类模板之外定义成员函数</strong>   </p><p>类模板的成员函数都是在类的内部实现的，类模板的成员函数可以在类模板的定义中定义(inline函数)，也可以在类模板定义之外定义(此时成员函数定义前面必须加上template及模板参数)，在类模板外部定义成员函数的方法如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;模板形参表&gt;</span><br><span class="line">函数返回类型 类名&lt;模板形参名&gt;::函数名（参数列表）｛｝</span><br></pre></td></tr></table></figure><p>类模板成员函数本身也是一个模板，类模板被实例化时它并不自动被实例化，只有当它被调用或取地址时，才被实例化。需要注意的是当在类外面定义类的成员函数时，template后面的模板形参应与要定义的类模板形参一致。</p><h2 id="模板形参"><a href="#模板形参" class="headerlink" title="模板形参"></a>模板形参</h2><p>我们在定义一个类模板时该类的形参可以是另一个模板，其声明格式如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U,<span class="keyword">typename</span> Z&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A&lt;T,T&gt; a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中声明的第二个模板参数（A）就是一个类模板，注意只有类模板可以作为模板参数，参数声明中的关键字class是必需的。  模板参数使用的时候与一般参数没什么区别，不要拘泥于它的语法实现，只要记住可以使用模板作为模板的一个参数即可。通俗来讲，就是套娃。</p><h2 id="类模板的继承"><a href="#类模板的继承" class="headerlink" title="类模板的继承"></a>类模板的继承</h2><p>待补充。。。。。。</p><h1 id="模板特化"><a href="#模板特化" class="headerlink" title="模板特化"></a>模板特化</h1><p>待补充。。。。。。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧（这次写了好多东西）溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                            2020 年 4月 27日</p><p><img src="https://s1.ax1x.com/2020/04/27/JWAkKx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++/多态</title>
      <link href="2020/04/26/C-%E7%9A%84%E5%A4%9A%E6%80%81/"/>
      <url>2020/04/26/C-%E7%9A%84%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="C-多态"><a href="#C-多态" class="headerlink" title="C++/多态"></a>C++/多态</h1><p>多态是面向对象编程领域的核心概念，没有运用多态的C++是不可以称之为面向对象编程语言的。它与封装、继承共同构成了面向对象程序设计的三大特征。</p><p>多态性一般指不同对象收到相同消息时产生不同的实现动作。在程序中表现为，不同功能的函数在不同的类中具有相同的函数名，相应的类对象在调用同名函数时会执行不同的动作。</p><p>C++支持两种多态性：<strong>编译时多态性</strong>，<strong>运行时多态性</strong>。</p><h2 id="编译时多态性"><a href="#编译时多态性" class="headerlink" title="编译时多态性"></a>编译时多态性</h2><p><strong>编译时多态</strong>又称静态联编，是指程序在编译时就可确定的多态性，主要通过我们前面提到的重载机制实现。</p><p>如下：</p><p><strong>函数重载</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过函数重载我们可以实现相同函数名（add）实现不同的运算方式得出不同的返回值。</p><p><strong>运算符重载</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回类型 <span class="keyword">operator</span> 运算符（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">    函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过运算符重载我们为已有的运算符赋予其新的运算方式。</p><h2 id="运行时多态性"><a href="#运行时多态性" class="headerlink" title="运行时多态性"></a>运行时多态性</h2><p><strong>运行时多态</strong>称为动态联编，是指必须在运行中才可确定的多态性，主要通过继承和虚函数实现。</p><p>虚函数是运行时多态，若某个基类函数声明为虚函数，则其公有派生类将定义与其基类虚函数原型相同的函数，这时，当使用基类指针或基类引用操作派生类对象时，系统会自动用派生类中的同名函数代替基类虚函数。</p><p>虚函数的声明形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">virtual</span>  函数返回值类型 函数名（参数表）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(声明方式与普通函数类似，仅仅在函数声明前加关键词“virtual” )</p><p>虚函数允许子类重新定义成员函数，而子类重新定义父类的做法称为覆盖，或者称为重写。</p><p>（由于重载与虚函数在前面的文章已有较为详细的描述，这里不再仔细赘述。）</p><h1 id="多态的目的"><a href="#多态的目的" class="headerlink" title="多态的目的"></a>多态的目的</h1><p>多态的目的：封装可以使得代码模块化，继承可以扩展已存在的代码，他们的目的都是为了代码重用。而多态的目的则是为了“接口重用”。也即，不论传递过来的究竟是类的哪个对象，函数都能够通过同一个接口调用到适应各自对象的实现方法。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​        多态性指相同对象收到不同消息或不同对象收到相同消息时产生不同的实现动作。C++支持两种多态性：编译时多态性，运行时多态性。多态可以更好地实现代码扩展。多态可以通过静态联编及动态联编两种方式实现，静态联编的方式主要包括函数重载和运算符重载，动态联编主要通过虚函数实现。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                2020年 4月 26日</p><p><img src="https://s1.ax1x.com/2020/04/25/JyO0HS.jpg" alt="top"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++/虚函数</title>
      <link href="2020/04/25/C-%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>2020/04/25/C-%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简单了解虚函数"><a href="#简单了解虚函数" class="headerlink" title="简单了解虚函数"></a>简单了解虚函数</h1><p>虚函数是C++中实现多态的一种机制。其核心理念就是通过基类访问派生类定义的函数。一般来讲我们可以使一个基类类型的指针或者引用来指向派生类对象，再通过指针来调用由派生类重写的虚函数。这也是C++多态的一个常用的场景。</p><h1 id="虚函数定义"><a href="#虚函数定义" class="headerlink" title="虚函数定义"></a>虚函数定义</h1><p>虚函数的声明与普通函数的声明方式类似只是再成员函数原型前添加 virtual关键字,具体的声明形式如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  virtua1  函数返回值类型 函数名(参数表）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>1.虚函数只能是类中的函数,但不以是静态成员函数。</p><p>2.派生类对基类虚函数重新定义时,必须与基类中虚函数的原型完全一致，包括返回值类型、函数类型、函数名、参数个数、参数类型及参数顺序。派生类中同名函数前是否添加virtual,均被视为虚函数。</p><p>3.虚函数只能借助于指针或者引用来达到多态的效果。</p><h1 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法,以实现多态性。实现了纯虚函数的子类，该纯虚函数在子类中就变成了虚函数。在基类中实现纯虚函数的方法是在函数原型后加 <strong>=0</strong>，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数返回值类型 函数名（参数表） =  <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>虽然纯虚函数与虚函数都是用关键字<strong>virtual</strong>声明，但纯虚函数只有函数名而不具备函数功能，不可被调用，声明格式中后面的“=0”并不表示函数的返回值为0，只是以这样的形式说明该函数为纯此虚函数，“=0”后以分号结尾，表示声明结束。</p><p><strong>若在一个类中声明了纯虚函数，但是在其派生类中没有实现该函数，则该函数在派生类中仍为纯虚函数。</strong></p><h2 id="析构"><a href="#析构" class="headerlink" title="析构"></a>析构</h2><p>在C++中，不能声明虚构造函数，因为构造函数执行时，对象还没有构造好，不可按虚函数方式进行调用，但可以声明虚析构函数。形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Virtual  ~类名();</span><br></pre></td></tr></table></figure><p>虚析构函数是为了解决基类的指针指向派生类对象，并用基类的指针销毁派生类对象的应用产生的。通常，使用基类指针指向一个new生成的派生对象，通过delete销毁基类指针指向的派生类对象时，有以下两种情况：</p><p>1.如果基类析构函数不是虚析构函数，则只会调用基类的析构函数，派生类的析构函数不被调用，此时派生类中申请的资源不被回收。</p><p>2.如果基类析构函数为虚析构函数，则释放基类指针指向的对象时会调用基类及派生类析构函数，派生类对象中的所有资源被回收。</p><p>定义纯虚函数的目的在于，使派生类仅仅只是继承函数的接口。</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>含有纯虚函数的类称之为抽象类，它不能生成对象（创建实例），只能创建它的派生类的实例。抽象类是一种特殊的类，它是为了抽象和设计的目的为建立的，它处于继承层次结构的较上层。</p><p>抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>说了这么多，我们来看一个简单的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//纯虚函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Printinfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">virtual</span> ~Shape();<span class="comment">//虚析构函数声明</span></span><br><span class="line">&#125;;</span><br><span class="line">Shape::~Shape()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Shape&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> X, Y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span><span class="comment">//派生类中该函数为纯虚函数，如不定义则该类无法实例化。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span><span class="comment">//故直接return0;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Printinfo</span><span class="params">()</span><span class="comment">//派生类中对基类虚函数的定义。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点X = &quot;</span> &lt;&lt; X &lt;&lt; <span class="string">&quot;, Y =  &quot;</span> &lt;&lt; Y &lt;&lt; <span class="string">&quot;该对象没有Area和volume.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> X; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Y; &#125;</span><br><span class="line">Point(<span class="keyword">double</span> x, <span class="keyword">double</span> y) &#123; X = x, Y = y; &#125;;</span><br><span class="line">~Point() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Point&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span><span class="keyword">public</span> Point</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> R;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span><span class="comment">//函数重写，对基类Point的Area覆盖。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Pi * R * R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Printinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆心(X = &quot;</span> &lt;&lt; GetX() &lt;&lt; <span class="string">&quot;, Y =  &quot;</span> &lt;&lt; GetY() &lt;&lt; <span class="string">&quot;), Area为&quot;</span> &lt;&lt; Area() &lt;&lt; <span class="string">&quot;, 该对象没有volume.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Circle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r) :Point(x, y) &#123; R = r; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetR</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> R; &#125;</span><br><span class="line">~Circle() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Circle&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cylinder</span> :</span><span class="keyword">public</span> Circle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> H;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> SUM = <span class="number">2</span> * Pi * GetR() * GetR();</span><br><span class="line">SUM = SUM + <span class="number">2</span> * Pi * GetR() * H;</span><br><span class="line"><span class="keyword">return</span> SUM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Pi * GetR() * GetR() * H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Printinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆心(X = &quot;</span> &lt;&lt; GetX() &lt;&lt; <span class="string">&quot;, Y =  &quot;</span> &lt;&lt; GetY() &lt;&lt; <span class="string">&quot;), Area为&quot;</span> &lt;&lt; Area() &lt;&lt; <span class="string">&quot;, volume为&quot;</span> &lt;&lt; volume() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cylinder(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r, <span class="keyword">double</span> h) :Circle(x, y, r) &#123; H = h; &#125;</span><br><span class="line">~Cylinder() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Cylinder&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Point <span class="title">point</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Circle <span class="title">circle</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">Cylinder <span class="title">cylinder</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="comment">//shape指针</span></span><br><span class="line">Shape* shape = &amp;point;</span><br><span class="line">shape-&gt;Printinfo();</span><br><span class="line">shape = &amp;circle;</span><br><span class="line">shape-&gt;Printinfo();</span><br><span class="line">shape = &amp;cylinder;</span><br><span class="line">shape-&gt;Printinfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line">Shape&amp; shape1 = point;</span><br><span class="line">shape1.Printinfo();</span><br><span class="line">Shape&amp; shape2 = circle;</span><br><span class="line">shape2.Printinfo();</span><br><span class="line">Shape&amp; shape3 = cylinder;</span><br><span class="line">shape3.Printinfo();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以抽象类Shape为基类派生出Point类再由其派生出Circle类。结果如下：</p><p><img src="https://s1.ax1x.com/2020/04/26/JgUnYR.jpg" alt="top"></p><p><strong>当使用类的指针调用成员函数时，普通函数由指针类型决定，而虚函数由指针指向的实际类型决定。</strong></p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p><img src="/.com//C-%E8%99%9A%E5%87%BD%E6%95%B0/71445644_p0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单扫雷</title>
      <link href="2020/04/22/%E7%AE%80%E5%8D%95%E6%89%AB%E9%9B%B7/"/>
      <url>2020/04/22/%E7%AE%80%E5%8D%95%E6%89%AB%E9%9B%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="写一个简单的扫雷"><a href="#写一个简单的扫雷" class="headerlink" title="写一个简单的扫雷"></a>写一个简单的扫雷</h1><p>在家闲的无聊，写一个扫雷玩玩。当然，是没有图形界面的那种。（还没学图形界面）</p><p>这是刚学完C还未接触到C++的时候写的，所以没有用类，用的结构体。</p><p>定义一个结构体矩阵作为雷区地图，其中每个每个方块包含3个成员mine，warn，record。</p><p>mine：里存放“1”或者“0”，“0”表示该地区没有地雷。“1”表示有地雷。</p><p>warn：里存放周围区域地雷数量。通常为0~8。</p><p>record：记录该方块是否被踩过。</p><p>然后定义SetMine，Warns，Draw，Add，Expand，End，Opration，等函数。</p><p>SetMine：在游戏开始前运行该函数随机设置雷区地雷。</p><p>Warns：在SetMine后运行，返回雷区所有方块警告数。</p><p>Draw：绘制雷区地图。</p><p>Opration：玩家操作，打开方块。</p><p>Add：如果玩家操作时没踩雷且打开的方块警告为0，则将周围警告为0的方块打开。</p><p>Expand：在add后打开一圈。</p><p>End：判断玩家游戏是否结束。</p><p>运行环境：vs2019</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序函数名首字母全部大写。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">9</span>;<span class="comment">//number存放当前雷区数量。</span></span><br><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>];<span class="comment">//c为从玩家处每次排雷获取的坐标，之后转化为（x，y）的形式。</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">position</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> mine = <span class="number">0</span>;<span class="comment">//地雷，mine里存放“1”或者“0”，“0”表示该地区没有地雷。“1”表示有地雷。</span></span><br><span class="line"><span class="keyword">int</span> warn = <span class="number">0</span>;<span class="comment">//警告，warn里存放周围区域地雷数量。通常为0~8。</span></span><br><span class="line"><span class="keyword">int</span> record=<span class="number">0</span>;<span class="comment">//记录该方块是否被踩过。</span></span><br><span class="line">&#125;<span class="built_in">map</span>[<span class="number">9</span>][<span class="number">9</span>];<span class="comment">//地图，该游戏为大小为9*9。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetMine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a, b;<span class="comment">//生成9个随机数n的范围为（1~81）,转换为（a，b）的位置信息为地雷的位置。</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));<span class="comment">//以时间为种子生成随机数，避免重复。</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line">n = rand() % <span class="number">82</span>;</span><br><span class="line">a = (n / <span class="number">9</span>);</span><br><span class="line">b = (n % <span class="number">9</span>); </span><br><span class="line"><span class="comment">/*cout &lt;&lt; n &lt;&lt;&quot;||&quot;&lt;&lt; a &lt;&lt; &quot;,&quot; &lt;&lt; b &lt;&lt; endl;*/</span><span class="comment">//写程序时测试地雷坐标用。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[a][b].mine == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[a][b].mine = <span class="number">1</span>;<span class="comment">//生成的随机数转换成坐标后mine值变为“1”，warn值变为“-9”.</span></span><br><span class="line"><span class="built_in">map</span>[a][b].warn = <span class="number">-9</span>;<span class="comment">//为防止后面warn值增加后为正数所以现在设为“-9”。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Warns</span><span class="params">()</span><span class="comment">//该函数返回当前区域周围地雷数量。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x - <span class="number">1</span>][y - <span class="number">1</span>].mine == <span class="number">1</span> &amp;&amp; (x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (y - <span class="number">1</span>) &gt;= <span class="number">0</span> )<span class="comment">//防止（x， y）超出边界。</span></span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y - <span class="number">1</span>].mine == <span class="number">1</span> &amp;&amp; (y - <span class="number">1</span>) &gt;= <span class="number">0</span> )</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x + <span class="number">1</span>][y - <span class="number">1</span>].mine == <span class="number">1</span> &amp;&amp; (y - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (x + <span class="number">1</span>) &lt;= <span class="number">9</span> )</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x - <span class="number">1</span>][y].mine == <span class="number">1</span> &amp;&amp; (x - <span class="number">1</span>) &gt;= <span class="number">0</span> )</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x + <span class="number">1</span>][y].mine == <span class="number">1</span> &amp;&amp; (x + <span class="number">1</span>) &lt;= <span class="number">9</span> )</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x - <span class="number">1</span>][y + <span class="number">1</span>].mine == <span class="number">1</span> &amp;&amp; (x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (y + <span class="number">1</span>) &lt;= <span class="number">9</span>)</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y + <span class="number">1</span>].mine == <span class="number">1</span> &amp;&amp; (y + <span class="number">1</span>) &lt;= <span class="number">9</span>)</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x + <span class="number">1</span>][y + <span class="number">1</span>].mine == <span class="number">1</span> &amp;&amp; (x + <span class="number">1</span>) &lt;= <span class="number">9</span> &amp;&amp; (y + <span class="number">1</span>) &lt;= <span class="number">9</span>)</span><br><span class="line"><span class="built_in">map</span>[x][y].warn++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span><span class="comment">//该函数绘制游戏视图。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">9</span>, y = <span class="number">9</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* 1 2 3 4 5 6 7 8 9&quot;</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//边框</span></span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].record == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;■&quot;</span>;<span class="comment">//没被踩过绘制图时显示“■”。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].warn == <span class="number">0</span>)<span class="comment">//被踩过显示warn值。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  &quot;</span>;<span class="comment">//warn值为“0”显示“  ”</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[x][y].warn &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">map</span>[x][y].warn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>  (<span class="built_in">map</span>[x][y].warn &lt; <span class="number">0</span>)<span class="comment">//之前设置地雷方块的warn为“-9”小于0.</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; *&quot;</span>;<span class="comment">//此时该地雷方块被踩中，显示“ *”</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//换行。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span><span class="comment">//当踩中方块warn值为0时该函数将周围warn值为0的方块打开。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].record == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[x][y].warn == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y - <span class="number">1</span>].warn == <span class="number">0</span> &amp;&amp; (y - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[x][y - <span class="number">1</span>].mine == <span class="number">0</span>)<span class="comment">//防止方块超过雷区范围。</span></span><br><span class="line"><span class="built_in">map</span>[x][y - <span class="number">1</span>].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x - <span class="number">1</span>][y].warn == <span class="number">0</span> &amp;&amp; (x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[x - <span class="number">1</span>][y].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x - <span class="number">1</span>][y].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x + <span class="number">1</span>][y].warn == <span class="number">0</span> &amp;&amp; (x + <span class="number">1</span>) &lt;= <span class="number">9</span> &amp;&amp; <span class="built_in">map</span>[x + <span class="number">1</span>][y].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x + <span class="number">1</span>][y].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y + <span class="number">1</span>].warn == <span class="number">0</span> &amp;&amp; (y + <span class="number">1</span>) &lt;= <span class="number">9</span> &amp;&amp; <span class="built_in">map</span>[x][y + <span class="number">1</span>].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x][y + <span class="number">1</span>].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//一次只打开上下左右的方块，后面会将该函数执行多次，链式反应会打开所有warn值为0的方块。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Expand</span><span class="params">()</span><span class="comment">//Add函数只能打开周围warn值为0的方块，该函数打开Add函数后warn值不为0的方块。</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//只执行一次所以只打开周围一圈。</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].record == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[x][y].warn == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( (y - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[x][y - <span class="number">1</span>].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x][y - <span class="number">1</span>].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[x - <span class="number">1</span>][y].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x - <span class="number">1</span>][y].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (x + <span class="number">1</span>) &lt;= <span class="number">9</span> &amp;&amp; <span class="built_in">map</span>[x + <span class="number">1</span>][y].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x + <span class="number">1</span>][y].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (y + <span class="number">1</span>) &lt;= <span class="number">9</span> &amp;&amp; <span class="built_in">map</span>[x][y + <span class="number">1</span>].mine == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>[x][y + <span class="number">1</span>].record = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">End</span><span class="params">()</span><span class="comment">//该函数返回当前雷区没被打开方块的数量，判断游戏结束胜利还是失败。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].record == <span class="number">0</span>)</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Opration</span><span class="params">()</span><span class="comment">//该函数执行玩家的操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前雷区共有&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;颗雷，请小心行事Σ( ° △ °|||)︴&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Draw();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入坐标（x,y 英文）：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c[<span class="number">0</span>] &lt;= <span class="number">48</span> ||c[<span class="number">0</span>] &gt; <span class="number">57</span> ||( c[<span class="number">1</span>] != <span class="string">&#x27;,&#x27;</span> &amp;&amp; c[<span class="number">1</span>] != <span class="string">&#x27;，&#x27;</span>) || c[<span class="number">2</span>] &lt;= <span class="number">48</span> || c[<span class="number">2</span>] &gt; <span class="number">57</span>)<span class="comment">//&quot;48&quot;ASCII码值为“0”，“57”为“9”</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的坐标！凸(艹皿艹 )&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的坐标！凸(艹皿艹 )&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的坐标！凸(艹皿艹 )&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;任意键继续&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>.get();<span class="comment">//等待玩家看完上面的话。</span></span><br><span class="line"><span class="built_in">cin</span>.get();<span class="comment">//待玩家输入任意键后return 0；</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">y = c[<span class="number">0</span>] - <span class="number">49</span>;<span class="comment">//ASII码值转换为十进制数值。再转换为数组中的值。</span></span><br><span class="line">x = c[<span class="number">2</span>] - <span class="number">49</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].record == <span class="number">1</span>)<span class="comment">//判断当前打开的方块是否之前被打开过。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;这里已经试过了哦！（づ￣3￣）づ╭❤～&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;这里已经试过了哦！（づ￣3￣）づ╭❤～&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;这里已经试过了哦！（づ￣3￣）づ╭❤～&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;任意键返回&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>.get();<span class="comment">//等待玩家看完上面的话。</span></span><br><span class="line"><span class="built_in">cin</span>.get();<span class="comment">//待玩家输入任意键后return 0；</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].mine == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[x][y].record = <span class="number">1</span>;<span class="comment">//判断是否踩雷。</span></span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y].mine == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[x][y].record = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[x][y].record = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Add();<span class="comment">//循环7次Add函数，打开当前操作周围warn值为0的方块。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Expand();<span class="comment">//一次，打开Add后周围warn不为0的方块。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Text</span><span class="params">()</span><span class="comment">//该段函数测试用，可以显示雷区地图情况如mine，warn，record。(๑•̀ㅂ•́)و✧</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;record &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">9</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; <span class="number">9</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">map</span>[a][b].record;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; warn &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">9</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; <span class="number">9</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[a][b].warn &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">map</span>[a][b].warn;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[a][b].warn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; mine &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">9</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; <span class="number">9</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">map</span>[a][b].mine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, end = <span class="number">0</span>;<span class="comment">//end,存放游戏是否胜利的信息。</span></span><br><span class="line">system(<span class="string">&quot;title MineClearing_测试版（作者：冰箱的主人）φ(≧ω≦*)♪&quot;</span>);<span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt; <span class="number">3</span>; a++)<span class="comment">//后面游戏结束时输入令a = 1可以再开一局。</span></span><br><span class="line">&#123;</span><br><span class="line">SetMine();<span class="comment">//先在雷区设置地雷信息。</span></span><br><span class="line">Warns();<span class="comment">//生成警告信息。</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;   欢迎来到雷区o(*≧▽≦)ツ┏━┓&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*Text();*/</span><span class="comment">//写函数时测试用。</span></span><br><span class="line">i = Opration();<span class="comment">//如果没踩雷Opration函数返回0，持续循环。</span></span><br><span class="line"><span class="keyword">if</span> (End() &lt;= <span class="number">9</span>)<span class="comment">//检测当前雷区方块剩余数量。</span></span><br><span class="line">&#123;</span><br><span class="line">end = <span class="number">1</span>;<span class="comment">//end值之后判断游戏胜利与失败。</span></span><br><span class="line">i++;<span class="comment">//i++后跳出循环。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end == <span class="number">1</span>)<span class="comment">//胜利与失败消息。</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">Draw();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你成功的找出了剩下的&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;颗地雷！(๑•̀ㅂ•́)و✧&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;游戏结束&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (end == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">Draw();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你不小心踩中一颗地雷！(；′⌒`)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;很遗憾，游戏结束&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;按“1”再来一局ヾ(≧O≦)〃嗷~其余任意键结束～(　TロT)σ&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">9</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">9</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[a][b].record = <span class="number">0</span>;<span class="comment">//不论是否开下一局游戏重置所有方块为“0”.</span></span><br><span class="line"><span class="built_in">map</span>[a][b].mine = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[a][b].warn = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好长。。。。。。结果如下：</p><p><img src="/.com//%E7%AE%80%E5%8D%95%E6%89%AB%E9%9B%B7/Jt6mmq.png"></p><p><img src="/.com//%E7%AE%80%E5%8D%95%E6%89%AB%E9%9B%B7/Hd0012d7a0e714bfa9e7c8f927ae7e42bV.png"></p><p>第一次就踩雷了。。。。。。。。</p><p><img src="/.com//%E7%AE%80%E5%8D%95%E6%89%AB%E9%9B%B7/Jt6JXR.png"></p><p>我果然不会玩扫雷。</p><p>大概就是这样，现在C++的学习已经渐入佳境，考虑之后会用C++在写一遍。</p><p>还有贪吃蛇，俄罗斯方块之类的有时间会补上。</p><p>呐，就这样。</p><p>​                                                                                                                                                    2020年 4月 22日</p><p><img src="https://pic.downk.cc/item/5e9fdafec2a9a83be55252b1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++/类的继承</title>
      <link href="2020/04/09/C++_%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>2020/04/09/C++_%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="C-继承"><a href="#C-继承" class="headerlink" title="C++/继承"></a>C++/继承</h1><p>继承是面向对象程序设计中最重要三大特性之一，也是C++语言的一个重要机制。在C++中，类是提供封装的逻辑单位。我们可以在一个类的基础上对其进行增加、修改或替换指定类的部分内容的方法对该类进行修改，这样我们就可以使其适应适应不同的场景应用。这使得创建和维护一个应用程序变得更容易。也达到了重用代码功能和提高执行效率的效果。</p><h1 id="基类-amp-派生类"><a href="#基类-amp-派生类" class="headerlink" title="基类&amp;派生类"></a>基类&amp;派生类</h1><p>当我们创建一个类时，我们不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p><p>定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名:</span> 继承方式 基类名</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  数据成员和成员函数声明;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    数据成员和成员函数声明;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中继承方式为：公有继承（public），保护继承（protected），私有继承（private）。</p><p>派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。</p><p>我们可以根据访问权限总结出不同的访问类型，如下所示：</p><table><thead><tr><th align="center">访问方式</th><th align="center">public</th><th align="center">protected</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">类的内部</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">派生类</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">外部的类</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr></tbody></table><h1 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h1><h2 id="公有继承"><a href="#公有继承" class="headerlink" title="公有继承"></a>公有继承</h2><p>我们直接看示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cycle</span> &#123;</span><span class="comment">//我们定义一个基类圆。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> r;<span class="comment">//r为半径。</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">double</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">R</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cycle::Set</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cycle::R</span><span class="params">()</span><span class="comment">//获取半径；</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> :</span><span class="keyword">public</span> Cycle<span class="comment">//定义派生类球</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> surface = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> volume = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetR</span><span class="params">(<span class="keyword">double</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Volume</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Surface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Put</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ball::SetR</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Set(i);<span class="comment">//设置半径。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ball::Volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">volume = <span class="number">4</span> * Pi * R() * R() * R();</span><br><span class="line">volume = volume / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ball::Surface</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">surface = <span class="number">4</span> * Pi * R() * R();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ball::Put</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;球的体积为&quot;</span> &lt;&lt; volume &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;球的便面积为&quot;</span> &lt;&lt; surface &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Ball ball;</span><br><span class="line">ball.SetR(<span class="number">2</span>);<span class="comment">//设置基类“圆”的半径。</span></span><br><span class="line">ball.Volume();</span><br><span class="line">ball.Surface();</span><br><span class="line">ball.Put();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/Gz8wuj.png"></p><p>很简单的一个示例，先定义“圆”类为基类，公有继承出的球类在基类“圆”的基础上增加体积与表面积两个成员和计算他们的方法。</p><p>注意:派生类不会继承基类以下方法</p><ul><li>基类的构造函数、析构函数和拷贝构造函数。</li><li>基类的重载运算符。</li><li>基类的友元函数。</li></ul><h2 id="保护继承"><a href="#保护继承" class="headerlink" title="保护继承"></a>保护继承</h2><p>当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</p><h2 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h2><p>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>员。</p><p>（由于我们几乎不用保护继承和私有继承并且用法与公有继承一致所以略过=_=）</p><h1 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h1><h2 id="多继承-1"><a href="#多继承-1" class="headerlink" title="多继承"></a>多继承</h2><p>从一个基类派生的继承称为单继承，与此相对地，从多个基类派生的继承称为多继承或多重继承，也就是说，一个派生类可以有多个直接基类。C++多重继承声明语句的常用格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名:</span> 继承方式 基类名<span class="number">1</span>, 继承方式 基类名<span class="number">2</span>，...</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     数据成员和成员函数声明</span><br><span class="line"> <span class="keyword">private</span>:  </span><br><span class="line">   数据成员和成员函数声明</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：在某些面向对象的语言（如Java)中不支持类间的多重继承而只支持单重继承，因此实现类似的功能需要借助接口等其他机制。</p><h2 id="虚拟继承"><a href="#虚拟继承" class="headerlink" title="虚拟继承"></a>虚拟继承</h2><p>有时我们在继承多次后会出现拷贝多基类的问题，我们可以用虚拟继承来解决问题。形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类:</span><span class="keyword">virtual</span> <span class="keyword">public</span> 基类&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     数据成员和成员函数声明</span><br><span class="line"> <span class="keyword">private</span>:  </span><br><span class="line">   数据成员和成员函数声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                2020年 4月 14日</p><p><img src="https://pic.downk.cc/item/5e9f0c27c2a9a83be5c2ee6e.png" alt="top"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载运算符（二）</title>
      <link href="2020/04/07/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2020/04/07/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>上一篇我们简单了解了重载运算符，现在我们来更深层次的了解一下运算符重载。</p><h1 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h1><p>运算符重载是对已有的运算符赋予多重含义，使同一个运算符作用于不同类型的数据时做出不同的行为。</p><p>运算符重载的本质是函数重载，它也是C++多态的一种体现，为用户提供了一个直观的接口，调用运算符操作自定义数据类型其实就是调用运算符函数。运算符重载增强了C++的可扩充性，使得C++代码更加直观、易读，且便于对对象进行各种运算操作。</p><h2 id="作为类的成员函数"><a href="#作为类的成员函数" class="headerlink" title="作为类的成员函数"></a>作为类的成员函数</h2><p>我们除了直接对运算符重载外还能将重载运算符作为类的成员函数或友元函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回类型 <span class="keyword">operator</span> 运算符（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">    函数体；</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：重载为类的友员函数时，由于没有隐含的this指针，因此操作数的个数没有变化，所有的操作数都必须通过函数的形参进行传递，函数的参数与操作数自左至右保持一一对应。</p><p>成员函数运算符与友元函数运算符各自的一些特点：</p><ol><li>单目运算符如运算符最好重载为类的成员函数。</li><li>双目运算符最好重载为类的友员函数。</li><li>若运算符的操作数（尤其是第一个操作数）希望有隐式类型转换，则只能选用友元函数。</li><li>复合赋值运算符通常应该是成员函数。</li><li>具有对称性的运算符可能转换任意一端的运算对象，如算术、关系运算符等，通常重载为非成员函数。</li><li>改变对象状态的运算符或者与给定类型密切相关的运算符，如递增，递减，解引用运算符，通常应该是成员函数。</li><li>有4个运算符必须重载为类的成员函数：赋值（=）、下标（[]）、调用（()）、成员访问箭头（-&gt;）。</li></ol><h2 id="输入和输出运算符的重载"><a href="#输入和输出运算符的重载" class="headerlink" title="输入和输出运算符的重载"></a>输入和输出运算符的重载</h2><p>我们一般将与iostream标准库兼容的输入输出运算符设为普通的非成员函数，否则他运算的对象只能为该类的对象。</p><p><strong>输入运算符声明格式</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;, 类对象引用);   <span class="comment">//第一个形参不能用const修饰</span></span><br></pre></td></tr></table></figure><p><strong>输出运算符语法格式</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;, <span class="keyword">const</span> 类对象引用); <span class="comment">//第二个形参不能为常量</span></span><br></pre></td></tr></table></figure><h2 id="关系运算符的重载"><a href="#关系运算符的重载" class="headerlink" title="关系运算符的重载"></a><strong>关系运算符的重载</strong></h2><p>关系运算符（如“==”或“&lt;”）也可以重载，这个过程非常直观。重载关系运算符一般都返回bool类型（true或false值）。其中，关系运算符有以下几点要注意：</p><ol><li>关系运算符都要成对的重载例如：如果类定义了operator==，则也应该定义operator!=。</li><li>“==”运算符应该具有传递性，即a==b和b==c都为真，则a==c也为真。</li><li>当成对出现运算符重载时，可以把一个运算符的工作委托给另一个运算符，这样可以复用代码。</li></ol><h2 id="赋值运算符的重载"><a href="#赋值运算符的重载" class="headerlink" title="赋值运算符的重载"></a><strong>赋值运算符的重载</strong></h2><p>对于赋值运算符来说，如果不重载，那么类会自动为我们提供一个赋值运算符。这个默认的赋值运算符跟默认拷贝构造函数一样，就是把一个对象的数据成员的值复制给另一个对象对应的数据成员。我们可以定义其他赋值运算符以使用别的类型作为右侧使运算对象。</p><h2 id="下标运算符"><a href="#下标运算符" class="headerlink" title="下标运算符"></a>下标运算符</h2><p>下标运算符通常以所访问元素的引用作为返回值，这样做的好处是下标运算符可以出现在赋值运算符的任意一端，另外我们最好同时定义下标运算符的常量版本和非常量版本。</p><p><strong>下标运算符格式</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回类型 <span class="keyword">operator</span>[] (参数列表);</span><br></pre></td></tr></table></figure><h2 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h2><p>由于递增和递减运算符会改变操作对象的状态，所以我们一般将其定义为成员函数。</p><p>为了与内置版本保持一致，前置运算符应该返回递增或递减后对象的引用，后置运算符应该返回对象的原值(递增和递减之前)，返回的形式是值而非引用。</p><p>由于前置版本和后置版本的递增或递减运算符使用的是同一个符号，为了区分它们，后置版本接受一个额外的不被使用的int类型的形参，这个形参的唯一作用就是区分前置版本和后置版本。</p><p>定义递增和递减运算符的类应该同时定义前置版本和后置版本。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> real;</span><br><span class="line"><span class="keyword">double</span> image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y);</span><br><span class="line"><span class="built_in">complex</span>(<span class="keyword">const</span> <span class="built_in">complex</span>&amp; i);</span><br><span class="line">~<span class="built_in">complex</span>();</span><br><span class="line"><span class="keyword">friend</span> <span class="built_in">complex</span> <span class="keyword">operator</span>-(<span class="built_in">complex</span>&amp; I, <span class="built_in">complex</span>&amp; M);</span><br><span class="line"><span class="keyword">friend</span> <span class="built_in">complex</span> <span class="keyword">operator</span>+(<span class="built_in">complex</span>&amp; I, <span class="built_in">complex</span>&amp; M);</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>++();</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>--();</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>--(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; P);</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, <span class="built_in">complex</span>&amp; P);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">complex</span>::<span class="built_in">complex</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">real = x;</span><br><span class="line">image = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span>::<span class="built_in">complex</span>(<span class="keyword">const</span> <span class="built_in">complex</span>&amp; i)</span><br><span class="line">&#123;</span><br><span class="line">real = i.real;</span><br><span class="line">image = i.image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span>::~<span class="built_in">complex</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del OK&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>-(<span class="built_in">complex</span>&amp; I, <span class="built_in">complex</span>&amp; M)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">P</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">P.real = I.real - M.real;</span><br><span class="line">P.image = I.image - M.image;</span><br><span class="line"><span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="keyword">operator</span>+(<span class="built_in">complex</span>&amp; I, <span class="built_in">complex</span>&amp; M)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">P</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">P.real = I.real + M.real;</span><br><span class="line">P.image = I.image + M.image;</span><br><span class="line"><span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="built_in">complex</span>::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">complex</span> P = *<span class="keyword">this</span>;</span><br><span class="line">P.real++;</span><br><span class="line"><span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="built_in">complex</span>::<span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">complex</span> P = *<span class="keyword">this</span>;</span><br><span class="line">P.real--;</span><br><span class="line"><span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="built_in">complex</span>::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">complex</span> P = *<span class="keyword">this</span>;</span><br><span class="line">real++;</span><br><span class="line"><span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">complex</span> <span class="built_in">complex</span>::<span class="keyword">operator</span>--(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">complex</span> P = *<span class="keyword">this</span>;</span><br><span class="line">real--;</span><br><span class="line"><span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P.image &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P.real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; P.image &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(P.image &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P.real &lt;&lt; P.image &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, <span class="built_in">complex</span>&amp; P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P.real &gt;&gt; P.image;</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">complex A(0, 0), B(0, 0);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; B;</span><br><span class="line"><span class="built_in">complex</span> C = A - B;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">C = A + B;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; B-- &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; --B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一个示例，定义复数类complex，包括私有数据成员实部real和虚部image。定义该类的构造，拷贝构造，析构函数。为该类重载运算符+，-（友元函数），前置和后置++，–（成员函数），插入符和提取符&lt;&lt;，&gt;&gt;（友元函数）。在main函数里定义复数对象，测试重载的这些运算符。</p><p>我们输入两个复数“3+4i”和“2-1i”计算上述重载运算符。结果如下：</p><p><img src="/.com//../../../img/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E4%BA%8C%EF%BC%89/JQ1AVH.png" alt="img"></p><h2 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h2><p>成员访问运算符包括解引用运算符和箭头运算符，箭头运算符必须是类的成员，解引用运算符通常也是类的成员，尽管并非必须如此。</p><p>我们可以重载解引用运算符完成任何想要的操作，但是箭头运算符永远不能丢掉成员访问这个基本的含义，重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象。</p><p>对于形如object-&gt;member的表达式来说<br> 1.如果object是一个对象的指针，则会执行(*object).member。<br> 2.如果object是一个重载了箭头运算符的对象，则会调用重载的箭头运算符计算结果，如果结果依然是一个指针，则执行第一步，如果结果本身也重载了箭头运算符，则重复调用当前步骤。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                    2020年 4月 7日</p><p><img src="https://s1.ax1x.com/2020/04/07/Gg3hX8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载函数和重载运算符</title>
      <link href="2020/04/05/%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/"/>
      <url>2020/04/05/%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C-重载函数和重载运算符（一）"><a href="#C-重载函数和重载运算符（一）" class="headerlink" title="C++ / 重载函数和重载运算符（一）"></a>C++ / 重载函数和重载运算符（一）</h1><h2 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h2><p>我们在写程序的过程中可能会经常遇到这么个问题：当我们要写个函数去实现某个功能却因为这个函数在不同地方调用时的不同（如形参，功能，返回值类型不同等）而不得不声明多个功能类似的函数。这样做会增加程序中函数名的数量，使程序的可读性不高。而在C++中我们可以用重载函数来解决这个麻烦。</p><p>C++ 允许我们在同一作用域中声明几个功能类似的同名函数，但是<strong>这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同</strong>。</p><p>即：一个函数名来实现不同的函数功能。而我们在编写同名函数时必须要让这些同名函数有所不同导致在这些函数在被程序调用时编译器能分得清程序要调用的是那个函数。emmmm有点拗口，我们举个例子。</p><p>以函数Add();为例。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用了函数1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用了函数2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用了函数3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> b, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用了函数4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">float</span> c = <span class="number">2.71</span>, d = <span class="number">3.14</span>;</span><br><span class="line">f(a, b);</span><br><span class="line">f(a, c);</span><br><span class="line">f(c, d);</span><br><span class="line">f(c, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/.com//../../../img/%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/GDb2kQ.png"></p><p>很简单的一个程序，系统通过对main函数中重载函数f();参数的扫描确定了要实现的功能。当然重载函数具体的函数体可以自行定义。</p><p>当你的程序被编译器编译的过程中会将重载函数的声明改为：</p><p>返回值类型_ 函数名_ 参数类型_ 参数类型…的形式如上面的</p><p>void_ f_ int_ int</p><p>void_ f_ int_ float</p><p>…等等。</p><p>我们一定要确保重载函数<strong>参数的个数、类型或者顺序</strong><u>不同</u>来保证系统能够识别该调用哪个功能的重载函数。</p><h2 id="简单认识重载运算符"><a href="#简单认识重载运算符" class="headerlink" title="简单认识重载运算符"></a>简单认识重载运算符</h2><p>C++中预定义中的运算符的操作对象只局限于基本的内置数据类型，也就是说没有为我们自定义的类设计的运算符。但是和重载函数类似，在C++中运算符也可以重载，并且我们可以重定义或重载大部分 C++ 内置的运算符。所以，有时为了对我们定义的类进行运算，我们可以给已有的运算符在原来的功能不变的基础上赋予新的功能来达到我们的要求。</p><p>重载的运算符本质上就是函数重载，目的在于让人能够用同名的函数来完成不同的基本操作。它们的名字由关键字operator和其后要赋予新定义的运算符共同组成。</p><p>重载运算符定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">返回值类型 <span class="keyword">operator</span> 重载运算符符号(参数表)</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">     函数体</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看一个简单的示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Property</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> Volume;</span><br><span class="line"><span class="keyword">int</span> Weight;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Put</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Property::Set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Volume:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Volume ;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Weight:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Weight ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Property::Put</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Volume = &quot;</span> &lt;&lt; Volume &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Weight = &quot;</span> &lt;&lt; Weight &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Property <span class="keyword">operator</span>+(<span class="keyword">const</span> Property&amp; a, <span class="keyword">const</span> Property&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">Property c;</span><br><span class="line">c.Volume = a.Volume + b.Volume;</span><br><span class="line">c.Weight = a.Weight + b.Weight;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Property A, B, C;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;set A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">A.Set();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;set B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">B.Set();</span><br><span class="line">C = A + B;</span><br><span class="line">C.Put();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们定义的类具有两个属性Volume， Weight，我们重载一个运算符“+”让”A” “+” “B”的功能为对象“A”中的“Volume”与对象“B”中的“Volume”相加，对象“A”中的“Weight”与对象“B”中的“ Weight”相加。最后返回一个对象。结果如下：</p><p><img src="/.com//../../../img/%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/Gru5gs.png"></p><p>（Ps：感觉我总写一些非常简单的代码。）</p><p>我们输入3 2 2 7后返回的对象Volume值为5，Weight值为9.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>C++中大部分运算符都能被重载，但有些运算符则不行，例如:</p><p><strong>“ . ”</strong>：成员访问运算符</p><p>“ .* “和” -&gt;* ”：成员指针访问运算符</p><p><strong>“ :: ”</strong>：域运算符</p><p><strong>“ sizeof ”</strong>：长度运算符</p><p><strong>“ ?: ”</strong>：条件运算符</p><p><strong>“ # ”</strong>： 预处理符号</p></li><li><p>逻辑运算符&amp;&amp;,||会先求左侧运算对象的值，再求右侧对象的值，仅当左侧运算对象无法确定表达式的结果时才会再求右侧运算对象的值，这种策略称为<strong>短路求值</strong> 。</p></li><li><p>一个运算符被重载后，原有的定义并没有失去。只是给它赋予了相对于一种特定类的一种新的运算方式。</p></li><li><p>运算符被重载后，原有的基本语义不变，运算符的优先级不变，运算符的结合性不变，运算符所需要的操作数不变。</p></li><li><p>运算符重载没有产生新的运算符。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                                                                                                                                                            2020年 4月 5日</p><p><img src="https://s1.ax1x.com/2020/04/05/GD40bj.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客出问题了</title>
      <link href="2020/04/02/%E5%8D%9A%E5%AE%A2%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/"/>
      <url>2020/04/02/%E5%8D%9A%E5%AE%A2%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="出大问题了-ε-┬┬﹏┬┬-3"><a href="#出大问题了-ε-┬┬﹏┬┬-3" class="headerlink" title="出大问题了 ε(┬┬﹏┬┬)3"></a>出大问题了 ε(┬┬﹏┬┬)3</h1><p>​        今天我还在想着怎么给我这刚搭建不久的博客加点什么，然后给看板娘加语音互动脚本的时候页面鬼畜了，对没错，这个页面一闪一闪的开始鬼畜T_T。我也不知道发生了什么，我吧把改动的文件改回去也没有用。于是我就纠结了一天，网课都没听。太悲哀了。</p><p><img src="/.com//%E5%8D%9A%E5%AE%A2%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/006HkbLkly1g713u8jdivj30c80c874y.jpg"></p><p>在最后抢救无效，只能换主题了。因为想着看能不能之后在搞搞能不能起死回生，于是我在另外一个盘来初始化一个博客，接着我将之前写的三篇文章小心翼翼的搬了过来。于是又有一个很严肃的题。。。。。。图片没了！</p><p><img src="/.com//%E5%8D%9A%E5%AE%A2%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/6af89bc8gw1f8ob86mod8j202b03c0si.jpg"></p><p>这可是个大问题！我那么多图，怎么能说没就没。</p><p>因为之前用的都是本地图片，用的都是相对地址再用插件上传至服务器。而这下路径发生改变导致图片上传错误。。。。。。</p><p>好在，没有放弃的我立刻Bing一下。突然发现有个叫图床的神奇东西。于是我立即将图片上传至图床获取链接后插入之前的文章。</p><p>同时，我还打算干脆更换一个主题。在Hexo主页的主题里逛了许久选了这个，在我一番调教后这个网站终于像个样子了。但是，我的看板娘目前也不知道哪出了问题用不了。bgm也没了，之前为了把那个网易云的外链播放器放准位置废了我不少功夫。但是这个主题我竟然没找到侧边栏的配置文件，所以外链播放器也没了。博文和侧边栏也不透明了，看不到背景图的那个博丽灵梦了。</p><p>原来的那个博客我会部署到Github上（ <a href="https://hyperion-lr.github.io/">https://hyperion-lr.github.io/</a> ），速度会好慢毕竟只是保存纪念。现在这个博客我会部署到阿里云的服务器上（ <a href="http://39.96.66.140/">http://39.96.66.140/</a> ），阿里的服务器还有4个月过期，之后再想办法吧。不过说起来，反正除了自己也没人看就算部署到GitHub上慢点也就慢点吧哈哈T_T。</p><p>暂时就先这样吧，我再看看之前那个能不能救回来。在此期间就只能用这个了。</p><p>呐，就酱紫。</p><p>​                                                                                        2020年 4月 2日</p><p><img src="https://s1.ax1x.com/2020/04/02/GtDnTx.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++_Class(类)</title>
      <link href="2020/04/01/C++_Class-%E7%B1%BB/"/>
      <url>2020/04/01/C++_Class-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="C-类-amp-对象"><a href="#C-类-amp-对象" class="headerlink" title="C++ 类&amp;对象"></a>C++ 类&amp;对象</h1><p>作为面向对象编程语言的核心特性，类用于指定对象。类中包含数据的表示方式与行为方式。类中的数据与方法被称为类的成员。</p><h1 id="C-类的定义"><a href="#C-类的定义" class="headerlink" title="C++ 类的定义"></a>C++ 类的定义</h1><p>在C++中类的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line"></span><br><span class="line">访问范围<span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">成员变量<span class="number">1</span>；</span><br><span class="line"></span><br><span class="line">成员变量<span class="number">2</span>；...</span><br><span class="line"></span><br><span class="line">成员函数<span class="number">1</span>声明 ();</span><br><span class="line"></span><br><span class="line">成员函数<span class="number">2</span>声明(); ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">访问范围<span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">如上。。。。。。</span><br><span class="line"></span><br><span class="line">&#125;；<span class="comment">//注意！类的定义必须以“;”结束.</span></span><br></pre></td></tr></table></figure><p>在C++中一个类的基本结构如下。其中，访问范围分为：</p><p>public:公有成员（类中的外部接口允许类的外部访问）</p><p>private:私有成员 （只允许本类中的函数访问，而类外部的任何函数都不能访问）</p><p>protected:保护成员（与private类似，差别表现在继承与派生时）。</p><p>成员变量的定义与普通变量没什么不同，只因该变量在类的内部，属于该类的成员故称其为成员变量。我们一般将其设为“private”防止其在外部访问的过程中发生改变。</p><p>一个类的成员函数之间可以互相调用。类的成员函数可以重载，也可以设定参数的默认值</p><p>成员变量就代表对象的“属性”，成员函数就代表对象的“方法”。成员变量和成员函数出现的先后次序没有规定。</p><p>成员函数在类的内部声明之后可以在类的外部进行定义。在定义的过程中成员函数民前要加上类名并用”::”作用域解析运算符来指明该成员函数所属的类。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 类名:函数名()</span><br><span class="line">&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">定义类之后，我们就可以用他来定义对象了。定义方法如下：</span><br><span class="line"></span><br><span class="line">类名::对象名;</span><br></pre></td></tr></table></figure><p>注意！我们定义一个类本质上是定义了一个数据类型，我们并没有初始化任何数据，我们只是定义了这个类的对象他应该包含了什么，以及这个对象能够干些什么。</p><h1 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h1><p>接下来，我们来看一个非常简单示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cuboid</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="comment">//我们定义一个长方体类。</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x;<span class="comment">//x,y,z分别为长方体的长宽高。</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">()</span></span>;<span class="comment">//声明一个设置用户输入的函数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Volume</span><span class="params">()</span></span>;<span class="comment">//声明一个求该长方体体积的函数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Area</span><span class="params">()</span></span>;<span class="comment">//声明一个求该长方体面积的函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cuboid::Set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该长方体长为：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该长方体宽为：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该长方体高为：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cuboid::Volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * y * z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cuboid::Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> area;</span><br><span class="line">area = <span class="number">2</span> * (x * y + x * z + y * z);</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cuboid cuboid;<span class="comment">//这里我们用类定义一个对象</span></span><br><span class="line">cuboid.Set();<span class="comment">//调用共有成员函数Set来为私有成员初始化。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该长方体体积为&quot;</span> &lt;&lt; cuboid.Volume() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该长方体面积为&quot;</span> &lt;&lt; cuboid.Area() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//调用两个公有成员函数求出体积和表面积。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   代码说明：很简单的一个求长方体体积与面积的例子，我们以长方体为对象定义了一个类“Cuboid”，然后又以这个类创建了一个对象“cuboid”，最后得出该对象的特点。</p><p>相信大家都看得懂。结果如下：</p><p><img src="/.com//../../../img/Class-%E7%B1%BB/%E6%8D%95%E8%8E%B7.PNG"></p><p>输入3，4，5后得出体积为60，面积为94.</p><p>到此，我们对类已经有了初步的认识。类是C++与Java等面向对象编程语言的核心，而类的继承，多态与封装共称为面向对象编程的三大特性，我们在之后的学习中将经常看到他们的身影。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p><img src="https://s1.ax1x.com/2020/04/03/Gao6wq.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从C到C++</title>
      <link href="2020/03/31/%E4%BB%8EC%E5%88%B0C/"/>
      <url>2020/03/31/%E4%BB%8EC%E5%88%B0C/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象-C"><a href="#面向对象-C" class="headerlink" title="面向对象/C++"></a>面向对象/C++</h1><p>由于面向过程的C语言已经是上个学期的故事了，目前并没有将其重新拿出来用的准备。毕竟C++与C之间还是有很多相同之处。于是，我们的故事从C++开始。</p><p>可能有人会问为什么是C++而不是Java。别问，学校教的我也没办法。（我也想学Java）</p><p>那么，什么是面向对象，C++与C又有什么不同？换句话说，我们为什么要学面向对象？</p><p>我觉得想了解面向对象，我们还得从面向过程（C语言）开始说起。</p><p>面向过程，顾名思义注重的是过程。让我们举个粒子：假如让你编写一个五子棋的游戏。面向过程，你该怎么写？</p><p>我们从一个main()函数开始:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line"></span><br><span class="line">白方先走；</span><br><span class="line"></span><br><span class="line">判断输赢；</span><br><span class="line"></span><br><span class="line">若白方胜利 - &gt; 游戏结束；</span><br><span class="line"></span><br><span class="line">否则游戏继续；</span><br><span class="line"></span><br><span class="line">黑方执子；</span><br><span class="line"></span><br><span class="line">判断输赢；</span><br><span class="line"></span><br><span class="line">若黑方胜利 - &gt; 游戏结束；</span><br><span class="line"></span><br><span class="line">否则游戏继续；</span><br><span class="line"></span><br><span class="line">返回至第一步</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里这个游戏的算法大体就出来了，当然里面还有很多细节我们这里省略了。看的出来，这个函数思路非常清晰，按着游戏一步一步来就行了。这就是面向过程的特点：流程化，以事件流程为中心，一种以事件基础流程为中心的思维方式。</p><p>但我们想想，当你做完这个五子棋的游戏，但还需要你去做一个象棋，国际象棋，斗兽棋甚至是飞行棋。你还能用这种方法一步一步去编写代码吗?显然，当项目过大时我们的程序员会累死。那么有没有一种偷懒的办法呢？</p><p>有的，我们看看在棋类游戏中的那些重复的东西：</p><p>首先不论是黑方还白方他们执棋的代码（如执棋，判断输赢）是否基本一致呢？                            </p><p>很好，函数可以帮我们解决这个问题。</p><p>其次黑白两方的各项数值(如时间，步数，棋子的剩余数量)是否完全一样？        </p><p>很好，结构体能解决这个问题。</p><p>这样看来好像已经简单许多，但是还能不能在简化呢？能不能将数据与方法结合起来呢？换句话说我们能不能有一种数据类型让他既能储存黑白方的多项数值又能实现他们的执棋的行为？</p><p>如果你想到这，恭喜你“class(类)”应运而生。class既能定义黑白方的各项数值，又能让其实现执棋的功能。正适合这种编程。只要我们以黑方白方为对象，将他们所具备的变量和方法进行整合为类，就能快速解决下棋的问题。</p><p>于是乎，我们的main()函数变成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">定义类，类名为执棋，包括如时间，步数，棋子的剩余数量等变量；也包括如执棋，判断输赢等方法；</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"></span><br><span class="line">白方.执棋 ();</span><br><span class="line"></span><br><span class="line">黑方.执棋();</span><br><span class="line"></span><br><span class="line">返回第一步；</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是不是非常简单。而不同的棋局（如：象棋，国际象棋，斗兽棋甚至是飞行棋），我们只需要将对其稍加修改之后即可接着用！所以，我们可以看出这个代码的重用率非常高。这就面向对象的特点：功能化，基于对象的概念建立相应模型并以功能为中心。</p><p>因此，面向对象语言其代码的重用性非常高。</p><p>总结一下：</p><p><strong>面向过程</strong></p><p>特性：模块化  流程化</p><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源，系统底层开发，单片机经常会用到，因为性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><p><strong>面向对象</strong></p><p>特性：封装，继承，多态</p><p>优点：易维护、易复用、易扩展</p><p>缺点：性能较面向过程更低。</p><p>面向过程与面向对象说白就是两种出发点不同的思路，面向过程因为流程化的思路具有较好的性能，而面向对象的三大特性：封装，继承，多态这些就是后话了。</p><p>（本人目前大一，学历有限学识短浅，如果文中有什么错误还请大家不要嘲笑。先写这么多吧溜了溜了。。。。。。-(´+ω+｀|）)</p><p>​                                                                                2020年 3月 31日</p><p><img src="https://s1.ax1x.com/2020/04/03/GaTZcQ.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="2020/03/30/HelloWorld/"/>
      <url>2020/03/30/HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>大家好，欢迎来到我的博客。<br>这是我在哔哩哔哩上学习搭建的一个博客。（目前功能正在完善中。）我打算用它来纪录我在学习专业时的一些过程，东西可能会很多很杂，我尽量整理吧希望大家喜欢。</p><p>鉴于本人目前大一所学经历有限，所以我写的可能都是一些非常基础的东西。不过我会努力学习成为大佬的！请大家多多指教。</p><p>呐，就酱紫。<br>                                                                                                                                    2020年 3月 30日<br>                                                                                                                                    By：冰箱的主人LR</p><p><img src="https://s1.ax1x.com/2020/04/03/GaHD6e.jpg" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
